; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

include listing.inc


PUBLIC	_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24
PUBLIC	_CTA2?AVruntime_error@std@@
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1@ ; `string'
PUBLIC	??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5stri@ ; `string'
PUBLIC	??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5r@ ; `string'
PUBLIC	??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5rang@ ; `string'
PUBLIC	??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int@ ; `string'
PUBLIC	??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5con@ ; `string'
PUBLIC	??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ra@ ; `string'
PUBLIC	??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint@ ; `string'
PUBLIC	??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doub@ ; `string'
PUBLIC	??_C@_02GLFAOOJA@?$FL?4@			; `string'
PUBLIC	??_7DefaultValueAllocator@Json@@6B@		; Json::DefaultValueAllocator::`vftable'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R4ValueAllocator@Json@@6B@			; Json::ValueAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3ValueAllocator@Json@@8			; Json::ValueAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ValueAllocator@Json@@8		; Json::ValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@DefaultValueAllocator@Json@@8	; Json::DefaultValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3DefaultValueAllocator@Json@@8		; Json::DefaultValueAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	?minInt@Value@Json@@2HB				; Json::Value::minInt
PUBLIC	?maxUInt@Value@Json@@2IB			; Json::Value::maxUInt
PUBLIC	?maxInt@Value@Json@@2HB				; Json::Value::maxInt
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R2DefaultValueAllocator@Json@@8		; Json::DefaultValueAllocator::`RTTI Base Class Array'
PUBLIC	_TI2?AVruntime_error@std@@
PUBLIC	??_R4DefaultValueAllocator@Json@@6B@		; Json::DefaultValueAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVValueAllocator@Json@@@8			; Json::ValueAllocator `RTTI Type Descriptor'
PUBLIC	??_R2ValueAllocator@Json@@8			; Json::ValueAllocator::`RTTI Base Class Array'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R0?AVDefaultValueAllocator@Json@@@8		; Json::DefaultValueAllocator `RTTI Type Descriptor'
PUBLIC	??_7ValueAllocator@Json@@6B@			; Json::ValueAllocator::`vftable'
EXTRN	_Init_thread_epoch:DWORD
EXTRN	__std_exception_destroy:PROC
EXTRN	__imp_malloc:PROC
EXTRN	??_L@YAXPEAX_K1P6AX0@Z2@Z:PROC			; `eh vector constructor iterator'
EXTRN	__imp_strchr:PROC
EXTRN	__imp_free:PROC
EXTRN	_Init_thread_header:PROC
EXTRN	atexit:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	_Init_thread_footer:PROC
;	COMDAT ?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A
_BSS	SEGMENT
?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A DQ 01H DUP (?) ; `Json::valueAllocator'::`2'::defaultAllocator
_BSS	ENDS
;	COMDAT ??_7ValueAllocator@Json@@6B@
CONST	SEGMENT
??_7ValueAllocator@Json@@6B@ DQ FLAT:??_R4ValueAllocator@Json@@6B@ ; Json::ValueAllocator::`vftable'
	DQ	FLAT:??_EValueAllocator@Json@@UEAAPEAXI@Z
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT ??_R0?AVDefaultValueAllocator@Json@@@8
data$r	SEGMENT
??_R0?AVDefaultValueAllocator@Json@@@8 DQ FLAT:??_7type_info@@6B@ ; Json::DefaultValueAllocator `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVDefaultValueAllocator@Json@@', 00H
data$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DQ FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DQ	FLAT:??_Eruntime_error@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_R2ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R2ValueAllocator@Json@@8 DD imagerel ??_R1A@?0A@EA@ValueAllocator@Json@@8 ; Json::ValueAllocator::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R0?AVValueAllocator@Json@@@8
data$r	SEGMENT
??_R0?AVValueAllocator@Json@@@8 DQ FLAT:??_7type_info@@6B@ ; Json::ValueAllocator `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVValueAllocator@Json@@', 00H
data$r	ENDS
;	COMDAT ??_R4DefaultValueAllocator@Json@@6B@
rdata$r	SEGMENT
??_R4DefaultValueAllocator@Json@@6B@ DD 01H		; Json::DefaultValueAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVDefaultValueAllocator@Json@@@8
	DD	imagerel ??_R3DefaultValueAllocator@Json@@8
	DD	imagerel ??_R4DefaultValueAllocator@Json@@6B@
rdata$r	ENDS
;	COMDAT _TI2?AVruntime_error@std@@
xdata$x	SEGMENT
_TI2?AVruntime_error@std@@ DD 00H
	DD	imagerel ??1runtime_error@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_R2DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R2DefaultValueAllocator@Json@@8 DD imagerel ??_R1A@?0A@EA@DefaultValueAllocator@Json@@8 ; Json::DefaultValueAllocator::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@ValueAllocator@Json@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R3DefaultValueAllocator@Json@@8 DD 00H		; Json::DefaultValueAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2DefaultValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DefaultValueAllocator@Json@@8 DD imagerel ??_R0?AVDefaultValueAllocator@Json@@@8 ; Json::DefaultValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3DefaultValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ValueAllocator@Json@@8 DD imagerel ??_R0?AVValueAllocator@Json@@@8 ; Json::ValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD imagerel ??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R3ValueAllocator@Json@@8 DD 00H			; Json::ValueAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 01H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVruntime_error@std@@@8
	DD	imagerel ??_R3runtime_error@std@@8
	DD	imagerel ??_R4runtime_error@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R4ValueAllocator@Json@@6B@
rdata$r	SEGMENT
??_R4ValueAllocator@Json@@6B@ DD 01H			; Json::ValueAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVValueAllocator@Json@@@8
	DD	imagerel ??_R3ValueAllocator@Json@@8
	DD	imagerel ??_R4ValueAllocator@Json@@6B@
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_7DefaultValueAllocator@Json@@6B@
CONST	SEGMENT
??_7DefaultValueAllocator@Json@@6B@ DQ FLAT:??_R4DefaultValueAllocator@Json@@6B@ ; Json::DefaultValueAllocator::`vftable'
	DQ	FLAT:??_EDefaultValueAllocator@Json@@UEAAPEAXI@Z
	DQ	FLAT:?makeMemberName@DefaultValueAllocator@Json@@UEAAPEADPEBD@Z
	DQ	FLAT:?releaseMemberName@DefaultValueAllocator@Json@@UEAAXPEAD@Z
	DQ	FLAT:?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z
	DQ	FLAT:?releaseStringValue@DefaultValueAllocator@Json@@UEAAXPEAD@Z
CONST	ENDS
;	COMDAT ??_C@_02GLFAOOJA@?$FL?4@
CONST	SEGMENT
??_C@_02GLFAOOJA@?$FL?4@ DB '[.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doub@
CONST	SEGMENT
??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doub@ DB 'Type is not '
	DB	'convertible to double', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint@
CONST	SEGMENT
??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint@ DB 'Type is not '
	DB	'convertible to uint', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ra@
CONST	SEGMENT
??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ra@ DB 'Real out of '
	DB	'unsigned integer range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5con@
CONST	SEGMENT
??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5con@ DB 'Negative int'
	DB	'eger can not be converted to unsigned integer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int@
CONST	SEGMENT
??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int@ DB 'Type is not c'
	DB	'onvertible to int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5rang@
CONST	SEGMENT
??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5rang@ DB 'Real out of '
	DB	'signed integer range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5r@
CONST	SEGMENT
??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5r@ DB 'integer out '
	DB	'of signed integer range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5stri@
CONST	SEGMENT
??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5stri@ DB 'Type is not '
	DB	'convertible to string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1@
CONST	SEGMENT
??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1@ DB 'Comments must sta'
	DB	'rt with /', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD imagerel ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT _CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
_CTA2?AVruntime_error@std@@ DD 02H
	DD	imagerel _CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0runtime_error@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ?valueAllocator@?1??0Json@@YAAEAPEAVValueAllocator@1@XZ@4PEAV21@EA
_DATA	SEGMENT
?valueAllocator@?1??0Json@@YAAEAPEAVValueAllocator@1@XZ@4PEAV21@EA DQ FLAT:?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A ; `Json::valueAllocator'::`2'::valueAllocator
	ORG $+132
?minInt@Value@Json@@2HB DD 080000000H			; Json::Value::minInt
	ORG $+44
?maxUInt@Value@Json@@2IB DD 0ffffffffH			; Json::Value::maxUInt
	ORG $+44
?maxInt@Value@Json@@2HB DD 07fffffffH			; Json::Value::maxInt
PUBLIC	??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YA$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AEAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >
PUBLIC	??$?0AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &,bool,0>
PUBLIC	??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool,0>
PUBLIC	??$_Buy_if_not_node@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buy_if_not_node<std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::max_size
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::max_size
PUBLIC	??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>
PUBLIC	??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >
PUBLIC	??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QEAU_One_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_One_then_variadic_args_t>
PUBLIC	??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_nohint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
PUBLIC	??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
PUBLIC	??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_node
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode0
PUBLIC	?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Freenode0
PUBLIC	??$forward@AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAAEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AEAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &>
PUBLIC	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
PUBLIC	??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU21@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString> const &,std::_One_then_variadic_args_t,std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
PUBLIC	??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAA@XZ ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAA@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >
PUBLIC	??$_Get_size_of_n@$0CI@@std@@YA_K_K@Z		; std::_Get_size_of_n<40>
PUBLIC	??$forward@AEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z ; std::forward<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><>
PUBLIC	??$forward@AEBU?$less@VCZString@Value@Json@@@std@@@std@@YAAEBU?$less@VCZString@Value@Json@@@0@AEBU10@@Z ; std::forward<std::less<Json::Value::CZString> const &>
PUBLIC	??$destroy@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
PUBLIC	??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AEAV10@@Z ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
PUBLIC	??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,void>
PUBLIC	??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@YA$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@0@AEAV10@@Z ; std::forward<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z	; std::_Get_unwrapped<char const >
PUBLIC	??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	??$forward@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z ; std::forward<std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	??$forward@AEBVValue@Json@@@std@@YAAEBVValue@Json@@AEBV12@@Z ; std::forward<Json::Value const &>
PUBLIC	??$forward@AEAVCZString@Value@Json@@@std@@YAAEAVCZString@Value@Json@@AEAV123@@Z ; std::forward<Json::Value::CZString &>
PUBLIC	??$move@AEATValueHolder@Value@Json@@@std@@YA$$QEATValueHolder@Value@Json@@AEAT123@@Z ; std::move<Json::Value::ValueHolder &>
PUBLIC	??$_Adl_verify_range1@PEBDPEBD@std@@YAXAEBQEBD0U?$integral_constant@_N$0A@@0@@Z ; std::_Adl_verify_range1<char const *,char const *>
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEBAAEBU?$less@VCZString@Value@Json@@@2@XZ ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_first
PUBLIC	?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBAAEBU?$less@VCZString@Value@Json@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getcomp
PUBLIC	?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA?AU?$less@VCZString@Value@Json@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::key_comp
PUBLIC	?_Compare@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA_NAEBVCZString@Value@Json@@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Compare
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::deallocate
PUBLIC	??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z ; std::pair<Json::Value::CZString const ,Json::Value>::`scalar deleting destructor'
PUBLIC	??$construct@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAPEAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
PUBLIC	??$addressof@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAPEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z ; std::addressof<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
PUBLIC	??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn<Json::Value::CZString const ,Json::Value>
PUBLIC	??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString> const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::pair<Json::Value::CZString const ,Json::Value> >
PUBLIC	??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z ; std::addressof<std::pair<Json::Value::CZString const ,Json::Value> >
PUBLIC	??$move@AEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AEAV10@@Z ; std::move<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &>
PUBLIC	??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAA@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > ><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void>
PUBLIC	??$move@AEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AEAV10@@Z ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
PUBLIC	??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@0@AEAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
PUBLIC	??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>
PUBLIC	??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>
PUBLIC	??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::insert<std::pair<Json::Value::CZString const ,Json::Value> &,void>
PUBLIC	??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>
PUBLIC	??$swap@TValueHolder@Value@Json@@X@std@@YAXAEATValueHolder@Value@Json@@0@Z ; std::swap<Json::Value::ValueHolder,void>
PUBLIC	??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ; std::_Adl_verify_range<char const *,char const *>
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocate
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Rrotate
PUBLIC	?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Construct
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Extract
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
PUBLIC	?_Kfn@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Kfn
PUBLIC	??0?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Freeheadnode
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Max
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Min
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAAAEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEBAAEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_second
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAAAEAU?$less@VCZString@Value@Json@@@2@XZ ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAAAEAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEBAAEBV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_second
PUBLIC	?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAXAEAV12@@Z ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Swap_all
PUBLIC	?_Move_from@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_from
PUBLIC	??R?$less@VCZString@Value@Json@@@std@@QEBA_NAEBVCZString@Value@Json@@0@Z ; std::less<Json::Value::CZString>::operator()
PUBLIC	??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tidy
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBVCZString@Value@Json@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Key
PUBLIC	??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAAEAU?$less@VCZString@Value@Json@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getcomp
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAAEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_data
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBAAEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_data
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::select_on_container_copy_construction
PUBLIC	?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEBAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Root
PUBLIC	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEBAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Lmost
PUBLIC	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEBAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Rmost
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
PUBLIC	??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size
PUBLIC	?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_NXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::clear
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator--
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator--
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator!=
PUBLIC	?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::setComment
PUBLIC	?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z ; Json::Value::setComment
PUBLIC	?isString@Value@Json@@QEBA_NXZ			; Json::Value::isString
PUBLIC	?isDouble@Value@Json@@QEBA_NXZ			; Json::Value::isDouble
PUBLIC	?isInt@Value@Json@@QEBA_NXZ			; Json::Value::isInt
PUBLIC	?isBool@Value@Json@@QEBA_NXZ			; Json::Value::isBool
PUBLIC	?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::isMember
PUBLIC	?isMember@Value@Json@@QEBA_NPEBD@Z		; Json::Value::isMember
PUBLIC	?append@Value@Json@@QEAAAEAV12@AEBV12@@Z	; Json::Value::append
PUBLIC	??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
PUBLIC	??AValue@Json@@QEBAAEBV01@PEBD@Z		; Json::Value::operator[]
PUBLIC	?isValidIndex@Value@Json@@QEBA_NI@Z		; Json::Value::isValidIndex
PUBLIC	?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z ; Json::Value::resolveReference
PUBLIC	??AValue@Json@@QEAAAEAV01@PEBD@Z		; Json::Value::operator[]
PUBLIC	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>
PUBLIC	??AValue@Json@@QEAAAEAV01@I@Z			; Json::Value::operator[]
PUBLIC	?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Json::Value::asString
PUBLIC	?swap@Value@Json@@QEAAXAEAV12@@Z		; Json::Value::swap
PUBLIC	??4Value@Json@@QEAAAEAV01@AEBV01@@Z		; Json::Value::operator=
PUBLIC	??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
PUBLIC	??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor'
PUBLIC	??1Value@Json@@QEAA@XZ				; Json::Value::~Value
PUBLIC	??_ECommentInfo@Value@Json@@QEAAPEAXI@Z		; Json::Value::CommentInfo::`vector deleting destructor'
PUBLIC	??0Value@Json@@QEAA@AEBV01@@Z			; Json::Value::Value
PUBLIC	??0Value@Json@@QEAA@_N@Z			; Json::Value::Value
PUBLIC	??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::Value
PUBLIC	??0Value@Json@@QEAA@N@Z				; Json::Value::Value
PUBLIC	??0Value@Json@@QEAA@I@Z				; Json::Value::Value
PUBLIC	??0Value@Json@@QEAA@H@Z				; Json::Value::Value
PUBLIC	??0Value@Json@@QEAA@W4ValueType@1@@Z		; Json::Value::Value
PUBLIC	?c_str@CZString@Value@Json@@QEBAPEBDXZ		; Json::Value::CZString::c_str
PUBLIC	?index@CZString@Value@Json@@QEBAHXZ		; Json::Value::CZString::index
PUBLIC	??8CZString@Value@Json@@QEBA_NAEBV012@@Z	; Json::Value::CZString::operator==
PUBLIC	??MCZString@Value@Json@@QEBA_NAEBV012@@Z	; Json::Value::CZString::operator<
PUBLIC	??1CZString@Value@Json@@QEAA@XZ			; Json::Value::CZString::~CZString
PUBLIC	??0CZString@Value@Json@@QEAA@AEBV012@@Z		; Json::Value::CZString::CZString
PUBLIC	??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z ; Json::Value::CZString::CZString
PUBLIC	??0CZString@Value@Json@@QEAA@H@Z		; Json::Value::CZString::CZString
PUBLIC	?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z	; Json::Value::CommentInfo::setComment
PUBLIC	??1CommentInfo@Value@Json@@QEAA@XZ		; Json::Value::CommentInfo::~CommentInfo
PUBLIC	??0CommentInfo@Value@Json@@QEAA@XZ		; Json::Value::CommentInfo::CommentInfo
PUBLIC	??0DummyValueAllocatorInitializer@Json@@QEAA@XZ	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer
PUBLIC	??0ValueAllocator@Json@@QEAA@XZ			; Json::ValueAllocator::ValueAllocator
PUBLIC	??0DefaultValueAllocator@Json@@QEAA@XZ		; Json::DefaultValueAllocator::DefaultValueAllocator
PUBLIC	??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z	; Json::DefaultValueAllocator::`scalar deleting destructor'
PUBLIC	?releaseStringValue@DefaultValueAllocator@Json@@UEAAXPEAD@Z ; Json::DefaultValueAllocator::releaseStringValue
PUBLIC	?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z ; Json::DefaultValueAllocator::duplicateStringValue
PUBLIC	?releaseMemberName@DefaultValueAllocator@Json@@UEAAXPEAD@Z ; Json::DefaultValueAllocator::releaseMemberName
PUBLIC	?makeMemberName@DefaultValueAllocator@Json@@UEAAPEADPEBD@Z ; Json::DefaultValueAllocator::makeMemberName
PUBLIC	??1DefaultValueAllocator@Json@@UEAA@XZ		; Json::DefaultValueAllocator::~DefaultValueAllocator
PUBLIC	??_GValueAllocator@Json@@UEAAPEAXI@Z		; Json::ValueAllocator::`scalar deleting destructor'
PUBLIC	??1ValueAllocator@Json@@UEAA@XZ			; Json::ValueAllocator::~ValueAllocator
PUBLIC	??0runtime_error@std@@QEAA@AEBV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UEAA@XZ			; std::runtime_error::~runtime_error
PUBLIC	??_Gruntime_error@std@@UEAAPEAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??0runtime_error@std@@QEAA@PEBD@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??0exception@std@@QEAA@QEBD@Z			; std::exception::exception
PUBLIC	?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::getComment
PUBLIC	?hasComment@Value@Json@@QEBA_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
PUBLIC	?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ; Json::Value::getMemberNames
PUBLIC	??AValue@Json@@QEBAAEBV01@I@Z			; Json::Value::operator[]
PUBLIC	??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
PUBLIC	?size@Value@Json@@QEBAIXZ			; Json::Value::size
PUBLIC	?isObject@Value@Json@@QEBA_NXZ			; Json::Value::isObject
PUBLIC	?isArray@Value@Json@@QEBA_NXZ			; Json::Value::isArray
PUBLIC	?asBool@Value@Json@@QEBA_NXZ			; Json::Value::asBool
PUBLIC	?asDouble@Value@Json@@QEBANXZ			; Json::Value::asDouble
PUBLIC	?asUInt@Value@Json@@QEBAIXZ			; Json::Value::asUInt
PUBLIC	?asInt@Value@Json@@QEBAHXZ			; Json::Value::asInt
PUBLIC	?asCString@Value@Json@@QEBAPEBDXZ		; Json::Value::asCString
PUBLIC	?type@Value@Json@@QEBA?AW4ValueType@2@XZ	; Json::Value::type
PUBLIC	?null@Value@Json@@2V12@B			; Json::Value::null
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Eruntime_error@std@@UEAAPEAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_EDefaultValueAllocator@Json@@UEAAPEAXI@Z:PROC ; Json::DefaultValueAllocator::`vector deleting destructor'
EXTRN	??_EValueAllocator@Json@@UEAAPEAXI@Z:PROC	; Json::ValueAllocator::`vector deleting destructor'
?dummyValueAllocatorInitializer@Json@@3UDummyValueAllocatorInitializer@1@A DB 01H DUP (?) ; Json::dummyValueAllocatorInitializer
	ALIGN	4

?null@Value@Json@@2V12@B DB 018H DUP (?)		; Json::Value::null
_BSS	ENDS
;	COMDAT ?$TSS0@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4HA
_BSS	SEGMENT
?$TSS0@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',Json::alueAllocator,Json::AAEAPEAVValueAllocator,void,int, ?? &>
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z DD imagerel $LN7
	DD	imagerel $LN7+38
	DD	imagerel $unwind$??$?0AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z DD imagerel $LN7
	DD	imagerel $LN7+38
	DD	imagerel $unwind$??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z DD imagerel $LN15
	DD	imagerel $LN15+117
	DD	imagerel $unwind$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD imagerel $LN174
	DD	imagerel $LN174+611
	DD	imagerel $unwind$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA DD imagerel ?catch$0@?0???$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA+35
	DD	imagerel $unwind$?catch$0@?0???$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z DD imagerel $LN104
	DD	imagerel $LN104+686
	DD	imagerel $unwind$??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z DD imagerel $LN19
	DD	imagerel $LN19+130
	DD	imagerel $unwind$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD imagerel $LN42
	DD	imagerel $LN42+80
	DD	imagerel $unwind$?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ DD imagerel $LN42
	DD	imagerel $LN42+107
	DD	imagerel $unwind$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD imagerel $LN28
	DD	imagerel $LN28+32
	DD	imagerel $unwind$?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DD imagerel $LN20
	DD	imagerel $LN20+155
	DD	imagerel $unwind$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA DD imagerel ?catch$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA+36
	DD	imagerel $unwind$?catch$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD imagerel $LN526
	DD	imagerel $LN526+1037
	DD	imagerel $unwind$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA DD imagerel ?catch$0@?0???$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA+35
	DD	imagerel $unwind$?catch$0@?0???$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD imagerel $LN36
	DD	imagerel $LN36+162
	DD	imagerel $unwind$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$2@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA DD imagerel ?catch$2@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA
	DD	imagerel ?catch$2@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA+32
	DD	imagerel $unwind$?catch$2@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD imagerel $LN7
	DD	imagerel $LN7+23
	DD	imagerel $unwind$??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z DD imagerel $LN61
	DD	imagerel $LN61+174
	DD	imagerel $unwind$??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD imagerel $LN29
	DD	imagerel $LN29+35
	DD	imagerel $unwind$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD imagerel $LN7
	DD	imagerel $LN7+74
	DD	imagerel $unwind$??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z DD imagerel $LN15
	DD	imagerel $LN15+68
	DD	imagerel $unwind$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAPEAU31@@Z DD imagerel $LN7
	DD	imagerel $LN7+31
	DD	imagerel $unwind$??$construct@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAPEAU31@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z DD imagerel $LN13
	DD	imagerel $LN13+35
	DD	imagerel $unwind$??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z DD imagerel $LN19
	DD	imagerel $LN19+32
	DD	imagerel $unwind$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD imagerel $LN17
	DD	imagerel $LN17+64
	DD	imagerel $unwind$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAA@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+23
	DD	imagerel $unwind$??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAA@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD imagerel $LN103
	DD	imagerel $LN103+208
	DD	imagerel $unwind$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA DD imagerel ?catch$1@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA
	DD	imagerel ?catch$1@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA+32
	DD	imagerel $unwind$?catch$1@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z DD imagerel $LN14
	DD	imagerel $LN14+95
	DD	imagerel $unwind$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+74
	DD	imagerel $unwind$??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z DD imagerel $LN19
	DD	imagerel $LN19+120
	DD	imagerel $unwind$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z DD imagerel $LN4
	DD	imagerel $LN4+26
	DD	imagerel $unwind$?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ DD imagerel $LN36
	DD	imagerel $LN36+92
	DD	imagerel $unwind$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ DD imagerel $LN11
	DD	imagerel $LN11+23
	DD	imagerel $unwind$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z DD imagerel $LN132
	DD	imagerel $LN132+15
	DD	imagerel $unwind$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z DD imagerel $LN132+15
	DD	imagerel $LN132+890
	DD	imagerel $chain$1$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z DD imagerel $LN132+890
	DD	imagerel $LN132+909
	DD	imagerel $chain$2$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+29
	DD	imagerel $unwind$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z DD imagerel $LN77
	DD	imagerel $LN77+219
	DD	imagerel $unwind$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+49
	DD	imagerel $unwind$??0?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD imagerel $LN28
	DD	imagerel $LN28+32
	DD	imagerel $unwind$?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+29
	DD	imagerel $unwind$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAXAEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+53
	DD	imagerel $unwind$?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Move_from@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z DD imagerel $LN7
	DD	imagerel $LN7+177
	DD	imagerel $unwind$?_Move_from@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z DD imagerel $LN26
	DD	imagerel $LN26+49
	DD	imagerel $unwind$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z DD imagerel $LN128
	DD	imagerel $LN128+296
	DD	imagerel $unwind$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD imagerel $LN49
	DD	imagerel $LN49+144
	DD	imagerel $unwind$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ DD imagerel $LN39
	DD	imagerel $LN39+95
	DD	imagerel $unwind$?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ DD imagerel $LN36
	DD	imagerel $LN36+32
	DD	imagerel $unwind$??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD imagerel $LN8
	DD	imagerel $LN8+29
	DD	imagerel $unwind$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN21
	DD	imagerel $LN21+220
	DD	imagerel $unwind$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ DD imagerel $LN29
	DD	imagerel $LN29+49
	DD	imagerel $unwind$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z DD imagerel $LN14
	DD	imagerel $LN14+23
	DD	imagerel $unwind$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ DD imagerel $LN74
	DD	imagerel $LN74+122
	DD	imagerel $unwind$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ DD imagerel $LN21
	DD	imagerel $LN21+38
	DD	imagerel $unwind$?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ DD imagerel $LN19
	DD	imagerel $LN19+35
	DD	imagerel $unwind$?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ DD imagerel $LN19
	DD	imagerel $LN19+75
	DD	imagerel $unwind$?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z DD imagerel $LN111
	DD	imagerel $LN111+272
	DD	imagerel $unwind$?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z DD imagerel $LN54
	DD	imagerel $LN54+137
	DD	imagerel $unwind$?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DD imagerel $LN11
	DD	imagerel $LN11+161
	DD	imagerel $unwind$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA DD imagerel ?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA
	DD	imagerel ?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA+29
	DD	imagerel $unwind$?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z DD imagerel $LN9
	DD	imagerel $LN9+153
	DD	imagerel $unwind$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA DD imagerel ?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA
	DD	imagerel ?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA+29
	DD	imagerel $unwind$?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN6
	DD	imagerel $LN6+47
	DD	imagerel $unwind$?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isMember@Value@Json@@QEBA_NPEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+27
	DD	imagerel $unwind$?isMember@Value@Json@@QEBA_NPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@Value@Json@@QEAAAEAV12@AEBV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+52
	DD	imagerel $unwind$?append@Value@Json@@QEAAAEAV12@AEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN6
	DD	imagerel $LN6+33
	DD	imagerel $unwind$??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??AValue@Json@@QEBAAEBV01@PEBD@Z DD imagerel $LN41
	DD	imagerel $LN41+131
	DD	imagerel $unwind$??AValue@Json@@QEBAAEBV01@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isValidIndex@Value@Json@@QEBA_NI@Z DD imagerel $LN4
	DD	imagerel $LN4+24
	DD	imagerel $unwind$?isValidIndex@Value@Json@@QEBA_NI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z DD imagerel $LN181
	DD	imagerel $LN181+522
	DD	imagerel $unwind$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA DD imagerel ?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA
	DD	imagerel ?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA+32
	DD	imagerel $unwind$?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ DD imagerel $LN11
	DD	imagerel $LN11+65
	DD	imagerel $unwind$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??AValue@Json@@QEAAAEAV01@I@Z DD imagerel $LN179
	DD	imagerel $LN179+469
	DD	imagerel $unwind$??AValue@Json@@QEAAAEAV01@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA DD imagerel ?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA
	DD	imagerel ?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA+32
	DD	imagerel $unwind$?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD imagerel $LN20
	DD	imagerel $LN20+204
	DD	imagerel $unwind$?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4Value@Json@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN16
	DD	imagerel $LN16+113
	DD	imagerel $unwind$??4Value@Json@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ DD imagerel $LN77
	DD	imagerel $LN77+122
	DD	imagerel $unwind$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z DD imagerel $LN81
	DD	imagerel $LN81+139
	DD	imagerel $unwind$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Value@Json@@QEAA@XZ DD imagerel $LN106
	DD	imagerel $LN106+244
	DD	imagerel $unwind$??1Value@Json@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z DD imagerel $LN12
	DD	imagerel $LN12+69
	DD	imagerel $unwind$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Value@Json@@QEAA@AEBV01@@Z DD imagerel $LN41
	DD	imagerel $LN41+336
	DD	imagerel $unwind$??0Value@Json@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA+29
	DD	imagerel $unwind$?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA+29
	DD	imagerel $unwind$?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN4
	DD	imagerel $LN4+126
	DD	imagerel $unwind$??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Value@Json@@QEAA@W4ValueType@1@@Z DD imagerel $LN44
	DD	imagerel $LN44+236
	DD	imagerel $unwind$??0Value@Json@@QEAA@W4ValueType@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA DD imagerel ?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA
	DD	imagerel ?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA+29
	DD	imagerel $unwind$?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1CZString@Value@Json@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+55
	DD	imagerel $unwind$??1CZString@Value@Json@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CZString@Value@Json@@QEAA@AEBV012@@Z DD imagerel $LN11
	DD	imagerel $LN11+103
	DD	imagerel $unwind$??0CZString@Value@Json@@QEAA@AEBV012@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z DD imagerel $LN6
	DD	imagerel $LN6+75
	DD	imagerel $unwind$??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z DD imagerel $LN8
	DD	imagerel $LN8+122
	DD	imagerel $unwind$?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1CommentInfo@Value@Json@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+49
	DD	imagerel $unwind$??1CommentInfo@Value@Json@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0DummyValueAllocatorInitializer@Json@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+21
	DD	imagerel $unwind$??0DummyValueAllocatorInitializer@Json@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ DD imagerel ?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ
	DD	imagerel ?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ+103
	DD	imagerel $unwind$?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z DD imagerel $LN12
	DD	imagerel $LN12+43
	DD	imagerel $unwind$??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z DD imagerel $LN6
	DD	imagerel $LN6+94
	DD	imagerel $unwind$?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GValueAllocator@Json@@UEAAPEAXI@Z DD imagerel $LN9
	DD	imagerel $LN9+43
	DD	imagerel $unwind$??_GValueAllocator@Json@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0runtime_error@std@@QEAA@AEBV01@@Z DD imagerel $LN7
	DD	imagerel $LN7+63
	DD	imagerel $unwind$??0runtime_error@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gruntime_error@std@@UEAAPEAXI@Z DD imagerel $LN12
	DD	imagerel $LN12+66
	DD	imagerel $unwind$??_Gruntime_error@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0runtime_error@std@@QEAA@PEBD@Z DD imagerel $LN7
	DD	imagerel $LN7+74
	DD	imagerel $unwind$??0runtime_error@std@@QEAA@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN9
	DD	imagerel $LN9+66
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+53
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+64
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DD imagerel $LN15
	DD	imagerel $LN15+54
	DD	imagerel $unwind$?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DD imagerel $LN115
	DD	imagerel $LN115+569
	DD	imagerel $unwind$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??AValue@Json@@QEBAAEBV01@I@Z DD imagerel $LN38
	DD	imagerel $LN38+131
	DD	imagerel $unwind$??AValue@Json@@QEBAAEBV01@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN4
	DD	imagerel $LN4+33
	DD	imagerel $unwind$??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@Value@Json@@QEBAIXZ DD imagerel $LN75
	DD	imagerel $LN75+190
	DD	imagerel $unwind$?size@Value@Json@@QEBAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?asDouble@Value@Json@@QEBANXZ DD imagerel $LN18
	DD	imagerel $LN18+164
	DD	imagerel $unwind$?asDouble@Value@Json@@QEBANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?asUInt@Value@Json@@QEBAIXZ DD imagerel $LN20
	DD	imagerel $LN20+244
	DD	imagerel $unwind$?asUInt@Value@Json@@QEBAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?asInt@Value@Json@@QEBAHXZ DD imagerel $LN20
	DD	imagerel $LN20+248
	DD	imagerel $unwind$?asInt@Value@Json@@QEBAHXZ
pdata	ENDS
CRT$XCU	SEGMENT
??null$initializer$@Value@Json@@2P6AXXZEA@@3P6AXXZEA DQ FLAT:??__E?null@Value@Json@@2V12@B@@YAXXZ ; ??null$initializer$@Value@Json@@2P6AXXZEA@@3P6AXXZEA
;	COMDAT xdata
xdata	SEGMENT
$unwind$?asInt@Value@Json@@QEBAHXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?asUInt@Value@Json@@QEBAIXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?asDouble@Value@Json@@QEBANXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@Value@Json@@QEBAIXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??AValue@Json@@QEBAAEBV01@I@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??AValue@Json@@QEBAAEBV01@I@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??AValue@Json@@QEBAAEBV01@I@Z
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??AValue@Json@@QEBAAEBV01@I@Z DD 041411H
	DD	0b3414H
	DD	070027206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??AValue@Json@@QEBAAEBV01@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DD imagerel ?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ+132
	DD	00H
	DD	imagerel ?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ+223
	DD	01H
	DD	imagerel ?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ+237
	DD	00H
	DD	imagerel ?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ+357
	DD	02H
	DD	imagerel ?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ+537
	DD	0ffffffffH
	DD	imagerel ?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ+563
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DD 0ffffffffH
	DD	imagerel ?dtor$1@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA
	DD	00H
	DD	imagerel ?dtor$2@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA
	DD	00H
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
	DD	00H
	DD	00H
	DD	06H
	DD	imagerel $ip2state$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
	DD	048H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DD 062a19H
	DD	015641bH
	DD	0143417H
	DD	07004f20bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
	DD	072H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBD@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0runtime_error@std@@QEAA@PEBD@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gruntime_error@std@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0runtime_error@std@@QEAA@AEBV01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GValueAllocator@Json@@UEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0DummyValueAllocatorInitializer@Json@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1CommentInfo@Value@Json@@QEAA@XZ DD imagerel ??1CommentInfo@Value@Json@@QEAA@XZ+39
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1CommentInfo@Value@Json@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1CommentInfo@Value@Json@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1CommentInfo@Value@Json@@QEAA@XZ DD 020f19H
	DD	030025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1CommentInfo@Value@Json@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CZString@Value@Json@@QEAA@AEBV012@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1CZString@Value@Json@@QEAA@XZ DD imagerel ??1CZString@Value@Json@@QEAA@XZ+45
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1CZString@Value@Json@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1CZString@Value@Json@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1CZString@Value@Json@@QEAA@XZ DD 020f19H
	DD	030025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1CZString@Value@Json@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Value@Json@@QEAA@W4ValueType@1@@Z DD imagerel ??0Value@Json@@QEAA@W4ValueType@1@@Z+125
	DD	0ffffffffH
	DD	imagerel ??0Value@Json@@QEAA@W4ValueType@1@@Z+155
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Value@Json@@QEAA@W4ValueType@1@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Value@Json@@QEAA@W4ValueType@1@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Value@Json@@QEAA@W4ValueType@1@@Z
	DD	00H
	DD	00H
	DD	02H
	DD	imagerel $ip2state$??0Value@Json@@QEAA@W4ValueType@1@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Value@Json@@QEAA@W4ValueType@1@@Z DD 061911H
	DD	0b6419H
	DD	0a3414H
	DD	070025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Value@Json@@QEAA@W4ValueType@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Value@Json@@QEAA@AEBV01@@Z DD imagerel ??0Value@Json@@QEAA@AEBV01@@Z+105
	DD	0ffffffffH
	DD	imagerel ??0Value@Json@@QEAA@AEBV01@@Z+143
	DD	00H
	DD	imagerel ??0Value@Json@@QEAA@AEBV01@@Z+155
	DD	0ffffffffH
	DD	imagerel ??0Value@Json@@QEAA@AEBV01@@Z+180
	DD	01H
	DD	imagerel ??0Value@Json@@QEAA@AEBV01@@Z+235
	DD	0ffffffffH
	DD	imagerel ??0Value@Json@@QEAA@AEBV01@@Z+304
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Value@Json@@QEAA@AEBV01@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Value@Json@@QEAA@AEBV01@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0Value@Json@@QEAA@AEBV01@@Z
	DD	00H
	DD	00H
	DD	06H
	DD	imagerel $ip2state$??0Value@Json@@QEAA@AEBV01@@Z
	DD	030H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Value@Json@@QEAA@AEBV01@@Z DD 081c11H
	DD	0e541cH
	DD	0d3417H
	DD	0e0057209H
	DD	060027003H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Value@Json@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z DD imagerel ??_ECommentInfo@Value@Json@@QEAAPEAXI@Z+34
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z DD 0ffffffffH
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z DD 020f19H
	DD	030025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1Value@Json@@QEAA@XZ DD imagerel ??1Value@Json@@QEAA@XZ+132
	DD	00H
	DD	imagerel ??1Value@Json@@QEAA@XZ+178
	DD	0ffffffffH
	DD	imagerel ??1Value@Json@@QEAA@XZ+210
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1Value@Json@@QEAA@XZ DD 0ffffffffH
	DD	imagerel __imp___std_terminate
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1Value@Json@@QEAA@XZ DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??1Value@Json@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??1Value@Json@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Value@Json@@QEAA@XZ DD 041119H
	DD	070045208H
	DD	030026003H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1Value@Json@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z DD imagerel ??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z+105
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z DD 0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z DD 041419H
	DD	093414H
	DD	070025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ DD imagerel ??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ+105
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ DD 0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ DD 041419H
	DD	0b3414H
	DD	070025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4Value@Json@@QEAAAEAV01@AEBV01@@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??AValue@Json@@QEAAAEAV01@I@Z DD imagerel ??AValue@Json@@QEAAAEAV01@I@Z+61
	DD	0ffffffffH
	DD	imagerel ??AValue@Json@@QEAAAEAV01@I@Z+89
	DD	00H
	DD	imagerel ??AValue@Json@@QEAAAEAV01@I@Z+108
	DD	01H
	DD	imagerel ??AValue@Json@@QEAAAEAV01@I@Z+348
	DD	04H
	DD	imagerel ??AValue@Json@@QEAAAEAV01@I@Z+368
	DD	05H
	DD	imagerel ??AValue@Json@@QEAAAEAV01@I@Z+409
	DD	02H
	DD	imagerel ??AValue@Json@@QEAAAEAV01@I@Z+447
	DD	06H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??AValue@Json@@QEAAAEAV01@I@Z DD 0ffffffffH
	DD	imagerel ?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$0@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA
	DD	0ffffffffH
	DD	00H
	DD	02H
	DD	imagerel ?dtor$7@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA
	DD	02H
	DD	imagerel ?dtor$2@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA
	DD	02H
	DD	imagerel __imp___std_terminate
	DD	0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??AValue@Json@@QEAAAEAV01@I@Z DD 019930522H
	DD	08H
	DD	imagerel $stateUnwindMap$??AValue@Json@@QEAAAEAV01@I@Z
	DD	00H
	DD	00H
	DD	07H
	DD	imagerel $ip2state$??AValue@Json@@QEAAAEAV01@I@Z
	DD	030H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??AValue@Json@@QEAAAEAV01@I@Z DD 061911H
	DD	0e007f211H
	DD	060047005H
	DD	050023003H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??AValue@Json@@QEAAAEAV01@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ DD imagerel ??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ+55
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ DD 0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ DD 020f19H
	DD	030025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z DD imagerel ?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z+64
	DD	0ffffffffH
	DD	imagerel ?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z+92
	DD	00H
	DD	imagerel ?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z+111
	DD	01H
	DD	imagerel ?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z+369
	DD	02H
	DD	imagerel ?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z+401
	DD	04H
	DD	imagerel ?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z+421
	DD	05H
	DD	imagerel ?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z+462
	DD	02H
	DD	imagerel ?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z+500
	DD	06H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z DD 0ffffffffH
	DD	imagerel ?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$0@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA
	DD	0ffffffffH
	DD	00H
	DD	02H
	DD	imagerel ?dtor$7@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA
	DD	02H
	DD	imagerel ?dtor$2@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA
	DD	02H
	DD	imagerel __imp___std_terminate
	DD	0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z DD 019930522H
	DD	08H
	DD	imagerel $stateUnwindMap$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z
	DD	00H
	DD	00H
	DD	08H
	DD	imagerel $ip2state$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z
	DD	030H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z DD 061d11H
	DD	0e00bf215H
	DD	060087009H
	DD	050063007H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isValidIndex@Value@Json@@QEBA_NI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??AValue@Json@@QEBAAEBV01@PEBD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??AValue@Json@@QEBAAEBV01@PEBD@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??AValue@Json@@QEBAAEBV01@PEBD@Z
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??AValue@Json@@QEBAAEBV01@PEBD@Z DD 041411H
	DD	0b3414H
	DD	070027206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??AValue@Json@@QEBAAEBV01@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@Value@Json@@QEAAAEAV12@AEBV12@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isMember@Value@Json@@QEBA_NPEBD@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z DD imagerel ?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z+51
	DD	0ffffffffH
	DD	imagerel ?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z+108
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z
	DD	00H
	DD	00H
	DD	02H
	DD	imagerel $ip2state$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z
	DD	030H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z DD 081e11H
	DD	0d641eH
	DD	0c5419H
	DD	0b3414H
	DD	070027206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DD imagerel ?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z+59
	DD	0ffffffffH
	DD	imagerel ?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z+116
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
	DD	00H
	DD	00H
	DD	02H
	DD	imagerel $ip2state$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
	DD	030H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DD 081e11H
	DD	0d641eH
	DD	0c5419H
	DD	0b3414H
	DD	070027206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z DD 060d01H
	DD	0a340dH
	DD	0e009320dH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ DD imagerel ?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ+30
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ DD 041419H
	DD	083414H
	DD	070025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ DD imagerel ??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ+105
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ DD 0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ DD 041419H
	DD	0b3414H
	DD	070025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ DD 020a01H
	DD	03006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z DD imagerel ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z+43
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z DD 061919H
	DD	096419H
	DD	083414H
	DD	070025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ DD imagerel ??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ+21
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ DD 0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ DD 010d19H
	DD	06204H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ DD 040a01H
	DD	09340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD imagerel ?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z+55
	DD	0ffffffffH
	DD	imagerel ?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z+101
	DD	00H
	DD	imagerel ?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z+119
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD 0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD 061911H
	DD	096419H
	DD	083414H
	DD	070025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z DD imagerel ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z+111
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z DD 0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z DD 081e11H
	DD	0b741eH
	DD	0a6419H
	DD	093414H
	DD	0e0025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z DD 020a01H
	DD	03006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Move_from@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAXAEAV12@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD imagerel ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z+21
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD 0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD 010d11H
	DD	06204H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z DD 020a01H
	DD	03006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z DD imagerel ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z+163
	DD	00H
	DD	imagerel ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z+181
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
	DD	00H
	DD	00H
	DD	02H
	DD	imagerel $ip2state$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z DD 081e11H
	DD	0a641eH
	DD	095419H
	DD	083414H
	DD	070025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z DD 021H
	DD	imagerel $LN132
	DD	imagerel $LN132+15
	DD	imagerel $unwind$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z DD 045b21H
	DD	06345bH
	DD	077405H
	DD	imagerel $LN132
	DD	imagerel $LN132+15
	DD	imagerel $unwind$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z DD 040b01H
	DD	08640bH
	DD	0e007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z DD imagerel ??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z+56
	DD	0ffffffffH
	DD	imagerel ??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z+100
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z
	DD	00H
	DD	00H
	DD	02H
	DD	imagerel $ip2state$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z DD 041811H
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z DD imagerel ??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z+41
	DD	0ffffffffH
	DD	imagerel ??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z+50
	DD	00H
	DD	imagerel ??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z+76
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z DD 061d11H
	DD	0a641dH
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD imagerel ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z+44
	DD	0ffffffffH
	DD	imagerel ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z+74
	DD	01H
	DD	imagerel ?catch$1@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA+26
	DD	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$1@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	imagerel $handlerMap$0$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA
	DD	00H
	DD	00H
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
	DD	01H
	DD	imagerel $tryMap$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
	DD	03H
	DD	imagerel $ip2state$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD 061d19H
	DD	0a641dH
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAA@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD imagerel ??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z+54
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 020f11H
	DD	030025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z DD imagerel ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z+21
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z DD 010d19H
	DD	06204H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAPEAU31@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z DD imagerel ??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z+55
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z DD 0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z DD 020f19H
	DD	030025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$2@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD imagerel ??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z+28
	DD	0ffffffffH
	DD	imagerel ??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z+95
	DD	00H
	DD	imagerel ??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z+137
	DD	01H
	DD	imagerel ?catch$2@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA+26
	DD	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$2@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	imagerel $handlerMap$0$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	imagerel ?dtor$0@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA
	DD	0ffffffffH
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	01H
	DD	imagerel $tryMap$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	04H
	DD	imagerel $ip2state$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 061919H
	DD	0b6419H
	DD	0a3414H
	DD	070025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA DD 020a19H
	DD	05006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD imagerel ??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z+70
	DD	00H
	DD	imagerel ??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z+971
	DD	0ffffffffH
	DD	imagerel ??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z+1009
	DD	00H
	DD	imagerel ?catch$0@?0???$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA+29
	DD	01H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0???$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
	DD	01H
	DD	imagerel $tryMap$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
	DD	04H
	DD	imagerel $ip2state$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
	DD	030H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD 0a2119H
	DD	0117421H
	DD	010641dH
	DD	0f3419H
	DD	0f009920dH
	DD	0c005e007H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DD imagerel ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z+57
	DD	0ffffffffH
	DD	imagerel ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z+103
	DD	00H
	DD	imagerel ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z+134
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA+21
	DD	01H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
	DD	01H
	DD	imagerel $tryMap$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
	DD	04H
	DD	imagerel $ip2state$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DD 081f19H
	DD	0e341fH
	DD	0f00d5211H
	DD	0c009e00bH
	DD	060067007H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD imagerel ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z+21
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD 0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD 010d11H
	DD	06204H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD imagerel ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z+56
	DD	00H
	DD	imagerel ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z+74
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD 0ffffffffH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
	DD	00H
	DD	00H
	DD	02H
	DD	imagerel $ip2state$?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z DD 020f11H
	DD	030025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z DD imagerel ??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z+71
	DD	0ffffffffH
	DD	imagerel ??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z+113
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z
	DD	00H
	DD	00H
	DD	02H
	DD	imagerel $ip2state$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z DD 041811H
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z DD 043f01H
	DD	06343fH
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA DD 020a19H
	DD	05006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD imagerel ??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z+242
	DD	00H
	DD	imagerel ?catch$0@?0???$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA+29
	DD	01H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0???$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
	DD	01H
	DD	imagerel $tryMap$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
	DD	02H
	DD	imagerel $ip2state$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
	DD	038H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD 081f19H
	DD	0f341fH
	DD	0f00d7211H
	DD	0c009e00bH
	DD	060067007H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z DD imagerel ??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z+56
	DD	0ffffffffH
	DD	imagerel ??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z+97
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z
	DD	00H
	DD	00H
	DD	02H
	DD	imagerel $ip2state$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z DD 041811H
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z DD 020601H
	DD	030023206H
CRT$XCU	SEGMENT
?dummyValueAllocatorInitializer$initializer$@Json@@3P6AXXZEA DQ FLAT:??__EdummyValueAllocatorInitializer@Json@@YAXXZ ; Json::dummyValueAllocatorInitializer$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?type@Value@Json@@QEBA?AW4ValueType@2@XZ
_TEXT	SEGMENT
this$ = 8
?type@Value@Json@@QEBA?AW4ValueType@2@XZ PROC		; Json::Value::type, COMDAT

; 530  :    allocated_ = other.allocated_;

	movsx	eax, BYTE PTR [rcx+8]

; 531  :    other.allocated_ = temp2;

	ret	0
?type@Value@Json@@QEBA?AW4ValueType@2@XZ ENDP		; Json::Value::type
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asCString@Value@Json@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?asCString@Value@Json@@QEBAPEBDXZ PROC			; Json::Value::asCString, COMDAT

; 679  : {
; 680  :    return !( *this == other );

	mov	rax, QWORD PTR [rcx]

; 681  : }

	ret	0
?asCString@Value@Json@@QEBAPEBDXZ ENDP			; Json::Value::asCString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asInt@Value@Json@@QEBAHXZ
_TEXT	SEGMENT
$T3 = 32
$T2 = 32
$T1 = 32
this$ = 80
?asInt@Value@Json@@QEBAHXZ PROC				; Json::Value::asInt, COMDAT

; 717  : {

$LN20:
	sub	rsp, 72					; 00000048H

; 718  :    return CppTL::ConstString( asString().c_str() );

	movsx	rax, BYTE PTR [rcx+8]
	cmp	eax, 7
	ja	SHORT $LN13@asInt
	lea	r8, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN16@asInt[r8+rax*4]
	add	rdx, r8
	jmp	rdx
$LN5@asInt:

; 719  : }
; 720  : # endif
; 721  : 
; 722  : Value::Int 
; 723  : Value::asInt() const

	mov	eax, DWORD PTR [rcx]

; 740  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN6@asInt:

; 724  : {
; 725  :    switch ( type_ )

	mov	eax, DWORD PTR [rcx]
	cmp	eax, 2147483647				; 7fffffffH
	jae	SHORT $LN19@asInt
	jmp	SHORT $LN1@asInt
$LN8@asInt:

; 726  :    {
; 727  :    case nullValue:
; 728  :       return 0;

	movsd	xmm1, QWORD PTR [rcx]
	comisd	xmm1, QWORD PTR __real@c1e0000000000000
	jb	SHORT $LN10@asInt
	movsd	xmm0, QWORD PTR __real@41dfffffffc00000
	comisd	xmm0, xmm1
	jb	SHORT $LN10@asInt

; 729  :    case intValue:

	cvttsd2si eax, xmm1

; 740  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN11@asInt:

; 730  :       return value_.int_;
; 731  :    case uintValue:

	xor	eax, eax
	cmp	BYTE PTR [rcx], al
	setne	al

; 740  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN13@asInt:

; 736  :       return Int( value_.real_ );
; 737  :    case booleanValue:
; 738  :       return value_.bool_ ? 1 : 0;
; 739  :    case stringValue:

	xor	eax, eax
$LN1@asInt:

; 740  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN19@asInt:

; 724  : {
; 725  :    switch ( type_ )

	lea	rdx, OFFSET FLAT:??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5r@
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
	int	3
$LN10@asInt:

; 726  :    {
; 727  :    case nullValue:
; 728  :       return 0;

	lea	rdx, OFFSET FLAT:??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5rang@
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T2[rsp]
	call	_CxxThrowException
	int	3
$LN12@asInt:

; 732  :       JSON_ASSERT_MESSAGE( value_.uint_ < (unsigned)maxInt, "integer out of signed integer range" );
; 733  :       return value_.uint_;
; 734  :    case realValue:
; 735  :       JSON_ASSERT_MESSAGE( value_.real_ >= minInt  &&  value_.real_ <= maxInt, "Real out of signed integer range" );

	lea	rdx, OFFSET FLAT:??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int@
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T3[rsp]
	call	_CxxThrowException
	int	3
$LN17@asInt:
	npad	3
$LN16@asInt:

; 740  :    case arrayValue:

	DD	$LN13@asInt
	DD	$LN5@asInt
	DD	$LN6@asInt
	DD	$LN8@asInt
	DD	$LN12@asInt
	DD	$LN11@asInt
	DD	$LN12@asInt
	DD	$LN12@asInt
?asInt@Value@Json@@QEBAHXZ ENDP				; Json::Value::asInt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asUInt@Value@Json@@QEBAIXZ
_TEXT	SEGMENT
$T3 = 32
$T2 = 32
$T1 = 32
this$ = 80
?asUInt@Value@Json@@QEBAIXZ PROC			; Json::Value::asUInt, COMDAT

; 744  :       JSON_ASSERT_UNREACHABLE;

$LN20:
	sub	rsp, 72					; 00000048H

; 745  :    }

	movsx	rax, BYTE PTR [rcx+8]
	cmp	eax, 7
	ja	SHORT $LN13@asUInt
	lea	r8, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN16@asUInt[r8+rax*4]
	add	rdx, r8
	jmp	rdx
$LN5@asUInt:

; 746  :    return 0; // unreachable;
; 747  : }
; 748  : 
; 749  : Value::UInt 
; 750  : Value::asUInt() const

	mov	eax, DWORD PTR [rcx]
	test	eax, eax
	js	SHORT $LN19@asUInt
	jmp	SHORT $LN1@asUInt
$LN7@asUInt:

; 751  : {
; 752  :    switch ( type_ )
; 753  :    {

	mov	eax, DWORD PTR [rcx]

; 767  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN8@asUInt:

; 754  :    case nullValue:
; 755  :       return 0;

	movsd	xmm1, QWORD PTR [rcx]
	xorps	xmm0, xmm0
	comisd	xmm1, xmm0
	jb	SHORT $LN10@asUInt
	movsd	xmm0, QWORD PTR __real@41efffffffe00000
	comisd	xmm0, xmm1
	jb	SHORT $LN10@asUInt

; 756  :    case intValue:

	cvttsd2si rax, xmm1

; 767  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN11@asUInt:

; 757  :       JSON_ASSERT_MESSAGE( value_.int_ >= 0, "Negative integer can not be converted to unsigned integer" );
; 758  :       return value_.int_;

	xor	eax, eax
	cmp	BYTE PTR [rcx], al
	setne	al

; 767  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN13@asUInt:

; 763  :       return UInt( value_.real_ );
; 764  :    case booleanValue:
; 765  :       return value_.bool_ ? 1 : 0;
; 766  :    case stringValue:

	xor	eax, eax
$LN1@asUInt:

; 767  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN19@asUInt:

; 746  :    return 0; // unreachable;
; 747  : }
; 748  : 
; 749  : Value::UInt 
; 750  : Value::asUInt() const

	lea	rdx, OFFSET FLAT:??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5con@
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
	int	3
$LN10@asUInt:

; 754  :    case nullValue:
; 755  :       return 0;

	lea	rdx, OFFSET FLAT:??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ra@
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T2[rsp]
	call	_CxxThrowException
	int	3
$LN12@asUInt:

; 759  :    case uintValue:
; 760  :       return value_.uint_;
; 761  :    case realValue:
; 762  :       JSON_ASSERT_MESSAGE( value_.real_ >= 0  &&  value_.real_ <= maxUInt,  "Real out of unsigned integer range" );

	lea	rdx, OFFSET FLAT:??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint@
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T3[rsp]
	call	_CxxThrowException
	int	3
$LN17@asUInt:
	npad	2
$LN16@asUInt:

; 767  :    case arrayValue:

	DD	$LN13@asUInt
	DD	$LN5@asUInt
	DD	$LN7@asUInt
	DD	$LN8@asUInt
	DD	$LN12@asUInt
	DD	$LN11@asUInt
	DD	$LN12@asUInt
	DD	$LN12@asUInt
?asUInt@Value@Json@@QEBAIXZ ENDP			; Json::Value::asUInt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asDouble@Value@Json@@QEBANXZ
_TEXT	SEGMENT
$T1 = 32
this$ = 80
?asDouble@Value@Json@@QEBANXZ PROC			; Json::Value::asDouble, COMDAT

; 771  :       JSON_ASSERT_UNREACHABLE;

$LN18:
	sub	rsp, 72					; 00000048H

; 772  :    }

	movsx	rax, BYTE PTR [rcx+8]
	cmp	eax, 7
	ja	SHORT $LN10@asDouble
	lea	r8, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN15@asDouble[r8+rax*4]
	add	rdx, r8
	jmp	rdx
$LN5@asDouble:
	movd	xmm0, DWORD PTR [rcx]

; 773  :    return 0; // unreachable;
; 774  : }
; 775  : 
; 776  : double 
; 777  : Value::asDouble() const

	cvtdq2pd xmm0, xmm0

; 788  :       return value_.real_;
; 789  :    case booleanValue:
; 790  :       return value_.bool_ ? 1.0 : 0.0;
; 791  :    case stringValue:
; 792  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN6@asDouble:

; 778  : {
; 779  :    switch ( type_ )

	mov	eax, DWORD PTR [rcx]
	xorps	xmm0, xmm0
	cvtsi2sd xmm0, rax

; 788  :       return value_.real_;
; 789  :    case booleanValue:
; 790  :       return value_.bool_ ? 1.0 : 0.0;
; 791  :    case stringValue:
; 792  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN7@asDouble:

; 780  :    {
; 781  :    case nullValue:

	movsd	xmm0, QWORD PTR [rcx]

; 788  :       return value_.real_;
; 789  :    case booleanValue:
; 790  :       return value_.bool_ ? 1.0 : 0.0;
; 791  :    case stringValue:
; 792  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN8@asDouble:

; 782  :       return 0.0;
; 783  :    case intValue:

	cmp	BYTE PTR [rcx], 0
	je	SHORT $LN10@asDouble
	movsd	xmm0, QWORD PTR __real@3ff0000000000000

; 788  :       return value_.real_;
; 789  :    case booleanValue:
; 790  :       return value_.bool_ ? 1.0 : 0.0;
; 791  :    case stringValue:
; 792  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN10@asDouble:
	xorps	xmm0, xmm0
	add	rsp, 72					; 00000048H
	ret	0
$LN9@asDouble:

; 784  :       return value_.int_;
; 785  :    case uintValue:
; 786  :       return value_.uint_;
; 787  :    case realValue:

	lea	rdx, OFFSET FLAT:??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doub@
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
	int	3
$LN16@asDouble:
$LN15@asDouble:

; 788  :       return value_.real_;
; 789  :    case booleanValue:
; 790  :       return value_.bool_ ? 1.0 : 0.0;
; 791  :    case stringValue:
; 792  :    case arrayValue:

	DD	$LN10@asDouble
	DD	$LN5@asDouble
	DD	$LN6@asDouble
	DD	$LN7@asDouble
	DD	$LN9@asDouble
	DD	$LN8@asDouble
	DD	$LN9@asDouble
	DD	$LN9@asDouble
?asDouble@Value@Json@@QEBANXZ ENDP			; Json::Value::asDouble
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asBool@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?asBool@Value@Json@@QEBA_NXZ PROC			; Json::Value::asBool, COMDAT

; 797  :    }

	movsx	rax, BYTE PTR [rcx+8]
	cmp	eax, 7
	ja	SHORT $LN10@asBool
	lea	r8, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN25@asBool[r8+rax*4]
	add	rdx, r8
	jmp	rdx
$LN5@asBool:

; 798  :    return 0; // unreachable;
; 799  : }
; 800  : 
; 801  : bool 
; 802  : Value::asBool() const
; 803  : {

	cmp	DWORD PTR [rcx], 0
	setne	al

; 813  :    case booleanValue:
; 814  :       return value_.bool_;
; 815  :    case stringValue:
; 816  :       return value_.string_  &&  value_.string_[0] != 0;
; 817  :    case arrayValue:

	ret	0
$LN6@asBool:

; 804  :    switch ( type_ )
; 805  :    {

	movsd	xmm1, QWORD PTR [rcx]
	xorps	xmm0, xmm0
	ucomisd	xmm1, xmm0
	jp	SHORT $LN24@asBool
	jne	SHORT $LN24@asBool
$LN10@asBool:

; 813  :    case booleanValue:
; 814  :       return value_.bool_;
; 815  :    case stringValue:
; 816  :       return value_.string_  &&  value_.string_[0] != 0;
; 817  :    case arrayValue:

	xor	al, al
	ret	0
$LN7@asBool:

; 806  :    case nullValue:
; 807  :       return false;

	movzx	eax, BYTE PTR [rcx]

; 813  :    case booleanValue:
; 814  :       return value_.bool_;
; 815  :    case stringValue:
; 816  :       return value_.string_  &&  value_.string_[0] != 0;
; 817  :    case arrayValue:

	ret	0
$LN8@asBool:

; 808  :    case intValue:
; 809  :    case uintValue:

	mov	rax, QWORD PTR [rcx]
	test	rax, rax
	je	SHORT $LN10@asBool
	cmp	BYTE PTR [rax], 0
	je	SHORT $LN10@asBool
$LN24@asBool:

; 813  :    case booleanValue:
; 814  :       return value_.bool_;
; 815  :    case stringValue:
; 816  :       return value_.string_  &&  value_.string_[0] != 0;
; 817  :    case arrayValue:

	mov	al, 1
	ret	0
$LN9@asBool:

; 810  :       return value_.int_ != 0;
; 811  :    case realValue:
; 812  :       return value_.real_ != 0.0;

	mov	rax, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+8], 0
	setne	al

; 813  :    case booleanValue:
; 814  :       return value_.bool_;
; 815  :    case stringValue:
; 816  :       return value_.string_  &&  value_.string_[0] != 0;
; 817  :    case arrayValue:

	ret	0
	npad	1
$LN25@asBool:
	DD	$LN10@asBool
	DD	$LN5@asBool
	DD	$LN5@asBool
	DD	$LN6@asBool
	DD	$LN8@asBool
	DD	$LN7@asBool
	DD	$LN9@asBool
	DD	$LN9@asBool
?asBool@Value@Json@@QEBA_NXZ ENDP			; Json::Value::asBool
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isArray@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isArray@Value@Json@@QEBA_NXZ PROC			; Json::Value::isArray, COMDAT

; 1315 :    return type_ == stringValue;

	movzx	eax, BYTE PTR [rcx+8]
	test	al, al
	je	SHORT $LN3@isArray
	cmp	al, 6
	je	SHORT $LN3@isArray
	xor	al, al

; 1316 : }

	ret	0
$LN3@isArray:

; 1315 :    return type_ == stringValue;

	mov	al, 1

; 1316 : }

	ret	0
?isArray@Value@Json@@QEBA_NXZ ENDP			; Json::Value::isArray
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isObject@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isObject@Value@Json@@QEBA_NXZ PROC			; Json::Value::isObject, COMDAT

; 1322 :    return type_ == nullValue  ||  type_ == arrayValue;

	movzx	eax, BYTE PTR [rcx+8]
	test	al, al
	je	SHORT $LN3@isObject
	cmp	al, 7
	je	SHORT $LN3@isObject
	xor	al, al

; 1323 : }

	ret	0
$LN3@isObject:

; 1322 :    return type_ == nullValue  ||  type_ == arrayValue;

	mov	al, 1

; 1323 : }

	ret	0
?isObject@Value@Json@@QEBA_NXZ ENDP			; Json::Value::isObject
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?size@Value@Json@@QEBAIXZ
_TEXT	SEGMENT
$T9 = 48
this$ = 48
?size@Value@Json@@QEBAIXZ PROC				; Json::Value::size, COMDAT

; 874  :    return false; // unreachable;

$LN75:
	sub	rsp, 40					; 00000028H

; 875  : }

	movzx	eax, BYTE PTR [rcx+8]
	cmp	al, 6
	jl	$LN8@size
	je	SHORT $LN5@size
	cmp	al, 7
	jne	$LN8@size
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1270 : 		return (this->_Get_data()._Mysize);

	mov	rax, QWORD PTR [rcx]
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 894  :       {

	mov	eax, DWORD PTR [rax+8]

; 905  :    case objectValue:

	add	rsp, 40					; 00000028H
	ret	0
$LN5@size:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1270 : 		return (this->_Get_data()._Mysize);

	mov	rdx, QWORD PTR [rcx]

; 1280 : 		return (size() == 0);

	cmp	QWORD PTR [rdx+8], 0
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 886  :    case uintValue:

	je	$LN8@size
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [rdx]

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T9[rsp]
	mov	QWORD PTR $T9[rsp], rax
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 888  :    case booleanValue:

	mov	rcx, QWORD PTR $T9[rsp]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 86   : 		if (_Ptr->_Isnil)

	cmp	BYTE PTR [rcx+25], 0
	je	SHORT $LN41@size

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

	mov	rax, QWORD PTR [rcx+16]
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 890  :       return 0;

	mov	eax, DWORD PTR [rax+40]
	inc	eax

; 905  :    case objectValue:

	add	rsp, 40					; 00000028H
	ret	0
$LN41@size:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 90   : 		else if (_Ptr->_Left->_Isnil)

	mov	rax, QWORD PTR [rcx]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LN43@size

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

	mov	rax, QWORD PTR [rcx+8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN40@size
$LL39@size:
	cmp	rcx, QWORD PTR [rax]
	jne	SHORT $LN40@size

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

	mov	rcx, rax
	mov	rax, QWORD PTR [rax+8]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL39@size
$LN40@size:

; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)
; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head
; 101  : 				}
; 102  : 			}
; 103  : 		else

	cmp	BYTE PTR [rcx+25], 0
	cmovne	rax, rcx
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 890  :       return 0;

	mov	eax, DWORD PTR [rax+40]
	inc	eax

; 905  :    case objectValue:

	add	rsp, 40					; 00000028H
	ret	0
$LN43@size:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 479  : 		while (!_Pnode->_Right->_Isnil)

	mov	rcx, QWORD PTR [rax+16]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN44@size
	npad	1
$LL48@size:

; 480  : 			_Pnode = _Pnode->_Right;

	mov	rax, rcx
	mov	rcx, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rcx+25], 0
	je	SHORT $LL48@size
$LN44@size:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 890  :       return 0;

	mov	eax, DWORD PTR [rax+40]
	inc	eax

; 905  :    case objectValue:

	add	rsp, 40					; 00000028H
	ret	0
$LN8@size:

; 895  :          ObjectValues::const_iterator itLast = value_.map_->end();
; 896  :          --itLast;
; 897  :          return (*itLast).first.index()+1;
; 898  :       }
; 899  :       return 0;
; 900  :    case objectValue:
; 901  :       return Int( value_.map_->size() );
; 902  : #else
; 903  :    case arrayValue:
; 904  :       return Int( value_.array_->size() );

	xor	eax, eax

; 905  :    case objectValue:

	add	rsp, 40					; 00000028H
	ret	0
?size@Value@Json@@QEBAIXZ ENDP				; Json::Value::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
this$ = 48
key$ = 56
??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::operator[], COMDAT

; 1090 : {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 1091 :    return (*this)[ key.c_str() ];

	mov	rcx, rdx
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rdx, rax
	mov	rcx, rbx

; 1092 : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 1091 :    return (*this)[ key.c_str() ];

	jmp	??AValue@Json@@QEBAAEBV01@PEBD@Z	; Json::Value::operator[]
??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QEBAAEBV01@I@Z
_TEXT	SEGMENT
$T9 = 32
key$ = 40
$T5 = 80
$T1 = 80
this$ = 80
index$ = 88
??AValue@Json@@QEBAAEBV01@I@Z PROC			; Json::Value::operator[], COMDAT

; 997  :    return value_.array_->resolveReference( index );

$LN38:
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	QWORD PTR $T9[rsp], -2
	mov	QWORD PTR [rsp+88], rbx
	mov	rdi, rcx

; 998  : #endif
; 999  : }

	cmp	BYTE PTR [rcx+8], 0
	jne	SHORT $LN2@operator

; 1000 : 

	lea	rax, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null

; 1007 :       return null;
; 1008 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1009 :    CZString key( index );
; 1010 :    ObjectValues::const_iterator it = value_.map_->find( key );
; 1011 :    if ( it == value_.map_->end() )

	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN2@operator:

; 175  : // //////////////////////////////////////////////////////////////////

	mov	QWORD PTR key$[rsp], 0

; 176  : # ifndef JSON_VALUE_USE_INTERNAL_MAP

	mov	DWORD PTR key$[rsp+8], edx

; 1001 : 
; 1002 : const Value &
; 1003 : Value::operator[]( UInt index ) const

	lea	r8, QWORD PTR key$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
	mov	rbx, QWORD PTR [rax]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1015 : 		return (_Mypair._Get_second()._Get_second());

	mov	rdx, QWORD PTR [rdi]

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR $T5[rsp], rax

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T5[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 278  : 		return (this->_Ptr == _Right._Ptr);

	cmp	rbx, QWORD PTR $T5[rsp]
	lea	rax, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1004 : {

	je	SHORT $LN5@operator

; 1005 :    JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );
; 1006 :    if ( type_ == nullValue )

	lea	rax, QWORD PTR [rbx+48]
$LN5@operator:

; 1007 :       return null;
; 1008 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1009 :    CZString key( index );
; 1010 :    ObjectValues::const_iterator it = value_.map_->find( key );
; 1011 :    if ( it == value_.map_->end() )

	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??AValue@Json@@QEBAAEBV01@I@Z ENDP			; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
_TEXT	SEGMENT
members$ = 32
__$ReturnUdt$GSCopy$ = 56
$T14 = 56
$T9 = 64
$T18 = 80
__$ArrayPad$ = 112
this$ = 144
__$ReturnUdt$ = 152
?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ PROC ; Json::Value::getMemberNames, COMDAT

; 1206 : {

$LN115:
	mov	rax, rsp
	push	rdi
	sub	rsp, 128				; 00000080H
	mov	QWORD PTR [rax-64], -2
	mov	QWORD PTR [rax+24], rbx
	mov	QWORD PTR [rax+32], rsi
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rsi, rdx
	mov	rdi, rcx
	mov	QWORD PTR __$ReturnUdt$GSCopy$[rsp], rdx

; 1207 :    return isMember( key.c_str() );
; 1208 : }

	cmp	BYTE PTR [rcx+8], 0
	jne	SHORT $LN5@getMemberN

; 1209 : #endif

	mov	rcx, rdx
	call	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	jmp	$LN111@getMemberN
$LN5@getMemberN:

; 1210 : 

	lea	rcx, QWORD PTR members$[rsp]
	call	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1020 : 		return (_Mypair._Get_second()._Get_second());

	mov	rax, QWORD PTR [rdi]

; 1270 : 		return (this->_Get_data()._Mysize);

	mov	rbx, QWORD PTR [rax+8]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector

; 1515 : 		if (_Newcapacity > capacity())

	lea	rcx, QWORD PTR members$[rsp]
	call	?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEBA_KXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
	cmp	rbx, rax
	jbe	SHORT $LN20@getMemberN

; 1516 : 			{	// something to do (reserve() never shrinks)
; 1517 : 			if (_Newcapacity > max_size())

	lea	rcx, QWORD PTR members$[rsp]
	call	?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEBA_KXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
	cmp	rbx, rax
	ja	$LN113@getMemberN

; 1520 : 				}
; 1521 : 
; 1522 : 			_Reallocate_exactly(_Newcapacity);

	mov	rdx, rbx
	lea	rcx, QWORD PTR members$[rsp]
	call	?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAX_K@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
$LN20@getMemberN:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1015 : 		return (_Mypair._Get_second()._Get_second());

	mov	rdx, QWORD PTR [rdi]

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [rdx]

; 42   : 		: _Ptr(_Pnode)

	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR $T9[rsp], rcx

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T9[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1213 : {

	mov	rbx, QWORD PTR $T9[rsp]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1015 : 		return (_Mypair._Get_second()._Get_second());

	mov	rdx, QWORD PTR [rdi]

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR $T14[rsp], rax

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T14[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
	mov	rdi, QWORD PTR $T14[rsp]
	cmp	rbx, rdi
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1215 :    if ( type_ == nullValue )

	je	$LN3@getMemberN
	npad	7
$LL64@getMemberN:

; 1216 :        return Value::Members();

	mov	rdx, QWORD PTR [rbx+32]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	rdx, rax
	lea	rcx, QWORD PTR members$[rsp]
	call	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAAX$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
	npad	1
	lea	rcx, QWORD PTR $T18[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 59   : 		if (_Ptr->_Right->_Isnil)

	mov	rax, QWORD PTR [rbx+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LN63@getMemberN

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

	mov	rax, QWORD PTR [rbx+8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN62@getMemberN
	npad	5
$LL61@getMemberN:
	cmp	rbx, QWORD PTR [rax+16]
	jne	SHORT $LN62@getMemberN

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	rbx, rax

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

	mov	rax, QWORD PTR [rax+8]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL61@getMemberN
$LN62@getMemberN:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	rbx, rax

; 68   : 			}
; 69   : 		else

	jmp	SHORT $LN102@getMemberN
$LN63@getMemberN:

; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree

	mov	rbx, rax

; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rcx, QWORD PTR [rax]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN102@getMemberN
	npad	12
$LL67@getMemberN:

; 487  : 			_Pnode = _Pnode->_Left;

	mov	rbx, rcx

; 279  : 		}
; 280  : 
; 281  : 	_NODISCARD bool operator!=(const _Tree_const_iterator& _Right) const
; 282  : 		{	// test for iterator inequality
; 283  : 		return (!(*this == _Right));
; 284  : 		}
; 285  : 
; 286  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 287  : 	friend void _Verify_range(const _Tree_const_iterator& _First, const _Tree_const_iterator& _Last)
; 288  : 		{
; 289  : 		_STL_VERIFY(_First._Getcont() == _Last._Getcont(),
; 290  : 			"map/set iterators in range are from different containers");
; 291  : 		}
; 292  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 293  : 
; 294  : 	_NODISCARD _Tree_unchecked_const_iterator<_Mytree> _Unwrapped() const
; 295  : 		{
; 296  : 		return (_Tree_unchecked_const_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
; 297  : 		}
; 298  : 
; 299  : 	void _Seek_to(const _Tree_unchecked_const_iterator<_Mytree> _It)
; 300  : 		{
; 301  : 		this->_Ptr = _It._Ptr;
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : 	// CLASS TEMPLATE _Tree_iterator
; 306  : template<class _Mytree>
; 307  : 	class _Tree_iterator
; 308  : 		: public _Tree_const_iterator<_Mytree>
; 309  : 	{	// iterator for mutable tree
; 310  : public:
; 311  : 	using _Mybase = _Tree_const_iterator<_Mytree>;
; 312  : 	using iterator_category = bidirectional_iterator_tag;
; 313  : 
; 314  : 	using _Nodeptr = typename _Mytree::_Nodeptr;
; 315  : 	using value_type = typename _Mytree::value_type;
; 316  : 	using difference_type = typename _Mytree::difference_type;
; 317  : 
; 318  : 	using pointer = typename _Mytree::pointer;
; 319  : 	using reference = value_type&;
; 320  : 
; 321  : 	_Tree_iterator()
; 322  : 		{	// construct with null node
; 323  : 		}
; 324  : 
; 325  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 326  : 		: _Mybase(_Pnode, _Plist)
; 327  : 		{	// construct with node pointer _Pnode
; 328  : 		}
; 329  : 
; 330  : 	_NODISCARD reference operator*() const
; 331  : 		{	// return designated value
; 332  : 		return ((reference)**(_Mybase *)this);
; 333  : 		}
; 334  : 
; 335  : 	_NODISCARD pointer operator->() const
; 336  : 		{	// return pointer to class object
; 337  : 		return (pointer_traits<pointer>::pointer_to(**this));
; 338  : 		}
; 339  : 
; 340  : 	_Tree_iterator& operator++()
; 341  : 		{	// preincrement
; 342  : 		++static_cast<_Mybase&>(*this);
; 343  : 		return (*this);
; 344  : 		}
; 345  : 
; 346  : 	_Tree_iterator operator++(int)
; 347  : 		{	// postincrement
; 348  : 		_Tree_iterator _Tmp = *this;
; 349  : 		++*this;
; 350  : 		return (_Tmp);
; 351  : 		}
; 352  : 
; 353  : 	_Tree_iterator& operator--()
; 354  : 		{	// predecrement
; 355  : 		--static_cast<_Mybase&>(*this);
; 356  : 		return (*this);
; 357  : 		}
; 358  : 
; 359  : 	_Tree_iterator operator--(int)
; 360  : 		{	// postdecrement
; 361  : 		_Tree_iterator _Tmp = *this;
; 362  : 		--*this;
; 363  : 		return (_Tmp);
; 364  : 		}
; 365  : 
; 366  : 	_NODISCARD _Tree_unchecked_iterator<_Mytree> _Unwrapped() const
; 367  : 		{
; 368  : 		return (_Tree_unchecked_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
; 369  : 		}
; 370  : 	};
; 371  : 
; 372  : 		// tree TYPE WRAPPERS
; 373  : template<class _Value_type,
; 374  : 	class _Size_type,
; 375  : 	class _Difference_type,
; 376  : 	class _Pointer,
; 377  : 	class _Const_pointer,
; 378  : 	class _Reference,
; 379  : 	class _Const_reference,
; 380  : 	class _Nodeptr_type>
; 381  : 	struct _Tree_iter_types
; 382  : 	{	// wraps types needed by iterators
; 383  : 	using value_type = _Value_type;
; 384  : 	using size_type = _Size_type;
; 385  : 	using difference_type = _Difference_type;
; 386  : 	using pointer = _Pointer;
; 387  : 	using const_pointer = _Const_pointer;
; 388  : 	using _Nodeptr = _Nodeptr_type;
; 389  : 	};
; 390  : 
; 391  : template<class _Value_type,
; 392  : 	class _Voidptr>
; 393  : 	struct _Tree_node
; 394  : 		{	// tree node
; 395  : 		using _Nodeptr = _Rebind_pointer_t<_Voidptr, _Tree_node>;
; 396  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 397  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 398  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 399  : 		char _Color;	// _Red or _Black, _Black if head
; 400  : 		char _Isnil;	// true only if head (also nil) node
; 401  : 		_Value_type _Myval;	// the stored value, unused if head
; 402  : 
; 403  : 		_Tree_node& operator=(const _Tree_node&) = delete;
; 404  : 
; 405  : 		template<class _Alloc>
; 406  : 			static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept
; 407  : 			{
; 408  : 			using _Alnode = _Rebind_alloc_t<_Alloc, _Tree_node>;
; 409  : 			using _Alnode_traits = allocator_traits<_Alnode>;
; 410  : 			_Alnode _Node_alloc(_Al);
; 411  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Left));
; 412  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Parent));
; 413  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Right));
; 414  : 			_Alnode_traits::deallocate(_Node_alloc, _Ptr, 1);
; 415  : 			}
; 416  : 		};
; 417  : 
; 418  : template<class _Ty>
; 419  : 	struct _Tree_simple_types
; 420  : 		: public _Simple_types<_Ty>
; 421  : 	{	// wraps types needed by iterators
; 422  : 	using _Node = _Tree_node<_Ty, void *>;
; 423  : 	using _Nodeptr = _Node *;
; 424  : 	};
; 425  : 
; 426  : template<class _Ty,
; 427  : 	class _Alloc>
; 428  : 	struct _Tree_base_types
; 429  : 	{	// types needed for a container base
; 430  : 	using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
; 431  : 	using _Alty_traits = allocator_traits<_Alty>;
; 432  : 	using _Node = _Tree_node<_Ty, typename allocator_traits<_Alloc>::void_pointer>;
; 433  : 	using _Alnode = _Rebind_alloc_t<_Alloc, _Node>;
; 434  : 	using _Alnode_traits = allocator_traits<_Alnode>;
; 435  : 	using _Nodeptr = typename _Alnode_traits::pointer;
; 436  : 
; 437  : 	using _Val_types = conditional_t<_Is_simple_alloc_v<_Alnode>,
; 438  : 		_Tree_simple_types<_Ty>,
; 439  : 		_Tree_iter_types<_Ty,
; 440  : 			typename _Alty_traits::size_type,
; 441  : 			typename _Alty_traits::difference_type,
; 442  : 			typename _Alty_traits::pointer,
; 443  : 			typename _Alty_traits::const_pointer,
; 444  : 			_Ty&,
; 445  : 			const _Ty&,
; 446  : 			_Nodeptr>>;
; 447  : 	};
; 448  : 
; 449  : 		// CLASS TEMPLATE _Tree_val
; 450  : template<class _Val_types>
; 451  : 	class _Tree_val
; 452  : 		: public _Container_base
; 453  : 	{	// base class for tree to hold data
; 454  : public:
; 455  : 	using _Nodeptr = typename _Val_types::_Nodeptr;
; 456  : 
; 457  : 	using value_type = typename _Val_types::value_type;
; 458  : 	using size_type = typename _Val_types::size_type;
; 459  : 	using difference_type = typename _Val_types::difference_type;
; 460  : 	using pointer = typename _Val_types::pointer;
; 461  : 	using const_pointer = typename _Val_types::const_pointer;
; 462  : 	using reference = value_type&;
; 463  : 	using const_reference = const value_type&;
; 464  : 
; 465  : 	using const_iterator = _Tree_const_iterator<_Tree_val>;
; 466  : 
; 467  : 	_Tree_val()
; 468  : 		: _Myhead(),
; 469  : 		_Mysize(0)
; 470  : 		{	// initialize data
; 471  : 		}
; 472  : 
; 473  : 	enum _Redbl
; 474  : 		{	// colors for link to parent
; 475  : 		_Red, _Black};
; 476  : 
; 477  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 478  : 		{	// return rightmost node in subtree at _Pnode
; 479  : 		while (!_Pnode->_Right->_Isnil)
; 480  : 			_Pnode = _Pnode->_Right;
; 481  : 		return (_Pnode);
; 482  : 		}
; 483  : 
; 484  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 485  : 		{	// return leftmost node in subtree at _Pnode
; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rax, QWORD PTR [rcx]
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL67@getMemberN
$LN102@getMemberN:

; 278  : 		return (this->_Ptr == _Right._Ptr);

	cmp	rbx, rdi
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1215 :    if ( type_ == nullValue )

	jne	$LL64@getMemberN
$LN3@getMemberN:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector

; 788  : 		: _Mybase(_STD move(_Right._Getal()))

	lea	rcx, QWORD PTR members$[rsp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	mov	rcx, rsi
	call	??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector

; 540  : 		_Get_data()._Swap_all(_Right._Get_data());

	lea	rcx, QWORD PTR members$[rsp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
	mov	rcx, rax
	mov	rdx, rbx
	call	?_Swap_all@_Container_base0@std@@QEAAXAEAU12@@Z ; std::_Container_base0::_Swap_all

; 765  : 		this->_Myfirst() = _Right._Myfirst();

	lea	rcx, QWORD PTR members$[rsp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 766  : 		this->_Mylast() = _Right._Mylast();

	lea	rcx, QWORD PTR members$[rsp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 767  : 		this->_Myend() = _Right._Myend();

	lea	rcx, QWORD PTR members$[rsp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 768  : 
; 769  : 		_Right._Myfirst() = pointer();

	lea	rcx, QWORD PTR members$[rsp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
	xor	ebx, ebx
	mov	QWORD PTR [rax], rbx

; 770  : 		_Right._Mylast() = pointer();

	lea	rcx, QWORD PTR members$[rsp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
	mov	QWORD PTR [rax], rbx

; 771  : 		_Right._Myend() = pointer();

	lea	rcx, QWORD PTR members$[rsp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
	mov	QWORD PTR [rax], rbx
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1225 :    ValueInternalMap::IteratorState it;

	lea	rcx, QWORD PTR members$[rsp]
	call	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
$LN111@getMemberN:

; 1226 :    ValueInternalMap::IteratorState itEnd;

	mov	rax, rsi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+32]
	mov	rsi, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	rdi
	ret	0
$LN113@getMemberN:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector

; 1519 : 				_Xlength();

	call	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
	npad	1
$LN110@getMemberN:
?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ENDP ; Json::Value::getMemberNames
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
members$ = 32
__$ReturnUdt$GSCopy$ = 56
$T14 = 56
$T9 = 64
$T18 = 80
__$ArrayPad$ = 112
this$ = 144
__$ReturnUdt$ = 152
?dtor$1@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA PROC ; `Json::Value::getMemberNames'::`1'::dtor$1
	lea	rcx, QWORD PTR members$[rdx]
	jmp	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
?dtor$1@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA ENDP ; `Json::Value::getMemberNames'::`1'::dtor$1
members$ = 32
__$ReturnUdt$GSCopy$ = 56
$T14 = 56
$T9 = 64
$T18 = 80
__$ArrayPad$ = 112
this$ = 144
__$ReturnUdt$ = 152
?dtor$2@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA PROC ; `Json::Value::getMemberNames'::`1'::dtor$2
	lea	rcx, QWORD PTR $T18[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA ENDP ; `Json::Value::getMemberNames'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
members$ = 32
__$ReturnUdt$GSCopy$ = 56
$T14 = 56
$T9 = 64
$T18 = 80
__$ArrayPad$ = 112
this$ = 144
__$ReturnUdt$ = 152
?dtor$1@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA PROC ; `Json::Value::getMemberNames'::`1'::dtor$1
	lea	rcx, QWORD PTR members$[rdx]
	jmp	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
?dtor$1@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA ENDP ; `Json::Value::getMemberNames'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
members$ = 32
__$ReturnUdt$GSCopy$ = 56
$T14 = 56
$T9 = 64
$T18 = 80
__$ArrayPad$ = 112
this$ = 144
__$ReturnUdt$ = 152
?dtor$2@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA PROC ; `Json::Value::getMemberNames'::`1'::dtor$2
	lea	rcx, QWORD PTR $T18[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA ENDP ; `Json::Value::getMemberNames'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?hasComment@Value@Json@@QEBA_NW4CommentPlacement@2@@Z
_TEXT	SEGMENT
this$ = 8
placement$ = 16
?hasComment@Value@Json@@QEBA_NW4CommentPlacement@2@@Z PROC ; Json::Value::hasComment, COMDAT

; 1347 :    setComment( comment.c_str(), placement );

	mov	r8, QWORD PTR [rcx+16]
	test	r8, r8
	je	SHORT $LN3@hasComment
	movsxd	rax, edx
	cmp	QWORD PTR [r8+rax*8], 0
	je	SHORT $LN3@hasComment
	mov	al, 1

; 1348 : }

	ret	0
$LN3@hasComment:

; 1347 :    setComment( comment.c_str(), placement );

	xor	al, al

; 1348 : }

	ret	0
?hasComment@Value@Json@@QEBA_NW4CommentPlacement@2@@Z ENDP ; Json::Value::hasComment
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
placement$ = 64
?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z PROC ; Json::Value::getComment, COMDAT

; 1352 : Value::hasComment( CommentPlacement placement ) const

$LN15:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 1347 :    setComment( comment.c_str(), placement );

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN2@getComment
	movsxd	rax, r8d
	mov	rdx, QWORD PTR [rdx+rax*8]
	test	rdx, rdx
	jne	SHORT $LN12@getComment
$LN2@getComment:

; 1353 : {
; 1354 :    return comments_ != 0  &&  comments_[placement].comment_ != 0;
; 1355 : }

	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
$LN12@getComment:

; 1356 : 

	mov	rcx, rbx
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ENDP ; Json::Value::getComment
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBD@Z
_TEXT	SEGMENT
_InitData$ = 32
this$ = 64
_Message$ = 72
??0exception@std@@QEAA@QEBD@Z PROC			; std::exception::exception, COMDAT

; 55   :     {

$LN5:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx

; 56   :         __std_exception_data _InitData = { _Message, true };

	mov	BYTE PTR _InitData$[rsp+8], 1
	mov	rax, rdx
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	lea	rdx, QWORD PTR [rbx+8]
	mov	QWORD PTR _InitData$[rsp], rax
	mov	QWORD PTR [rbx], rcx
	xor	ecx, ecx
	mov	QWORD PTR [rdx], rcx
	mov	QWORD PTR [rdx+8], rcx

; 57   :         __std_exception_copy(&_InitData, &_Data);

	lea	rcx, QWORD PTR _InitData$[rsp]
	call	__std_exception_copy

; 58   :     }

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0exception@std@@QEAA@QEBD@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 68   :     {

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rax, rdx
	lea	rdx, QWORD PTR [rbx+8]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rbx], rcx
	xor	ecx, ecx
	mov	QWORD PTR [rdx], rcx
	mov	QWORD PTR [rdx+8], rcx

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

	lea	rcx, QWORD PTR [rax+8]
	call	__std_exception_copy

; 70   :     }

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 85   :     {

	lea	rax, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

	add	rcx, 8
	jmp	__std_exception_destroy
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	rdx, QWORD PTR [rcx+8]
	lea	rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
	test	rdx, rdx
	cmovne	rax, rdx

; 92   :     }

	ret	0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN9:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 85   :     {

	lea	rax, OFFSET FLAT:??_7exception@std@@6B@
	mov	rdi, rcx
	mov	QWORD PTR [rcx], rax
	mov	ebx, edx

; 86   :         __std_exception_destroy(&_Data);

	add	rcx, 8
	call	__std_exception_destroy
	test	bl, 1
	je	SHORT $LN6@scalar
	mov	edx, 24
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
$LN6@scalar:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\stdexcept
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\stdexcept
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\stdexcept
;	COMDAT ??0runtime_error@std@@QEAA@PEBD@Z
_TEXT	SEGMENT
_InitData$1 = 32
this$ = 64
_Message$ = 72
??0runtime_error@std@@QEAA@PEBD@Z PROC			; std::runtime_error::runtime_error, COMDAT

; 170  : 		{	// construct from message string

$LN7:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 56   :         __std_exception_data _InitData = { _Message, true };

	mov	BYTE PTR _InitData$1[rsp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\stdexcept

; 170  : 		{	// construct from message string

	mov	rax, rdx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 55   :     {

	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	lea	rdx, QWORD PTR [rbx+8]

; 56   :         __std_exception_data _InitData = { _Message, true };

	mov	QWORD PTR _InitData$1[rsp], rax
	mov	QWORD PTR [rbx], rcx
	xor	ecx, ecx
	mov	QWORD PTR [rdx], rcx
	mov	QWORD PTR [rdx+8], rcx

; 57   :         __std_exception_copy(&_InitData, &_Data);

	lea	rcx, QWORD PTR _InitData$1[rsp]
	call	__std_exception_copy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\stdexcept

; 170  : 		{	// construct from message string

	lea	rax, OFFSET FLAT:??_7runtime_error@std@@6B@
	mov	QWORD PTR [rbx], rax

; 171  : 		}

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0runtime_error@std@@QEAA@PEBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_Gruntime_error@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gruntime_error@std@@UEAAPEAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
$LN12:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 85   :     {

	lea	rax, OFFSET FLAT:??_7exception@std@@6B@
	mov	rdi, rcx
	mov	QWORD PTR [rcx], rax
	mov	ebx, edx

; 86   :         __std_exception_destroy(&_Data);

	add	rcx, 8
	call	__std_exception_destroy
	test	bl, 1
	je	SHORT $LN9@scalar
	mov	edx, 24
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
$LN9@scalar:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gruntime_error@std@@UEAAPEAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1runtime_error@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1runtime_error@std@@UEAA@XZ PROC			; std::runtime_error::~runtime_error, COMDAT

; 85   :     {

	lea	rax, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

	add	rcx, 8
	jmp	__std_exception_destroy
??1runtime_error@std@@UEAA@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0runtime_error@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0runtime_error@std@@QEAA@AEBV01@@Z PROC		; std::runtime_error::runtime_error, COMDAT
$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rax, rdx

; 67   :         : _Data()

	lea	rdx, QWORD PTR [rbx+8]

; 68   :     {

	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rbx], rcx
	xor	ecx, ecx
	mov	QWORD PTR [rdx], rcx
	mov	QWORD PTR [rdx+8], rcx

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

	lea	rcx, QWORD PTR [rax+8]
	call	__std_exception_copy
	lea	rax, OFFSET FLAT:??_7runtime_error@std@@6B@
	mov	QWORD PTR [rbx], rax
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0runtime_error@std@@QEAA@AEBV01@@Z ENDP		; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??__E?null@Value@Json@@2V12@B@@YAXXZ
text$di	SEGMENT
??__E?null@Value@Json@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Json::Value::null'', COMDAT

; 270  : 

	and	DWORD PTR ?null@Value@Json@@2V12@B+8, -257 ; fffffffffffffeffH

; 22   : #include <stdio.h>

	lea	rcx, OFFSET FLAT:??__F?null@Value@Json@@2V12@B@@YAXXZ ; `dynamic atexit destructor for 'Json::Value::null''
	jmp	atexit
??__E?null@Value@Json@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Json::Value::null''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__F?null@Value@Json@@2V12@B@@YAXXZ
text$yd	SEGMENT
??__F?null@Value@Json@@2V12@B@@YAXXZ PROC		; `dynamic atexit destructor for 'Json::Value::null'', COMDAT
	lea	rcx, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
??__F?null@Value@Json@@2V12@B@@YAXXZ ENDP		; `dynamic atexit destructor for 'Json::Value::null''
text$yd	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1ValueAllocator@Json@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1ValueAllocator@Json@@UEAA@XZ PROC			; Json::ValueAllocator::~ValueAllocator, COMDAT

; 56   : //      newString[length] = 0;

	lea	rax, OFFSET FLAT:??_7ValueAllocator@Json@@6B@
	mov	QWORD PTR [rcx], rax

; 57   : //      return newString;

	ret	0
??1ValueAllocator@Json@@UEAA@XZ ENDP			; Json::ValueAllocator::~ValueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??_GValueAllocator@Json@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GValueAllocator@Json@@UEAAPEAXI@Z PROC		; Json::ValueAllocator::`scalar deleting destructor', COMDAT
$LN9:
	push	rbx
	sub	rsp, 32					; 00000020H

; 56   : //      newString[length] = 0;

	lea	rax, OFFSET FLAT:??_7ValueAllocator@Json@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	test	dl, 1
	je	SHORT $LN6@scalar
	mov	edx, 8
	call	??3@YAXPEAX_K@Z				; operator delete
$LN6@scalar:
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_GValueAllocator@Json@@UEAAPEAXI@Z ENDP		; Json::ValueAllocator::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1DefaultValueAllocator@Json@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1DefaultValueAllocator@Json@@UEAA@XZ PROC		; Json::DefaultValueAllocator::~DefaultValueAllocator, COMDAT

; 56   : //      newString[length] = 0;

	lea	rax, OFFSET FLAT:??_7ValueAllocator@Json@@6B@
	mov	QWORD PTR [rcx], rax

; 64   : }

	ret	0
??1DefaultValueAllocator@Json@@UEAA@XZ ENDP		; Json::DefaultValueAllocator::~DefaultValueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?makeMemberName@DefaultValueAllocator@Json@@UEAAPEADPEBD@Z
_TEXT	SEGMENT
this$ = 8
memberName$ = 16
?makeMemberName@DefaultValueAllocator@Json@@UEAAPEADPEBD@Z PROC ; Json::DefaultValueAllocator::makeMemberName, COMDAT

; 68   : public:

	mov	rax, QWORD PTR [rcx]
	mov	r8d, -1					; ffffffffH
	rex_jmp	QWORD PTR [rax+24]
?makeMemberName@DefaultValueAllocator@Json@@UEAAPEADPEBD@Z ENDP ; Json::DefaultValueAllocator::makeMemberName
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?releaseMemberName@DefaultValueAllocator@Json@@UEAAXPEAD@Z
_TEXT	SEGMENT
this$ = 8
memberName$ = 16
?releaseMemberName@DefaultValueAllocator@Json@@UEAAXPEAD@Z PROC ; Json::DefaultValueAllocator::releaseMemberName, COMDAT

; 73   :    virtual char *makeMemberName( const char *memberName )

	mov	rax, QWORD PTR [rcx]
	rex_jmp	QWORD PTR [rax+32]
?releaseMemberName@DefaultValueAllocator@Json@@UEAAXPEAD@Z ENDP ; Json::DefaultValueAllocator::releaseMemberName
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z
_TEXT	SEGMENT
this$ = 48
value$ = 56
length$ = 64
?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z PROC ; Json::DefaultValueAllocator::duplicateStringValue, COMDAT

; 78   :    virtual void releaseMemberName( char *memberName )

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	rsi, rdx

; 79   :    {
; 80   :       releaseStringValue( memberName );
; 81   :    }
; 82   : 
; 83   :    virtual char *duplicateStringValue( const char *value, 

	cmp	r8d, -1					; ffffffffH
	jne	SHORT $LN2@duplicateS

; 84   :                                        unsigned int length = unknown )

	mov	rbx, -1
$LL4@duplicateS:
	inc	rbx
	cmp	BYTE PTR [rdx+rbx], 0
	jne	SHORT $LL4@duplicateS
$LN2@duplicateS:

; 85   :    {

	lea	ecx, DWORD PTR [rbx+1]
	call	QWORD PTR __imp_malloc

; 86   :       //@todo invesgate this old optimization

	mov	ebx, ebx
	mov	rdx, rsi
	mov	r8d, ebx
	mov	rcx, rax
	mov	rdi, rax
	call	memcpy

; 87   :       //if ( !value  ||  value[0] == 0 )
; 88   :       //   return 0;
; 89   : 

	mov	rsi, QWORD PTR [rsp+56]
	mov	rax, rdi
	mov	BYTE PTR [rbx+rdi], 0
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z ENDP ; Json::DefaultValueAllocator::duplicateStringValue
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?releaseStringValue@DefaultValueAllocator@Json@@UEAAXPEAD@Z
_TEXT	SEGMENT
this$ = 8
value$ = 16
?releaseStringValue@DefaultValueAllocator@Json@@UEAAXPEAD@Z PROC ; Json::DefaultValueAllocator::releaseStringValue, COMDAT

; 93   :       memcpy( newString, value, length );

	test	rdx, rdx
	je	SHORT $LN2@releaseStr

; 94   :       newString[length] = 0;

	mov	rcx, rdx
	rex_jmp	QWORD PTR __imp_free
$LN2@releaseStr:

; 95   :       return newString;

	ret	0
?releaseStringValue@DefaultValueAllocator@Json@@UEAAXPEAD@Z ENDP ; Json::DefaultValueAllocator::releaseStringValue
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z PROC	; Json::DefaultValueAllocator::`scalar deleting destructor', COMDAT
$LN12:
	push	rbx
	sub	rsp, 32					; 00000020H

; 56   : //      newString[length] = 0;

	lea	rax, OFFSET FLAT:??_7ValueAllocator@Json@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	test	dl, 1
	je	SHORT $LN9@scalar
	mov	edx, 8
	call	??3@YAXPEAX_K@Z				; operator delete
$LN9@scalar:
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z ENDP	; Json::DefaultValueAllocator::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ
_TEXT	SEGMENT
?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ PROC	; Json::valueAllocator, COMDAT

; 99   :    {

	sub	rsp, 40					; 00000028H

; 100  :       if ( value )

	mov	rax, QWORD PTR gs:88
	mov	edx, OFFSET FLAT:_Init_thread_epoch
	mov	rcx, QWORD PTR [rax]
	mov	eax, DWORD PTR [rdx+rcx]
	cmp	DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4HA, eax
	jle	SHORT $LN9@valueAlloc
	lea	rcx, OFFSET FLAT:?$TSS0@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4HA
	call	_Init_thread_header
	cmp	DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4HA, -1
	jne	SHORT $LN9@valueAlloc
	lea	rax, OFFSET FLAT:??_7DefaultValueAllocator@Json@@6B@
	lea	rcx, OFFSET FLAT:??__FdefaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	QWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, rax
	call	atexit
	lea	rcx, OFFSET FLAT:?$TSS0@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4HA
	call	_Init_thread_footer
$LN9@valueAlloc:

; 101  :          free( value );
; 102  :    }
; 103  : };

	lea	rax, OFFSET FLAT:?valueAllocator@?1??0Json@@YAAEAPEAVValueAllocator@1@XZ@4PEAV21@EA
	add	rsp, 40					; 00000028H
	ret	0
?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ENDP	; Json::valueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ@YAXXZ
text$yd	SEGMENT
??__FdefaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ@YAXXZ PROC ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator'', COMDAT

; 56   : //      newString[length] = 0;

	lea	rax, OFFSET FLAT:??_7ValueAllocator@Json@@6B@
	mov	QWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, rax
	ret	0
??__FdefaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ@YAXXZ ENDP ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
text$yd	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0DefaultValueAllocator@Json@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??0DefaultValueAllocator@Json@@QEAA@XZ PROC		; Json::DefaultValueAllocator::DefaultValueAllocator, COMDAT
	lea	rax, OFFSET FLAT:??_7DefaultValueAllocator@Json@@6B@
	mov	QWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, rax
	lea	rax, OFFSET FLAT:?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A
	ret	0
??0DefaultValueAllocator@Json@@QEAA@XZ ENDP		; Json::DefaultValueAllocator::DefaultValueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0ValueAllocator@Json@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??0ValueAllocator@Json@@QEAA@XZ PROC			; Json::ValueAllocator::ValueAllocator, COMDAT
	lea	rax, OFFSET FLAT:??_7ValueAllocator@Json@@6B@
	mov	QWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, rax
	lea	rax, OFFSET FLAT:?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A
	ret	0
??0ValueAllocator@Json@@QEAA@XZ ENDP			; Json::ValueAllocator::ValueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??__EdummyValueAllocatorInitializer@Json@@YAXXZ
text$di	SEGMENT
??__EdummyValueAllocatorInitializer@Json@@YAXXZ PROC	; Json::`dynamic initializer for 'dummyValueAllocatorInitializer'', COMDAT

; 108  :    static ValueAllocator *valueAllocator = &defaultAllocator;

	jmp	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
??__EdummyValueAllocatorInitializer@Json@@YAXXZ ENDP	; Json::`dynamic initializer for 'dummyValueAllocatorInitializer''
text$di	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0DummyValueAllocatorInitializer@Json@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 48
??0DummyValueAllocatorInitializer@Json@@QEAA@XZ PROC	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer, COMDAT

; 106  : {

$LN4:
	sub	rsp, 40					; 00000028H

; 107  :    static DefaultValueAllocator defaultAllocator;
; 108  :    static ValueAllocator *valueAllocator = &defaultAllocator;

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator

; 109  :    return valueAllocator;

	lea	rax, OFFSET FLAT:?dummyValueAllocatorInitializer@Json@@3UDummyValueAllocatorInitializer@1@A
	add	rsp, 40					; 00000028H
	ret	0
??0DummyValueAllocatorInitializer@Json@@QEAA@XZ ENDP	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0CommentInfo@Value@Json@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0CommentInfo@Value@Json@@QEAA@XZ PROC			; Json::Value::CommentInfo::CommentInfo, COMDAT

; 139  : // class Value::CommentInfo

	mov	QWORD PTR [rcx], 0

; 141  : // //////////////////////////////////////////////////////////////////

	mov	rax, rcx
	ret	0
??0CommentInfo@Value@Json@@QEAA@XZ ENDP			; Json::Value::CommentInfo::CommentInfo
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1CommentInfo@Value@Json@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1CommentInfo@Value@Json@@QEAA@XZ PROC			; Json::Value::CommentInfo::~CommentInfo, COMDAT

; 144  : 

$LN6:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T1[rsp], -2
	mov	rbx, rcx

; 145  : Value::CommentInfo::CommentInfo()

	cmp	QWORD PTR [rcx], 0
	je	SHORT $LN2@CommentInf

; 146  :    : comment_( 0 )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+32]
	npad	1
$LN2@CommentInf:

; 147  : {

	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??1CommentInfo@Value@Json@@QEAA@XZ ENDP			; Json::Value::CommentInfo::~CommentInfo
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
text$ = 88
?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z PROC	; Json::Value::CommentInfo::setComment, COMDAT

; 152  :    if ( comment_ )

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 153  :       valueAllocator()->releaseStringValue( comment_ );

	cmp	QWORD PTR [rcx], 0
	mov	rdi, rdx
	mov	rbx, rcx
	je	SHORT $LN2@setComment

; 154  : }

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rdx, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+32]
$LN2@setComment:

; 155  : 
; 156  : 

	movzx	eax, BYTE PTR [rdi]
	test	al, al
	je	SHORT $LN3@setComment
	cmp	al, 47					; 0000002fH
	jne	SHORT $LN7@setComment
$LN3@setComment:

; 157  : void 
; 158  : Value::CommentInfo::setComment( const char *text )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	r8d, -1					; ffffffffH
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
	mov	QWORD PTR [rbx], rax

; 159  : {

	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN7@setComment:

; 155  : 
; 156  : 

	lea	rdx, OFFSET FLAT:??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1@
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
	int	3
$LN5@setComment:
?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z ENDP	; Json::Value::CommentInfo::setComment
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0CZString@Value@Json@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
index$ = 16
??0CZString@Value@Json@@QEAA@H@Z PROC			; Json::Value::CZString::CZString, COMDAT

; 175  : // //////////////////////////////////////////////////////////////////

	mov	QWORD PTR [rcx], 0

; 178  : // Notes: index_ indicates if the string was allocated when

	mov	rax, rcx
	mov	DWORD PTR [rcx+8], edx
	ret	0
??0CZString@Value@Json@@QEAA@H@Z ENDP			; Json::Value::CZString::CZString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z
_TEXT	SEGMENT
this$ = 48
cstr$ = 56
allocate$ = 64
??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z PROC ; Json::Value::CZString::CZString, COMDAT

; 184  : {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	edi, r8d
	mov	rsi, rdx
	mov	rbx, rcx

; 181  : Value::CZString::CZString( int index )

	cmp	r8d, 1
	jne	SHORT $LN3@CZString
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rdx, rsi
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+8]
	mov	rsi, rax
$LN3@CZString:
	mov	QWORD PTR [rbx], rsi

; 185  : }

	mov	rax, rbx
	mov	rsi, QWORD PTR [rsp+56]
	mov	DWORD PTR [rbx+8], edi
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z ENDP ; Json::Value::CZString::CZString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0CZString@Value@Json@@QEAA@AEBV012@@Z
_TEXT	SEGMENT
this$ = 48
other$ = 56
??0CZString@Value@Json@@QEAA@AEBV012@@Z PROC		; Json::Value::CZString::CZString, COMDAT

; 193  : 

$LN11:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rdx+8], 0
	mov	rbx, rdx
	mov	rdi, rcx
	je	SHORT $LN8@CZString
	cmp	QWORD PTR [rdx], 0
	je	SHORT $LN8@CZString
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rdx, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+8]
	jmp	SHORT $LN4@CZString
$LN8@CZString:
	mov	rax, QWORD PTR [rdx]
$LN4@CZString:
	mov	QWORD PTR [rdi], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	cmp	QWORD PTR [rbx], 0
	mov	ecx, DWORD PTR [rbx+8]
	je	SHORT $LN5@CZString
	xor	eax, eax
	test	ecx, ecx
	setne	al
	mov	DWORD PTR [rdi+8], eax

; 194  : Value::CZString::CZString( const CZString &other )

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN5@CZString:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	mov	DWORD PTR [rdi+8], ecx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0CZString@Value@Json@@QEAA@AEBV012@@Z ENDP		; Json::Value::CZString::CZString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1CZString@Value@Json@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1CZString@Value@Json@@QEAA@XZ PROC			; Json::Value::CZString::~CZString, COMDAT

; 197  :                 : other.cstr_ )

$LN6:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T1[rsp], -2
	mov	rbx, rcx

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rcx], 0
	je	SHORT $LN2@CZString
	cmp	DWORD PTR [rcx+8], 1
	jne	SHORT $LN2@CZString

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+16]
	npad	1
$LN2@CZString:

; 200  : {

	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??1CZString@Value@Json@@QEAA@XZ ENDP			; Json::Value::CZString::~CZString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??MCZString@Value@Json@@QEBA_NAEBV012@@Z
_TEXT	SEGMENT
this$ = 8
other$ = 16
??MCZString@Value@Json@@QEBA_NAEBV012@@Z PROC		; Json::Value::CZString::operator<, COMDAT

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rcx]
	test	rax, rax
	je	SHORT $LN2@operator

; 221  :    return *this;

	mov	rdx, QWORD PTR [rdx]
	sub	rdx, rax
	npad	2
$LL4@operator:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN6@operator
	inc	rax
	test	cl, cl
	jne	SHORT $LL4@operator
	xor	eax, eax
	shr	eax, 31

; 223  : 

	ret	0
$LN6@operator:

; 221  :    return *this;

	sbb	eax, eax
	or	eax, 1
	shr	eax, 31

; 223  : 

	ret	0
$LN2@operator:

; 222  : }

	mov	eax, DWORD PTR [rdx+8]
	cmp	DWORD PTR [rcx+8], eax
	setl	al

; 223  : 

	ret	0
??MCZString@Value@Json@@QEBA_NAEBV012@@Z ENDP		; Json::Value::CZString::operator<
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??8CZString@Value@Json@@QEBA_NAEBV012@@Z
_TEXT	SEGMENT
this$ = 8
other$ = 16
??8CZString@Value@Json@@QEBA_NAEBV012@@Z PROC		; Json::Value::CZString::operator==, COMDAT

; 228  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	rax, QWORD PTR [rcx]
	test	rax, rax
	je	SHORT $LN2@operator

; 229  :    return index_ < other.index_;

	mov	r8, QWORD PTR [rdx]
	sub	r8, rax
	npad	2
$LL4@operator:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN5@operator
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL4@operator
$LN5@operator:
	test	edx, edx

; 231  : 

	sete	al
	ret	0
$LN2@operator:

; 230  : }

	mov	eax, DWORD PTR [rdx+8]
	cmp	DWORD PTR [rcx+8], eax

; 231  : 

	sete	al
	ret	0
??8CZString@Value@Json@@QEBA_NAEBV012@@Z ENDP		; Json::Value::CZString::operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?index@CZString@Value@Json@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?index@CZString@Value@Json@@QEBAHXZ PROC		; Json::Value::CZString::index, COMDAT

; 237  :    return index_ == other.index_;

	mov	eax, DWORD PTR [rcx+8]

; 238  : }

	ret	0
?index@CZString@Value@Json@@QEBAHXZ ENDP		; Json::Value::CZString::index
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?c_str@CZString@Value@Json@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?c_str@CZString@Value@Json@@QEBAPEBDXZ PROC		; Json::Value::CZString::c_str, COMDAT

; 244  :    return index_;

	mov	rax, QWORD PTR [rcx]

; 245  : }

	ret	0
?c_str@CZString@Value@Json@@QEBAPEBDXZ ENDP		; Json::Value::CZString::c_str
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@W4ValueType@1@@Z
_TEXT	SEGMENT
$T7 = 32
$T1 = 64
this$ = 64
$T2 = 72
type$ = 72
??0Value@Json@@QEAA@W4ValueType@1@@Z PROC		; Json::Value::Value, COMDAT

; 275  : Value::Value( ValueType type )

$LN44:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T7[rsp], -2
	mov	QWORD PTR [rsp+80], rbx
	mov	QWORD PTR [rsp+88], rsi
	mov	rdi, rcx

; 269  : // //////////////////////////////////////////////////////////////////

	mov	BYTE PTR [rcx+8], dl

; 270  : 

	and	DWORD PTR [rcx+8], -257			; fffffffffffffeffH

; 271  : /*! \internal Default constructor initialization must be equivalent to:

	xor	esi, esi
	mov	QWORD PTR [rcx+16], rsi

; 276  :    : type_( type )

	dec	edx
	cmp	edx, 6
	ja	$LN10@Value
	movsxd	rax, edx
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN41@Value[rcx+rax*4]
	add	rdx, rcx
	jmp	rdx
$LN5@Value:

; 277  :    , allocated_( 0 )
; 278  :    , comments_( 0 )
; 279  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 280  :    , itemIsUsed_( 0 )
; 281  : #endif
; 282  : {

	mov	DWORD PTR [rdi], esi

; 305  :       break;
; 306  :    case objectValue:
; 307  :       value_.map_ = mapAllocator()->newMap();
; 308  :       break;
; 309  : #endif

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN6@Value:
	mov	QWORD PTR [rdi], rsi
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN8@Value:

; 293  :       break;

	mov	ecx, 16
	call	??2@YAPEAX_K@Z				; operator new
	mov	rbx, rax
	mov	QWORD PTR $T1[rsp], rax
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

	mov	QWORD PTR [rbx], rsi

; 469  : 		_Mysize(0)

	mov	QWORD PTR [rbx+8], rsi

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	QWORD PTR [rbx], rax
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 293  :       break;

	mov	QWORD PTR [rdi], rbx

; 305  :       break;
; 306  :    case objectValue:
; 307  :       value_.map_ = mapAllocator()->newMap();
; 308  :       break;
; 309  : #endif

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN9@Value:

; 294  :    case stringValue:
; 295  :       value_.string_ = 0;
; 296  :       break;
; 297  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 298  :    case arrayValue:
; 299  :    case objectValue:
; 300  :       value_.map_ = new ObjectValues();
; 301  :       break;
; 302  : #else
; 303  :    case arrayValue:
; 304  :       value_.array_ = arrayAllocator()->newArray();

	mov	BYTE PTR [rdi], sil
$LN10@Value:

; 305  :       break;
; 306  :    case objectValue:
; 307  :       value_.map_ = mapAllocator()->newMap();
; 308  :       break;
; 309  : #endif

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
	npad	1
$LN41@Value:
	DD	$LN5@Value
	DD	$LN5@Value
	DD	$LN6@Value
	DD	$LN6@Value
	DD	$LN9@Value
	DD	$LN8@Value
	DD	$LN8@Value
??0Value@Json@@QEAA@W4ValueType@1@@Z ENDP		; Json::Value::Value
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T7 = 32
$T1 = 64
this$ = 64
$T2 = 72
type$ = 72
?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA PROC ; `Json::Value::Value'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T1[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA ENDP ; `Json::Value::Value'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T7 = 32
$T1 = 64
this$ = 64
$T2 = 72
type$ = 72
?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA PROC ; `Json::Value::Value'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T1[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA ENDP ; `Json::Value::Value'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
value$ = 16
??0Value@Json@@QEAA@H@Z PROC				; Json::Value::Value, COMDAT

; 313  :    default:

	mov	BYTE PTR [rcx+8], 1

; 319  : Value::Value( Int value )
; 320  :    : type_( intValue )

	mov	rax, rcx
	mov	QWORD PTR [rcx+16], 0
	mov	DWORD PTR [rcx], edx
	ret	0
??0Value@Json@@QEAA@H@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
value$ = 16
??0Value@Json@@QEAA@I@Z PROC				; Json::Value::Value, COMDAT

; 324  : #endif

	mov	BYTE PTR [rcx+8], 2

; 330  : Value::Value( UInt value )
; 331  :    : type_( uintValue )

	mov	rax, rcx
	mov	QWORD PTR [rcx+16], 0
	mov	DWORD PTR [rcx], edx
	ret	0
??0Value@Json@@QEAA@I@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
value$ = 16
??0Value@Json@@QEAA@N@Z PROC				; Json::Value::Value, COMDAT

; 340  : Value::Value( double value )

	movsd	QWORD PTR [rcx], xmm1

; 341  :    : type_( realValue )

	mov	rax, rcx
	mov	BYTE PTR [rcx+8], 3
	mov	QWORD PTR [rcx+16], 0
	ret	0
??0Value@Json@@QEAA@N@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
this$ = 48
value$ = 56
??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::Value, COMDAT

; 376  : Value::Value( const std::string &value )

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H

; 370  : {

	mov	BYTE PTR [rcx+8], 4
	mov	rbp, rdx

; 371  :    value_.string_ = valueAllocator()->duplicateStringValue( beginValue, 

	or	DWORD PTR [rcx+8], 256			; 00000100H
	mov	r14, rcx

; 372  :                                                             UInt(endValue - beginValue) );

	mov	QWORD PTR [rcx+16], 0

; 377  :    : type_( stringValue )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, rbp
	mov	rdi, QWORD PTR [rax]
	mov	rsi, QWORD PTR [rdi]
	call	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
	mov	rcx, rbp
	mov	rbx, rax
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rdx, rax
	mov	r8d, ebx
	mov	rcx, rdi
	call	QWORD PTR [rsi+24]

; 378  :    , allocated_( true )
; 379  :    , comments_( 0 )
; 380  : # ifdef JSON_VALUE_USE_INTERNAL_MAP

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	mov	QWORD PTR [r14], rax
	mov	rax, r14
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@_N@Z
_TEXT	SEGMENT
this$ = 8
value$ = 16
??0Value@Json@@QEAA@_N@Z PROC				; Json::Value::Value, COMDAT

; 408  : #endif

	mov	BYTE PTR [rcx+8], 5

; 414  : Value::Value( bool value )
; 415  :    : type_( booleanValue )

	mov	rax, rcx
	mov	QWORD PTR [rcx+16], 0
	mov	BYTE PTR [rcx], dl
	ret	0
??0Value@Json@@QEAA@_N@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
$T9 = 48
$T7 = 96
$T1 = 96
this$ = 96
other$ = 104
??0Value@Json@@QEAA@AEBV01@@Z PROC			; Json::Value::Value, COMDAT

; 424  : 

$LN41:
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 64					; 00000040H
	mov	QWORD PTR $T9[rsp], -2
	mov	QWORD PTR [rsp+104], rbx
	mov	QWORD PTR [rsp+112], rbp
	mov	r14, rdx
	mov	rsi, rcx

; 419  : #endif

	movsx	rax, BYTE PTR [rdx+8]
	mov	BYTE PTR [rcx+8], al

; 420  : {

	xor	edi, edi
	mov	QWORD PTR [rcx+16], rdi

; 425  : Value::Value( const Value &other )

	cmp	eax, 7
	ja	SHORT $LN12@Value
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN37@Value[rcx+rax*4]
	add	rdx, rcx
	jmp	rdx
$LN7@Value:

; 426  :    : type_( other.type_ )
; 427  :    , comments_( 0 )
; 428  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 429  :    , itemIsUsed_( 0 )
; 430  : #endif
; 431  : {
; 432  :    switch ( type_ )

	mov	rax, QWORD PTR [r14]
	mov	QWORD PTR [rsi], rax

; 433  :    {

	jmp	SHORT $LN12@Value
$LN8@Value:

; 434  :    case nullValue:
; 435  :    case intValue:

	cmp	QWORD PTR [r14], rdi
	je	SHORT $LN9@Value

; 436  :    case uintValue:
; 437  :    case realValue:

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	r8d, -1					; ffffffffH
	mov	rdx, QWORD PTR [r14]
	call	QWORD PTR [rax+24]
	mov	QWORD PTR [rsi], rax

; 438  :    case booleanValue:

	or	DWORD PTR [rsi+8], 256			; 00000100H

; 439  :       value_ = other.value_;
; 440  :       break;

	jmp	SHORT $LN12@Value
$LN9@Value:

; 441  :    case stringValue:

	mov	QWORD PTR [rsi], rdi

; 442  :       if ( other.value_.string_ )

	jmp	SHORT $LN12@Value
$LN11@Value:

; 446  :       }

	mov	ecx, 16
	call	??2@YAPEAX_K@Z				; operator new
	mov	rbx, rax
	mov	QWORD PTR $T1[rsp], rax
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map

; 124  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

	mov	rdx, QWORD PTR [r14]
	mov	rcx, rax
	call	??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
	npad	1
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 446  :       }

	mov	QWORD PTR [rsi], rbx
$LN12@Value:

; 447  :       else
; 448  :          value_.string_ = 0;
; 449  :       break;
; 450  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 451  :    case arrayValue:
; 452  :    case objectValue:
; 453  :       value_.map_ = new ObjectValues( *other.value_.map_ );
; 454  :       break;
; 455  : #else
; 456  :    case arrayValue:
; 457  :       value_.array_ = arrayAllocator()->newArrayCopy( *other.value_.array_ );
; 458  :       break;
; 459  :    case objectValue:

	cmp	QWORD PTR [r14+16], 0
	je	SHORT $LN38@Value

; 460  :       value_.map_ = mapAllocator()->newMapCopy( *other.value_.map_ );
; 461  :       break;

	mov	ecx, 32					; 00000020H
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T7[rsp], rax
	mov	ebp, 3
	test	rax, rax
	je	SHORT $LN18@Value
	mov	QWORD PTR [rax], rbp
	lea	rbx, QWORD PTR [rax+8]
	lea	rax, OFFSET FLAT:??1CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::~CommentInfo
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:??0CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::CommentInfo
	mov	r8d, ebp
	lea	edx, QWORD PTR [rbp+5]
	mov	rcx, rbx
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	jmp	SHORT $LN19@Value
$LN18@Value:
	mov	rbx, rdi
$LN19@Value:
	mov	QWORD PTR [rsi+16], rbx
	mov	rbx, rdi
$LL6@Value:

; 463  :    default:
; 464  :       JSON_ASSERT_UNREACHABLE;

	mov	rax, QWORD PTR [r14+16]

; 465  :    }

	mov	rdx, QWORD PTR [rdi+rax]
	test	rdx, rdx
	je	SHORT $LN4@Value

; 466  :    if ( other.comments_ )

	mov	rcx, QWORD PTR [rsi+16]
	add	rcx, rbx
	call	?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z ; Json::Value::CommentInfo::setComment
$LN4@Value:

; 462  : #endif

	add	rbx, 8
	add	rdi, 8
	sub	rbp, 1
	jne	SHORT $LL6@Value
$LN38@Value:

; 467  :    {
; 468  :       comments_ = new CommentInfo[numberOfCommentPlacement];
; 469  :       for ( int comment =0; comment < numberOfCommentPlacement; ++comment )

	mov	rax, rsi
	mov	rbx, QWORD PTR [rsp+104]
	mov	rbp, QWORD PTR [rsp+112]
	add	rsp, 64					; 00000040H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
	npad	1
$LN37@Value:
	DD	$LN7@Value
	DD	$LN7@Value
	DD	$LN7@Value
	DD	$LN7@Value
	DD	$LN8@Value
	DD	$LN7@Value
	DD	$LN11@Value
	DD	$LN11@Value
??0Value@Json@@QEAA@AEBV01@@Z ENDP			; Json::Value::Value
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T9 = 48
$T7 = 96
$T1 = 96
this$ = 96
other$ = 104
?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA PROC	; `Json::Value::Value'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T1[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA ENDP	; `Json::Value::Value'::`1'::dtor$0
$T9 = 48
$T7 = 96
$T1 = 96
this$ = 96
other$ = 104
?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA PROC	; `Json::Value::Value'::`1'::dtor$1
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T7[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA ENDP	; `Json::Value::Value'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T9 = 48
$T7 = 96
$T1 = 96
this$ = 96
other$ = 104
?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA PROC	; `Json::Value::Value'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T1[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA ENDP	; `Json::Value::Value'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T9 = 48
$T7 = 96
$T1 = 96
this$ = 96
other$ = 104
?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA PROC	; `Json::Value::Value'::`1'::dtor$1
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T7[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA ENDP	; `Json::Value::Value'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_ECommentInfo@Value@Json@@QEAAPEAXI@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__flags$dead$ = 72
??_ECommentInfo@Value@Json@@QEAAPEAXI@Z PROC		; Json::Value::CommentInfo::`vector deleting destructor', COMDAT
$LN12:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T1[rsp], -2
	lea	rbx, QWORD PTR [rcx-8]
	lea	r9, OFFSET FLAT:??1CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::~CommentInfo
	mov	r8, QWORD PTR [rbx]
	mov	edx, 8
	call	??_M@YAXPEAX_K1P6AX0@Z@Z
	npad	1
	mov	rdx, QWORD PTR [rbx]
	lea	rdx, QWORD PTR [rdx*8+8]
	mov	rcx, rbx
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	npad	1
	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??_ECommentInfo@Value@Json@@QEAAPEAXI@Z ENDP		; Json::Value::CommentInfo::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1Value@Json@@QEAA@XZ
_TEXT	SEGMENT
$T29 = 32
$T7 = 80
this$ = 80
$T13 = 88
$T16 = 96
??1Value@Json@@QEAA@XZ PROC				; Json::Value::~Value, COMDAT

; 473  :             comments_[comment].setComment( otherComment.comment_ );

$LN106:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T29[rsp], -2
	mov	rdi, rcx

; 474  :       }

	movzx	eax, BYTE PTR [rcx+8]
	cmp	al, 4
	je	SHORT $LN5@Value
	sub	al, 6
	cmp	al, 1
	ja	$LN6@Value

; 485  :    case uintValue:
; 486  :    case realValue:
; 487  :    case booleanValue:
; 488  :       break;
; 489  :    case stringValue:

	mov	rsi, QWORD PTR [rcx]
	test	rsi, rsi
	je	$LN6@Value
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [rsi]
	mov	QWORD PTR $T7[rsp], rax

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rsi
	lea	rcx, QWORD PTR $T7[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
	npad	1

; 2113 : 		erase(begin(), end());

	mov	rbx, QWORD PTR $T7[rsp]

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [rsi]

; 42   : 		: _Ptr(_Pnode)

	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR $T13[rsp], rcx

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rsi
	lea	rcx, QWORD PTR $T13[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
	npad	1

; 2113 : 		erase(begin(), end());

	mov	r9, rbx
	mov	r8, QWORD PTR $T13[rsp]
	lea	rdx, QWORD PTR $T16[rsp]
	mov	rcx, rsi
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, QWORD PTR [rsi]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
	mov	edx, 16
	mov	rcx, rsi
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 490  :       if ( allocated_ )

	jmp	SHORT $LN6@Value
$LN5@Value:

; 475  :    }
; 476  : }
; 477  : 
; 478  : 
; 479  : Value::~Value()
; 480  : {
; 481  :    switch ( type_ )
; 482  :    {
; 483  :    case nullValue:

	test	DWORD PTR [rcx+8], 256			; 00000100H
	je	SHORT $LN6@Value

; 484  :    case intValue:

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rdi]
	call	QWORD PTR [rax+32]
	npad	1
$LN6@Value:

; 491  :          valueAllocator()->releaseStringValue( value_.string_ );
; 492  :       break;
; 493  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 494  :    case arrayValue:
; 495  :    case objectValue:
; 496  :       delete value_.map_;
; 497  :       break;
; 498  : #else
; 499  :    case arrayValue:
; 500  :       arrayAllocator()->destructArray( value_.array_ );
; 501  :       break;
; 502  :    case objectValue:
; 503  :       mapAllocator()->destructMap( value_.map_ );

	mov	rcx, QWORD PTR [rdi+16]
	test	rcx, rcx
	je	SHORT $LN13@Value
	lea	rbx, QWORD PTR [rcx-8]
	lea	r9, OFFSET FLAT:??1CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::~CommentInfo
	mov	r8, QWORD PTR [rbx]
	mov	edx, 8
	call	??_M@YAXPEAX_K1P6AX0@Z@Z
	npad	1
	mov	rdx, QWORD PTR [rbx]
	lea	rdx, QWORD PTR [rdx*8+8]
	mov	rcx, rbx
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	npad	1
$LN13@Value:

; 504  :       break;
; 505  : #endif

	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
??1Value@Json@@QEAA@XZ ENDP				; Json::Value::~Value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z
_TEXT	SEGMENT
$T23 = 32
$T4 = 64
this$ = 64
__flags$dead$ = 72
$T10 = 80
$T13 = 88
??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor', COMDAT
$LN81:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T23[rsp], -2
	mov	QWORD PTR [rsp+72], rbx
	mov	rdi, rcx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR $T4[rsp], rax

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rcx
	lea	rcx, QWORD PTR $T4[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
	npad	1

; 2113 : 		erase(begin(), end());

	mov	rbx, QWORD PTR $T4[rsp]

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [rdi]

; 42   : 		: _Ptr(_Pnode)

	mov	rdx, QWORD PTR [rax]
	mov	QWORD PTR $T10[rsp], rdx

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rdi
	lea	rcx, QWORD PTR $T10[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
	npad	1

; 2113 : 		erase(begin(), end());

	mov	r9, rbx
	mov	r8, QWORD PTR $T10[rsp]
	lea	rdx, QWORD PTR $T13[rsp]
	mov	rcx, rdi
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, QWORD PTR [rdi]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
	mov	edx, 16
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ
_TEXT	SEGMENT
$T23 = 32
$T4 = 64
this$ = 64
$T10 = 72
$T13 = 80
??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT
$LN77:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T23[rsp], -2
	mov	QWORD PTR [rsp+88], rbx
	mov	rdi, rcx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR $T4[rsp], rax

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rcx
	lea	rcx, QWORD PTR $T4[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
	npad	1

; 2113 : 		erase(begin(), end());

	mov	rbx, QWORD PTR $T4[rsp]

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [rdi]

; 42   : 		: _Ptr(_Pnode)

	mov	rdx, QWORD PTR [rax]
	mov	QWORD PTR $T10[rsp], rdx

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rdi
	lea	rcx, QWORD PTR $T10[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
	npad	1

; 2113 : 		erase(begin(), end());

	mov	r9, rbx
	mov	r8, QWORD PTR $T10[rsp]
	lea	rdx, QWORD PTR $T13[rsp]
	mov	rcx, rdi
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, QWORD PTR [rdi]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??4Value@Json@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
temp$ = 32
this$ = 80
other$ = 88
??4Value@Json@@QEAAAEAV01@AEBV01@@Z PROC		; Json::Value::operator=, COMDAT

; 509  : 

$LN16:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx

; 510  :    if ( comments_ )

	lea	rcx, QWORD PTR temp$[rsp]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value

; 518  :    swap( temp );

	movsx	edx, BYTE PTR [rbx+8]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility

; 68   : 	_Left = _STD move(_Right);

	mov	rcx, QWORD PTR temp$[rsp]
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 519  :    return *this;

	movzx	eax, BYTE PTR temp$[rsp+8]

; 520  : }

	xor	edx, DWORD PTR temp$[rsp+8]
	mov	BYTE PTR [rbx+8], al
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility

; 67   : 	_Ty _Tmp = _STD move(_Left);

	mov	rax, QWORD PTR [rbx]

; 68   : 	_Left = _STD move(_Right);

	mov	QWORD PTR [rbx], rcx
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 522  : void 

	mov	ecx, DWORD PTR [rbx+8]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility

; 69   : 	_Right = _STD move(_Tmp);

	mov	QWORD PTR temp$[rsp], rax
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 523  : Value::swap( Value &other )

	mov	eax, ecx
	movzx	r8d, dl
	xor	r8d, DWORD PTR temp$[rsp+8]
	xor	eax, r8d
	and	eax, 256				; 00000100H
	xor	eax, ecx

; 524  : {

	xor	ecx, r8d
	and	ecx, 256				; 00000100H
	mov	DWORD PTR [rbx+8], eax
	xor	ecx, r8d
	mov	DWORD PTR temp$[rsp+8], ecx

; 511  :       delete[] comments_;
; 512  : }

	lea	rcx, QWORD PTR temp$[rsp]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	mov	rax, rbx

; 513  : 

	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
??4Value@Json@@QEAAAEAV01@AEBV01@@Z ENDP		; Json::Value::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?swap@Value@Json@@QEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 8
other$ = 16
?swap@Value@Json@@QEAAXAEAV12@@Z PROC			; Json::Value::swap, COMDAT

; 518  :    swap( temp );
; 519  :    return *this;

	movzx	eax, BYTE PTR [rdx+8]
	movzx	r8d, BYTE PTR [rcx+8]
	mov	BYTE PTR [rcx+8], al

; 520  : }

	mov	BYTE PTR [rdx+8], r8b
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility

; 68   : 	_Left = _STD move(_Right);

	mov	r8, QWORD PTR [rdx]
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rcx], r8

; 69   : 	_Right = _STD move(_Tmp);

	mov	QWORD PTR [rdx], rax
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 522  : void 

	mov	r8d, DWORD PTR [rcx+8]

; 523  : Value::swap( Value &other )

	mov	eax, DWORD PTR [rdx+8]
	xor	eax, r8d
	and	eax, 256				; 00000100H
	xor	eax, r8d

; 524  : {

	and	r8d, 256				; 00000100H
	mov	DWORD PTR [rcx+8], eax
	and	DWORD PTR [rdx+8], -257			; fffffffffffffeffH
	or	DWORD PTR [rdx+8], r8d

; 525  :    ValueType temp = type_;

	ret	0
?swap@Value@Json@@QEAAXAEAV12@@Z ENDP			; Json::Value::swap
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T2 = 32
this$ = 80
__$ReturnUdt$ = 88
?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Json::Value::asString, COMDAT

; 686  :    JSON_ASSERT( type_ == stringValue );

$LN20:
	push	rbx
	sub	rsp, 64					; 00000040H

; 687  :    return value_.string_;

	movsx	rax, BYTE PTR [rcx+8]
	mov	rbx, rdx
	cmp	eax, 7
	ja	SHORT $LN8@asString
	lea	rdx, OFFSET FLAT:__ImageBase
	mov	r8d, DWORD PTR $LN15@asString[rdx+rax*4]
	add	r8, rdx
	jmp	r8
$LN5@asString:

; 688  : }
; 689  : 
; 690  : 
; 691  : std::string 
; 692  : Value::asString() const

	mov	rax, QWORD PTR [rcx]
	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	test	rax, rax

; 705  :    case arrayValue:

	mov	rcx, rbx
	cmovne	rdx, rax
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
$LN6@asString:

; 693  : {
; 694  :    switch ( type_ )

	cmp	BYTE PTR [rcx], 0
	lea	rax, OFFSET FLAT:??_C@_04LOAJBDKD@true@
	lea	rdx, OFFSET FLAT:??_C@_05LAPONLG@false@

; 705  :    case arrayValue:

	mov	rcx, rbx
	cmovne	rdx, rax
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
$LN8@asString:

; 701  :       return value_.bool_ ? "true" : "false";
; 702  :    case intValue:
; 703  :    case uintValue:
; 704  :    case realValue:

	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@

; 705  :    case arrayValue:

	mov	rcx, rbx
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
$LN7@asString:

; 695  :    {
; 696  :    case nullValue:
; 697  :       return "";
; 698  :    case stringValue:
; 699  :       return value_.string_ ? value_.string_ : "";
; 700  :    case booleanValue:

	lea	rdx, OFFSET FLAT:??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5stri@
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T2[rsp]
	call	_CxxThrowException
	int	3
$LN16@asString:
	npad	1
$LN15@asString:

; 705  :    case arrayValue:

	DD	$LN8@asString
	DD	$LN7@asString
	DD	$LN7@asString
	DD	$LN7@asString
	DD	$LN5@asString
	DD	$LN6@asString
	DD	$LN7@asString
	DD	$LN7@asString
?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Json::Value::asString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QEAAAEAV01@I@Z
_TEXT	SEGMENT
$T32 = 48
key$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
$T3 = 184
index$ = 184
$T2 = 192
$T31 = 192
$T21 = 192
??AValue@Json@@QEAAAEAV01@I@Z PROC			; Json::Value::operator[], COMDAT

; 976  :    value_.array_->resize( newSize );

$LN179:
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r14
	mov	rbp, rsp
	sub	rsp, 128				; 00000080H
	mov	QWORD PTR $T32[rbp-128], -2
	mov	edi, edx
	mov	rsi, rcx

; 977  : #endif
; 978  : }

	xor	r14d, r14d
	cmp	BYTE PTR [rcx+8], r14b
	jne	SHORT $LN2@operator

; 269  : // //////////////////////////////////////////////////////////////////

	mov	eax, DWORD PTR $T1[rbp-120]
	and	eax, -506				; fffffffffffffe06H

; 270  : 

	or	eax, 6
	mov	DWORD PTR $T1[rbp-120], eax

; 271  : /*! \internal Default constructor initialization must be equivalent to:

	mov	QWORD PTR $T1[rbp-112], r14

; 293  :       break;

	lea	ecx, QWORD PTR [r14+16]
	call	??2@YAPEAX_K@Z				; operator new
	mov	rbx, rax
	mov	QWORD PTR $T2[rbp-128], rax
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	lea	rcx, QWORD PTR $T3[rbp-128]
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

	mov	QWORD PTR [rbx], r14

; 469  : 		_Mysize(0)

	mov	QWORD PTR [rbx+8], r14

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	QWORD PTR [rbx], rax
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 293  :       break;

	mov	QWORD PTR $T1[rbp-128], rbx

; 979  : 

	lea	rdx, QWORD PTR $T1[rbp-128]
	mov	rcx, rsi
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1
	lea	rcx, QWORD PTR $T1[rbp-128]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
$LN2@operator:

; 175  : // //////////////////////////////////////////////////////////////////

	mov	QWORD PTR key$[rbp-128], r14

; 176  : # ifndef JSON_VALUE_USE_INTERNAL_MAP

	mov	DWORD PTR key$[rbp-120], edi

; 980  : 
; 981  : Value &
; 982  : Value::operator[]( UInt index )

	mov	r10, QWORD PTR [rsi]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 2045 : 		_Nodeptr _Wherenode = this->_Get_data()._Myhead;	// end() if search fails

	mov	r9, QWORD PTR [r10]

; 2046 : 		_Nodeptr _Pnode = _Wherenode->_Parent;

	mov	rdx, QWORD PTR [r9+8]

; 2047 : 
; 2048 : 		while (!_Pnode->_Isnil)

	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN63@operator
$LL62@operator:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rdx+32]
	test	rax, rax
	je	SHORT $LN88@operator

; 221  :    return *this;

	mov	r8, r14
	sub	r8, rax
$LL173@operator:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+r8]
	jne	SHORT $LN175@operator
	inc	rax
	test	cl, cl
	jne	SHORT $LL173@operator
	mov	eax, r14d
	shr	eax, 31
	jmp	SHORT $LN87@operator
$LN175@operator:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN87@operator
$LN88@operator:

; 222  : }

	cmp	DWORD PTR [rdx+40], edi
	setl	al
$LN87@operator:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 2050 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

	test	al, al
	je	SHORT $LN64@operator

; 2051 : 				{
; 2052 : 				_Pnode = _Pnode->_Right;	// descend right subtree

	mov	rdx, QWORD PTR [rdx+16]

; 2053 : 				}
; 2054 : 			else

	jmp	SHORT $LN65@operator
$LN64@operator:

; 2055 : 				{	// _Pnode not less than _Keyval, remember it
; 2056 : 				_Wherenode = _Pnode;

	mov	r9, rdx

; 2057 : 				_Pnode = _Pnode->_Left;	// descend left subtree

	mov	rdx, QWORD PTR [rdx]
$LN65@operator:

; 2047 : 
; 2048 : 		while (!_Pnode->_Isnil)

	cmp	BYTE PTR [rdx+25], 0
	je	SHORT $LL62@operator
$LN63@operator:

; 42   : 		: _Ptr(_Pnode)

	mov	QWORD PTR it$[rbp-128], r9

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, r10
	lea	rcx, QWORD PTR it$[rbp-128]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1015 : 		return (_Mypair._Get_second()._Get_second());

	mov	rdx, QWORD PTR [rsi]

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR $T21[rbp-128], rax

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T21[rbp-128]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 278  : 		return (this->_Ptr == _Right._Ptr);

	mov	rax, QWORD PTR it$[rbp-128]
	cmp	rax, QWORD PTR $T21[rbp-128]
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 983  : {

	je	SHORT $LN3@operator

; 228  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN121@operator

; 229  :    return index_ < other.index_;

	mov	r9, r14
	sub	r9, rcx
	npad	5
$LL171@operator:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN172@operator
	inc	rcx
	test	edx, edx
	jne	SHORT $LL171@operator
$LN172@operator:
	test	r8d, r8d
	jmp	SHORT $LN176@operator
$LN121@operator:

; 230  : }

	cmp	DWORD PTR [rax+40], edi
$LN176@operator:

; 983  : {

	sete	cl
	test	cl, cl
	je	SHORT $LN3@operator

; 984  :    JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );

	lea	rbx, QWORD PTR [rax+48]
	jmp	SHORT $LN162@operator
$LN3@operator:

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	mov	QWORD PTR defaultValue$[rbp-128], r14

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	mov	DWORD PTR defaultValue$[rbp-120], edi
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility

; 173  : 				second(_STD forward<_Other2>(_Val2))

	lea	rdx, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	lea	rcx, QWORD PTR defaultValue$[rbp-112]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 987  : #ifndef JSON_VALUE_USE_INTERNAL_MAP

	mov	rbx, QWORD PTR it$[rbp-128]
	mov	rdi, QWORD PTR [rsi]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1162 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	lea	rdx, QWORD PTR defaultValue$[rbp-128]
	mov	rcx, rdi
	call	??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

	lea	r9, QWORD PTR [rax+32]
	mov	QWORD PTR [rsp+32], rax
	mov	r8, rbx
	lea	rdx, QWORD PTR $T31[rbp-128]
	mov	rcx, rdi
	call	??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 987  : #ifndef JSON_VALUE_USE_INTERNAL_MAP

	mov	rax, QWORD PTR $T31[rbp-128]
	mov	QWORD PTR it$[rbp-128], rax

; 988  :    CZString key( index );

	lea	rbx, QWORD PTR [rax+48]
	lea	rcx, QWORD PTR defaultValue$[rbp-112]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR defaultValue$[rbp-128], 0
	je	SHORT $LN161@operator
	cmp	DWORD PTR defaultValue$[rbp-120], 1
	jne	SHORT $LN161@operator

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	r8, QWORD PTR [rcx]
	mov	rdx, QWORD PTR defaultValue$[rbp-128]
	call	QWORD PTR [r8+16]
	npad	1
$LN161@operator:
$LN162@operator:

; 988  :    CZString key( index );

	mov	rax, rbx

; 989  :    ObjectValues::iterator it = value_.map_->lower_bound( key );
; 990  :    if ( it != value_.map_->end()  &&  (*it).first == key )
; 991  :       return (*it).second;
; 992  : 

	add	rsp, 128				; 00000080H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
??AValue@Json@@QEAAAEAV01@I@Z ENDP			; Json::Value::operator[]
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T32 = 48
key$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
$T3 = 184
index$ = 184
$T2 = 192
$T31 = 192
$T21 = 192
?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$3
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$3
$T32 = 48
key$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
$T3 = 184
index$ = 184
$T2 = 192
$T31 = 192
$T21 = 192
?dtor$0@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$0@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$0
$T32 = 48
key$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
$T3 = 184
index$ = 184
$T2 = 192
$T31 = 192
$T21 = 192
?dtor$1@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$1
	lea	rcx, QWORD PTR key$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$1
$T32 = 48
key$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
$T3 = 184
index$ = 184
$T2 = 192
$T31 = 192
$T21 = 192
?dtor$7@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$7
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$7@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$7
$T32 = 48
key$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
$T3 = 184
index$ = 184
$T2 = 192
$T31 = 192
$T21 = 192
?dtor$2@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$2
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
?dtor$2@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T32 = 48
key$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
$T3 = 184
index$ = 184
$T2 = 192
$T31 = 192
$T21 = 192
?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$3
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T32 = 48
key$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
$T3 = 184
index$ = 184
$T2 = 192
$T31 = 192
$T21 = 192
?dtor$0@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$0@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T32 = 48
key$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
$T3 = 184
index$ = 184
$T2 = 192
$T31 = 192
$T21 = 192
?dtor$1@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$1
	lea	rcx, QWORD PTR key$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T32 = 48
key$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
$T3 = 184
index$ = 184
$T2 = 192
$T31 = 192
$T21 = 192
?dtor$7@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$7
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$7@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T32 = 48
key$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
$T3 = 184
index$ = 184
$T2 = 192
$T31 = 192
$T21 = 192
?dtor$2@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$2
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
?dtor$2@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ PROC ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>, COMDAT
$LN11:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T1[rsp], -2
	mov	rbx, rcx
	add	rcx, 16
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN7@pair
	cmp	DWORD PTR [rbx+8], 1
	jne	SHORT $LN7@pair

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+16]
	npad	1
$LN7@pair:
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QEAAAEAV01@PEBD@Z
_TEXT	SEGMENT
this$ = 8
key$ = 16
??AValue@Json@@QEAAAEAV01@PEBD@Z PROC			; Json::Value::operator[], COMDAT

; 1017 : #endif

	jmp	?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z ; Json::Value::resolveReference
??AValue@Json@@QEAAAEAV01@PEBD@Z ENDP			; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z
_TEXT	SEGMENT
$T32 = 48
actualKey$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
$T3 = 192
$T2 = 200
$T31 = 200
$T21 = 200
?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z PROC	; Json::Value::resolveReference, COMDAT

; 1024 :    return resolveReference( key, false );

$LN181:
	mov	BYTE PTR [rsp+24], r8b
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r14
	mov	rbp, rsp
	sub	rsp, 128				; 00000080H
	mov	QWORD PTR $T32[rbp-128], -2
	mov	rdi, rdx
	mov	r14, rcx

; 1025 : }
; 1026 : 

	xor	esi, esi
	cmp	BYTE PTR [rcx+8], sil
	jne	SHORT $LN2@resolveRef

; 269  : // //////////////////////////////////////////////////////////////////

	mov	eax, DWORD PTR $T1[rbp-120]
	and	eax, -505				; fffffffffffffe07H

; 270  : 

	or	eax, 7
	mov	DWORD PTR $T1[rbp-120], eax

; 271  : /*! \internal Default constructor initialization must be equivalent to:

	mov	QWORD PTR $T1[rbp-112], rsi

; 293  :       break;

	lea	ecx, QWORD PTR [rsi+16]
	call	??2@YAPEAX_K@Z				; operator new
	mov	rbx, rax
	mov	QWORD PTR $T2[rbp-128], rax
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	lea	rcx, QWORD PTR $T3[rbp-128]
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

	mov	QWORD PTR [rbx], rsi

; 469  : 		_Mysize(0)

	mov	QWORD PTR [rbx+8], rsi

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	QWORD PTR [rbx], rax
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 293  :       break;

	mov	QWORD PTR $T1[rbp-128], rbx

; 1027 : 

	lea	rdx, QWORD PTR $T1[rbp-128]
	mov	rcx, r14
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1
	lea	rcx, QWORD PTR $T1[rbp-128]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
$LN2@resolveRef:

; 181  : Value::CZString::CZString( int index )

	mov	QWORD PTR actualKey$[rbp-128], rdi

; 182  :    : cstr_( 0 )
; 183  :    , index_( index )

	mov	DWORD PTR actualKey$[rbp-120], 2

; 1028 : Value &
; 1029 : Value::resolveReference( const char *key, 
; 1030 :                          bool isStatic )
; 1031 : {

	mov	r10, QWORD PTR [r14]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 2045 : 		_Nodeptr _Wherenode = this->_Get_data()._Myhead;	// end() if search fails

	mov	r9, QWORD PTR [r10]

; 2046 : 		_Nodeptr _Pnode = _Wherenode->_Parent;

	mov	rdx, QWORD PTR [r9+8]

; 2047 : 
; 2048 : 		while (!_Pnode->_Isnil)

	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN65@resolveRef
	npad	7
$LL64@resolveRef:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rdx+32]
	test	rax, rax
	je	SHORT $LN90@resolveRef

; 221  :    return *this;

	mov	r8, rdi
	sub	r8, rax
	npad	1
$LL175@resolveRef:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+r8]
	jne	SHORT $LN177@resolveRef
	inc	rax
	test	cl, cl
	jne	SHORT $LL175@resolveRef
	mov	eax, esi
	shr	eax, 31
	jmp	SHORT $LN89@resolveRef
$LN177@resolveRef:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN89@resolveRef
$LN90@resolveRef:

; 222  : }

	cmp	DWORD PTR [rdx+40], 2
	setl	al
$LN89@resolveRef:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 2050 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

	test	al, al
	je	SHORT $LN66@resolveRef

; 2051 : 				{
; 2052 : 				_Pnode = _Pnode->_Right;	// descend right subtree

	mov	rdx, QWORD PTR [rdx+16]

; 2053 : 				}
; 2054 : 			else

	jmp	SHORT $LN67@resolveRef
$LN66@resolveRef:

; 2055 : 				{	// _Pnode not less than _Keyval, remember it
; 2056 : 				_Wherenode = _Pnode;

	mov	r9, rdx

; 2057 : 				_Pnode = _Pnode->_Left;	// descend left subtree

	mov	rdx, QWORD PTR [rdx]
$LN67@resolveRef:

; 2047 : 
; 2048 : 		while (!_Pnode->_Isnil)

	cmp	BYTE PTR [rdx+25], 0
	je	SHORT $LL64@resolveRef
$LN65@resolveRef:

; 42   : 		: _Ptr(_Pnode)

	mov	QWORD PTR it$[rbp-128], r9

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, r10
	lea	rcx, QWORD PTR it$[rbp-128]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1015 : 		return (_Mypair._Get_second()._Get_second());

	mov	rdx, QWORD PTR [r14]

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR $T21[rbp-128], rax

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T21[rbp-128]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 278  : 		return (this->_Ptr == _Right._Ptr);

	mov	rax, QWORD PTR it$[rbp-128]
	cmp	rax, QWORD PTR $T21[rbp-128]
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1032 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );

	je	SHORT $LN3@resolveRef

; 228  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN123@resolveRef

; 229  :    return index_ < other.index_;

	mov	r9, rdi
	sub	r9, rcx
	npad	6
$LL173@resolveRef:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN174@resolveRef
	inc	rcx
	test	edx, edx
	jne	SHORT $LL173@resolveRef
$LN174@resolveRef:
	test	r8d, r8d
	jmp	SHORT $LN178@resolveRef
$LN123@resolveRef:

; 230  : }

	cmp	DWORD PTR [rax+40], 2
$LN178@resolveRef:

; 1032 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );

	sete	cl
	test	cl, cl
	je	SHORT $LN3@resolveRef

; 1033 :    if ( type_ == nullValue )

	lea	rbx, QWORD PTR [rax+48]
	jmp	$LN164@resolveRef
$LN3@resolveRef:

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	test	rdi, rdi
	je	SHORT $LN142@resolveRef
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, rdi
	call	QWORD PTR [rax+8]
	mov	rsi, rax
$LN142@resolveRef:
	mov	QWORD PTR defaultValue$[rbp-128], rsi

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	neg	rdi
	sbb	eax, eax
	add	eax, 2
	mov	DWORD PTR defaultValue$[rbp-120], eax
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility

; 173  : 				second(_STD forward<_Other2>(_Val2))

	lea	rdx, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	lea	rcx, QWORD PTR defaultValue$[rbp-112]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1036 :    CZString actualKey( key, isStatic ? CZString::noDuplication 

	mov	rbx, QWORD PTR it$[rbp-128]
	mov	rdi, QWORD PTR [r14]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1162 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	lea	rdx, QWORD PTR defaultValue$[rbp-128]
	mov	rcx, rdi
	call	??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

	lea	r9, QWORD PTR [rax+32]
	mov	QWORD PTR [rsp+32], rax
	mov	r8, rbx
	lea	rdx, QWORD PTR $T31[rbp-128]
	mov	rcx, rdi
	call	??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1036 :    CZString actualKey( key, isStatic ? CZString::noDuplication 

	mov	rax, QWORD PTR $T31[rbp-128]
	mov	QWORD PTR it$[rbp-128], rax

; 1037 :                                      : CZString::duplicateOnCopy );

	lea	rbx, QWORD PTR [rax+48]
	lea	rcx, QWORD PTR defaultValue$[rbp-112]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR defaultValue$[rbp-128], 0
	je	SHORT $LN163@resolveRef
	cmp	DWORD PTR defaultValue$[rbp-120], 1
	jne	SHORT $LN163@resolveRef

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	r8, QWORD PTR [rcx]
	mov	rdx, QWORD PTR defaultValue$[rbp-128]
	call	QWORD PTR [r8+16]
	npad	1
$LN163@resolveRef:
$LN164@resolveRef:

; 1038 :    ObjectValues::iterator it = value_.map_->lower_bound( actualKey );

	mov	rax, rbx

; 1039 :    if ( it != value_.map_->end()  &&  (*it).first == actualKey )
; 1040 :       return (*it).second;
; 1041 : 
; 1042 :    ObjectValues::value_type defaultValue( actualKey, null );

	add	rsp, 128				; 00000080H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z ENDP	; Json::Value::resolveReference
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T32 = 48
actualKey$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
$T3 = 192
$T2 = 200
$T31 = 200
$T21 = 200
?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$3
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$3
$T32 = 48
actualKey$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
$T3 = 192
$T2 = 200
$T31 = 200
$T21 = 200
?dtor$0@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$0@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$0
$T32 = 48
actualKey$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
$T3 = 192
$T2 = 200
$T31 = 200
$T21 = 200
?dtor$1@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$1
	lea	rcx, QWORD PTR actualKey$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$1
$T32 = 48
actualKey$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
$T3 = 192
$T2 = 200
$T31 = 200
$T21 = 200
?dtor$7@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$7
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$7@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$7
$T32 = 48
actualKey$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
$T3 = 192
$T2 = 200
$T31 = 200
$T21 = 200
?dtor$2@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$2
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
?dtor$2@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T32 = 48
actualKey$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
$T3 = 192
$T2 = 200
$T31 = 200
$T21 = 200
?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$3
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T32 = 48
actualKey$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
$T3 = 192
$T2 = 200
$T31 = 200
$T21 = 200
?dtor$0@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$0@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T32 = 48
actualKey$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
$T3 = 192
$T2 = 200
$T31 = 200
$T21 = 200
?dtor$1@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$1
	lea	rcx, QWORD PTR actualKey$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T32 = 48
actualKey$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
$T3 = 192
$T2 = 200
$T31 = 200
$T21 = 200
?dtor$7@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$7
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$7@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T32 = 48
actualKey$ = 56
$T1 = 56
defaultValue$ = 80
it$ = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
$T3 = 192
$T2 = 200
$T31 = 200
$T21 = 200
?dtor$2@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$2
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
?dtor$2@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isValidIndex@Value@Json@@QEBA_NI@Z
_TEXT	SEGMENT
this$ = 48
index$ = 56
?isValidIndex@Value@Json@@QEBA_NI@Z PROC		; Json::Value::isValidIndex, COMDAT

; 1056 :    const Value *value = &((*this)[index]);

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	ebx, edx

; 1057 :    return value == &null ? defaultValue : *value;

	call	?size@Value@Json@@QEBAIXZ		; Json::Value::size
	cmp	ebx, eax
	setb	al

; 1058 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?isValidIndex@Value@Json@@QEBA_NI@Z ENDP		; Json::Value::isValidIndex
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QEBAAEBV01@PEBD@Z
_TEXT	SEGMENT
$T9 = 32
actualKey$ = 40
$T5 = 80
$T1 = 80
this$ = 80
key$ = 88
??AValue@Json@@QEBAAEBV01@PEBD@Z PROC			; Json::Value::operator[], COMDAT

; 1064 :    return index < size();

$LN41:
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	QWORD PTR $T9[rsp], -2
	mov	QWORD PTR [rsp+88], rbx
	mov	rdi, rcx

; 1065 : }
; 1066 : 

	cmp	BYTE PTR [rcx+8], 0
	jne	SHORT $LN2@operator

; 1067 : 

	lea	rax, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null

; 1074 :       return null;
; 1075 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1076 :    CZString actualKey( key, CZString::noDuplication );
; 1077 :    ObjectValues::const_iterator it = value_.map_->find( actualKey );
; 1078 :    if ( it == value_.map_->end() )

	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN2@operator:

; 181  : Value::CZString::CZString( int index )

	mov	QWORD PTR actualKey$[rsp], rdx

; 182  :    : cstr_( 0 )
; 183  :    , index_( index )

	mov	DWORD PTR actualKey$[rsp+8], 0

; 1068 : 
; 1069 : const Value &
; 1070 : Value::operator[]( const char *key ) const

	lea	r8, QWORD PTR actualKey$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
	mov	rbx, QWORD PTR [rax]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1015 : 		return (_Mypair._Get_second()._Get_second());

	mov	rdx, QWORD PTR [rdi]

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR $T5[rsp], rax

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T5[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 278  : 		return (this->_Ptr == _Right._Ptr);

	cmp	rbx, QWORD PTR $T5[rsp]
	lea	rax, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1071 : {

	je	SHORT $LN6@operator

; 1072 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );
; 1073 :    if ( type_ == nullValue )

	lea	rax, QWORD PTR [rbx+48]
$LN6@operator:

; 1074 :       return null;
; 1075 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1076 :    CZString actualKey( key, CZString::noDuplication );
; 1077 :    ObjectValues::const_iterator it = value_.map_->find( actualKey );
; 1078 :    if ( it == value_.map_->end() )

	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??AValue@Json@@QEBAAEBV01@PEBD@Z ENDP			; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
this$ = 48
key$ = 56
??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::operator[], COMDAT

; 1083 :    return value ? *value : null;

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 1084 : #endif

	mov	rcx, rdx
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str

; 1017 : #endif

	mov	rdx, rax
	mov	rcx, rbx

; 1085 : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 1017 : #endif

	jmp	?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z ; Json::Value::resolveReference
??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?append@Value@Json@@QEAAAEAV12@AEBV12@@Z
_TEXT	SEGMENT
this$ = 48
value$ = 56
?append@Value@Json@@QEAAAEAV12@AEBV12@@Z PROC		; Json::Value::append, COMDAT

; 1119 :    return (*this)[ key.c_str() ];

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx

; 1120 : }

	call	?size@Value@Json@@QEBAIXZ		; Json::Value::size
	mov	edx, eax
	mov	rcx, rbx
	call	??AValue@Json@@QEAAAEAV01@I@Z		; Json::Value::operator[]
	mov	rcx, rax
	mov	rdx, rdi

; 1121 : # endif

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 1120 : }

	jmp	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
?append@Value@Json@@QEAAAEAV12@AEBV12@@Z ENDP		; Json::Value::append
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isMember@Value@Json@@QEBA_NPEBD@Z
_TEXT	SEGMENT
this$ = 48
key$ = 56
?isMember@Value@Json@@QEBA_NPEBD@Z PROC			; Json::Value::isMember, COMDAT

; 1183 : {

$LN4:
	sub	rsp, 40					; 00000028H

; 1184 :    return get( key.c_str(), defaultValue );

	call	??AValue@Json@@QEBAAEBV01@PEBD@Z	; Json::Value::operator[]

; 1185 : }

	lea	rcx, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	cmp	rax, rcx
	setne	al

; 1186 : # endif

	add	rsp, 40					; 00000028H
	ret	0
?isMember@Value@Json@@QEBA_NPEBD@Z ENDP			; Json::Value::isMember
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
this$ = 48
key$ = 56
?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::isMember, COMDAT

; 1191 :    const Value *value = &((*this)[key]);

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 1192 :    return value != &null;

	mov	rcx, rdx
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str

; 1184 :    return get( key.c_str(), defaultValue );

	mov	rdx, rax
	mov	rcx, rbx
	call	??AValue@Json@@QEBAAEBV01@PEBD@Z	; Json::Value::operator[]

; 1185 : }

	lea	rcx, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	cmp	rax, rcx
	setne	al

; 1193 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::isMember
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isBool@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isBool@Value@Json@@QEBA_NXZ PROC			; Json::Value::isBool, COMDAT

; 1264 :    return type_ == nullValue;

	cmp	BYTE PTR [rcx+8], 5
	sete	al

; 1265 : }

	ret	0
?isBool@Value@Json@@QEBA_NXZ ENDP			; Json::Value::isBool
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isInt@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isInt@Value@Json@@QEBA_NXZ PROC			; Json::Value::isInt, COMDAT

; 1271 :    return type_ == booleanValue;

	cmp	BYTE PTR [rcx+8], 1
	sete	al

; 1272 : }

	ret	0
?isInt@Value@Json@@QEBA_NXZ ENDP			; Json::Value::isInt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isDouble@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isDouble@Value@Json@@QEBA_NXZ PROC			; Json::Value::isDouble, COMDAT

; 1294 :           ||  type_ == booleanValue;

	cmp	BYTE PTR [rcx+8], 3
	sete	al

; 1295 : }

	ret	0
?isDouble@Value@Json@@QEBA_NXZ ENDP			; Json::Value::isDouble
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isString@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isString@Value@Json@@QEBA_NXZ PROC			; Json::Value::isString, COMDAT

; 1308 :    return isIntegral() || isDouble();

	cmp	BYTE PTR [rcx+8], 4
	sete	al

; 1309 : }

	ret	0
?isString@Value@Json@@QEBA_NXZ ENDP			; Json::Value::isString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z
_TEXT	SEGMENT
$T3 = 48
$T1 = 80
this$ = 80
comment$ = 88
placement$ = 96
?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z PROC ; Json::Value::setComment, COMDAT

; 1329 :    return type_ == nullValue  ||  type_ == objectValue;

$LN9:
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	QWORD PTR $T3[rsp], -2
	mov	QWORD PTR [rsp+88], rbx
	mov	QWORD PTR [rsp+96], rbp
	mov	QWORD PTR [rsp+104], rsi
	movsxd	rsi, r8d
	mov	rbp, rdx
	mov	rdi, rcx

; 1330 : }

	mov	rbx, QWORD PTR [rcx+16]
	test	rbx, rbx
	jne	SHORT $LN2@setComment

; 1331 : 

	lea	ecx, QWORD PTR [rbx+32]
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T1[rsp], rax
	test	rax, rax
	je	SHORT $LN4@setComment
	mov	QWORD PTR [rax], 3
	lea	rbx, QWORD PTR [rax+8]
	lea	rax, OFFSET FLAT:??1CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::~CommentInfo
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:??0CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::CommentInfo
	mov	edx, 8
	lea	r8d, QWORD PTR [rdx-5]
	mov	rcx, rbx
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	jmp	SHORT $LN5@setComment
$LN4@setComment:
	xor	ebx, ebx
$LN5@setComment:
	mov	QWORD PTR [rdi+16], rbx
$LN2@setComment:

; 1332 : 

	lea	rcx, QWORD PTR [rbx+rsi*8]
	mov	rdx, rbp

; 1333 : void 

	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 64					; 00000040H
	pop	rdi

; 1332 : 

	jmp	?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z ; Json::Value::CommentInfo::setComment
?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z ENDP ; Json::Value::setComment
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T3 = 48
$T1 = 80
this$ = 80
comment$ = 88
placement$ = 96
?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA PROC ; `Json::Value::setComment'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T1[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA ENDP ; `Json::Value::setComment'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 48
$T1 = 80
this$ = 80
comment$ = 88
placement$ = 96
?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA PROC ; `Json::Value::setComment'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T1[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA ENDP ; `Json::Value::setComment'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
_TEXT	SEGMENT
$T3 = 48
$T1 = 80
this$ = 80
comment$ = 88
placement$ = 96
?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z PROC ; Json::Value::setComment, COMDAT

; 1339 :    comments_[placement].setComment( comment );

$LN11:
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	QWORD PTR $T3[rsp], -2
	mov	QWORD PTR [rsp+88], rbx
	mov	QWORD PTR [rsp+96], rbp
	mov	QWORD PTR [rsp+104], rsi
	movsxd	rsi, r8d
	mov	rdi, rcx

; 1340 : }

	mov	rcx, rdx
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rbp, rax

; 1330 : }

	mov	rbx, QWORD PTR [rdi+16]
	test	rbx, rbx
	jne	SHORT $LN4@setComment

; 1331 : 

	lea	ecx, QWORD PTR [rbx+32]
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T1[rsp], rax
	test	rax, rax
	je	SHORT $LN6@setComment
	mov	QWORD PTR [rax], 3
	lea	rbx, QWORD PTR [rax+8]
	lea	rax, OFFSET FLAT:??1CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::~CommentInfo
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:??0CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::CommentInfo
	mov	edx, 8
	lea	r8d, QWORD PTR [rdx-5]
	mov	rcx, rbx
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	jmp	SHORT $LN7@setComment
$LN6@setComment:
	xor	ebx, ebx
$LN7@setComment:
	mov	QWORD PTR [rdi+16], rbx
$LN4@setComment:

; 1332 : 

	lea	rcx, QWORD PTR [rbx+rsi*8]
	mov	rdx, rbp

; 1341 : 

	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 64					; 00000040H
	pop	rdi

; 1332 : 

	jmp	?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z ; Json::Value::CommentInfo::setComment
?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ENDP ; Json::Value::setComment
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T3 = 48
$T1 = 80
this$ = 80
comment$ = 88
placement$ = 96
?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA PROC ; `Json::Value::setComment'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T1[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA ENDP ; `Json::Value::setComment'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 48
$T1 = 80
this$ = 80
comment$ = 88
placement$ = 96
?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA PROC ; `Json::Value::setComment'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T1[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA ENDP ; `Json::Value::setComment'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator!=, COMDAT

; 283  : 		return (!(*this == _Right));

	mov	rax, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx], rax
	setne	al

; 284  : 		}

	ret	0
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator==, COMDAT

; 274  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 275  : 		_STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");
; 276  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 277  : 
; 278  : 		return (this->_Ptr == _Right._Ptr);

	mov	rax, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx], rax
	sete	al

; 279  : 		}

	ret	0
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator--, COMDAT

; 86   : 		if (_Ptr->_Isnil)

	mov	rdx, QWORD PTR [rcx]

; 252  : 		{	// predecrement

	mov	r8, rcx

; 86   : 		if (_Ptr->_Isnil)

	cmp	BYTE PTR [rdx+25], 0
	je	SHORT $LN6@operator

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx], rax

; 253  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 254  : 		--static_cast<_Mybase&>(*this);
; 255  :  #else /* ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv */
; 256  : 		_STL_ASSERT(this->_Getcont(), "cannot decrement value-initialized map/set iterator");
; 257  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 258  : 		--static_cast<_Mybase&>(*this);
; 259  : 		_STL_VERIFY(_Ptrsav != this->_Ptr, "cannot decrement begin map/set iterator");
; 260  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 261  : 
; 262  : 		return (*this);
; 263  : 		}

	mov	rax, rcx
	ret	0
$LN6@operator:

; 90   : 		else if (_Ptr->_Left->_Isnil)

	mov	rcx, QWORD PTR [rdx]
	cmp	BYTE PTR [rcx+25], 0
	je	SHORT $LN8@operator

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

	mov	rax, QWORD PTR [rdx+8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN5@operator
	mov	rcx, rdx
	mov	r9, rdx
$LL4@operator:
	mov	r10, rax
	mov	r11, rax
	mov	rdx, r9
	cmp	rcx, QWORD PTR [rax]
	jne	SHORT $LN5@operator
	mov	rcx, rax

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

	mov	QWORD PTR [r8], rax
	mov	rax, QWORD PTR [rax+8]
	mov	r9, rcx
	mov	rdx, rcx
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL4@operator
$LN5@operator:

; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)

	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN26@operator

; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head

	mov	QWORD PTR [r8], rax

; 253  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 254  : 		--static_cast<_Mybase&>(*this);
; 255  :  #else /* ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv */
; 256  : 		_STL_ASSERT(this->_Getcont(), "cannot decrement value-initialized map/set iterator");
; 257  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 258  : 		--static_cast<_Mybase&>(*this);
; 259  : 		_STL_VERIFY(_Ptrsav != this->_Ptr, "cannot decrement begin map/set iterator");
; 260  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 261  : 
; 262  : 		return (*this);
; 263  : 		}

	mov	rax, r8
	ret	0
$LN8@operator:

; 479  : 		while (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN14@operator
	npad	5
$LL13@operator:

; 480  : 			_Pnode = _Pnode->_Right;

	mov	rcx, rax
	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL13@operator
$LN14@operator:

; 105  : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree

	mov	QWORD PTR [r8], rcx
$LN26@operator:

; 253  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 254  : 		--static_cast<_Mybase&>(*this);
; 255  :  #else /* ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv */
; 256  : 		_STL_ASSERT(this->_Getcont(), "cannot decrement value-initialized map/set iterator");
; 257  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 258  : 		--static_cast<_Mybase&>(*this);
; 259  : 		_STL_VERIFY(_Ptrsav != this->_Ptr, "cannot decrement begin map/set iterator");
; 260  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 261  : 
; 262  : 		return (*this);
; 263  : 		}

	mov	rax, r8
	ret	0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++, COMDAT

; 59   : 		if (_Ptr->_Right->_Isnil)

	mov	rdx, QWORD PTR [rcx]

; 234  : 		{	// preincrement

	mov	r8, rcx

; 59   : 		if (_Ptr->_Right->_Isnil)

	mov	r9, QWORD PTR [rdx+16]
	cmp	BYTE PTR [r9+25], 0
	je	SHORT $LN6@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

	mov	rax, QWORD PTR [rdx+8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN5@operator
	npad	5
$LL4@operator:
	cmp	rdx, QWORD PTR [rax+16]
	jne	SHORT $LN5@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	QWORD PTR [rcx], rax
	mov	rdx, rax
	mov	rax, QWORD PTR [rax+8]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL4@operator
$LN5@operator:

; 235  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 236  : 		_STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");
; 237  : 		_STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 239  : 
; 240  : 		++static_cast<_Mybase&>(*this);
; 241  : 		return (*this);

	mov	QWORD PTR [rcx], rax

; 242  : 		}

	mov	rax, r8
	ret	0
$LN6@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rcx, QWORD PTR [r9]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN11@operator
	npad	10
$LL10@operator:
	mov	rax, QWORD PTR [rcx]

; 487  : 			_Pnode = _Pnode->_Left;

	mov	r9, rcx
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL10@operator
$LN11@operator:

; 235  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 236  : 		_STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");
; 237  : 		_STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 239  : 
; 240  : 		++static_cast<_Mybase&>(*this);
; 241  : 		return (*this);

	mov	QWORD PTR [r8], r9

; 242  : 		}

	mov	rax, r8
	ret	0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ
_TEXT	SEGMENT
this$ = 8
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*, COMDAT

; 219  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 220  : 		const auto _Mycont = static_cast<const _Mytree *>(this->_Getcont());
; 221  : 		_STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");
; 222  : 		_STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");
; 223  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 224  : 
; 225  : 		return (this->_Ptr->_Myval);

	mov	rax, QWORD PTR [rcx]
	add	rax, 32					; 00000020H

; 226  : 		}

	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator--, COMDAT

; 86   : 		if (_Ptr->_Isnil)

	mov	rdx, QWORD PTR [rcx]

; 354  : 		{	// predecrement

	mov	r8, rcx

; 86   : 		if (_Ptr->_Isnil)

	cmp	BYTE PTR [rdx+25], 0
	je	SHORT $LN8@operator

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx], rax

; 355  : 		--static_cast<_Mybase&>(*this);
; 356  : 		return (*this);
; 357  : 		}

	mov	rax, rcx
	ret	0
$LN8@operator:

; 90   : 		else if (_Ptr->_Left->_Isnil)

	mov	rcx, QWORD PTR [rdx]
	cmp	BYTE PTR [rcx+25], 0
	je	SHORT $LN10@operator

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

	mov	rax, QWORD PTR [rdx+8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN7@operator
	mov	rcx, rdx
	mov	r9, rdx
$LL6@operator:
	mov	r10, rax
	mov	r11, rax
	mov	rdx, r9
	cmp	rcx, QWORD PTR [rax]
	jne	SHORT $LN7@operator
	mov	rcx, rax

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

	mov	QWORD PTR [r8], rax
	mov	rax, QWORD PTR [rax+8]
	mov	r9, rcx
	mov	rdx, rcx
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL6@operator
$LN7@operator:

; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)

	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN28@operator

; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head

	mov	QWORD PTR [r8], rax

; 355  : 		--static_cast<_Mybase&>(*this);
; 356  : 		return (*this);
; 357  : 		}

	mov	rax, r8
	ret	0
$LN10@operator:

; 479  : 		while (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN16@operator
	npad	5
$LL15@operator:

; 480  : 			_Pnode = _Pnode->_Right;

	mov	rcx, rax
	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL15@operator
$LN16@operator:

; 105  : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree

	mov	QWORD PTR [r8], rcx
$LN28@operator:

; 355  : 		--static_cast<_Mybase&>(*this);
; 356  : 		return (*this);
; 357  : 		}

	mov	rax, r8
	ret	0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ
_TEXT	SEGMENT
this$ = 8
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*, COMDAT

; 225  : 		return (this->_Ptr->_Myval);

	mov	rax, QWORD PTR [rcx]
	add	rax, 32					; 00000020H

; 332  : 		return ((reference)**(_Mybase *)this);
; 333  : 		}

	ret	0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_Keyval$ = 64
?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound, COMDAT

; 1480 : 		{	// find leftmost node not less than _Keyval in mutable tree

$LN54:
	push	rbx
	sub	rsp, 32					; 00000020H

; 2045 : 		_Nodeptr _Wherenode = this->_Get_data()._Myhead;	// end() if search fails

	mov	r10, QWORD PTR [rcx]

; 1480 : 		{	// find leftmost node not less than _Keyval in mutable tree

	mov	rbx, rdx
	mov	r11, rcx

; 2046 : 		_Nodeptr _Pnode = _Wherenode->_Parent;

	mov	r9, QWORD PTR [r10+8]

; 2047 : 
; 2048 : 		while (!_Pnode->_Isnil)

	cmp	BYTE PTR [r9+25], 0
	jne	SHORT $LN13@lower_boun
	npad	6
$LL12@lower_boun:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r9+32]
	test	rax, rax
	je	SHORT $LN38@lower_boun

; 221  :    return *this;

	mov	rdx, QWORD PTR [r8]
	sub	rdx, rax
	npad	1
$LL49@lower_boun:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN51@lower_boun
	inc	rax
	test	cl, cl
	jne	SHORT $LL49@lower_boun
	xor	eax, eax
	shr	eax, 31
	jmp	SHORT $LN37@lower_boun
$LN51@lower_boun:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN37@lower_boun
$LN38@lower_boun:

; 222  : }

	mov	eax, DWORD PTR [r8+8]
	cmp	DWORD PTR [r9+40], eax
	setl	al
$LN37@lower_boun:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 2050 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

	test	al, al
	je	SHORT $LN14@lower_boun

; 2051 : 				{
; 2052 : 				_Pnode = _Pnode->_Right;	// descend right subtree

	mov	r9, QWORD PTR [r9+16]

; 2053 : 				}
; 2054 : 			else

	jmp	SHORT $LN15@lower_boun
$LN14@lower_boun:

; 2055 : 				{	// _Pnode not less than _Keyval, remember it
; 2056 : 				_Wherenode = _Pnode;

	mov	r10, r9

; 2057 : 				_Pnode = _Pnode->_Left;	// descend left subtree

	mov	r9, QWORD PTR [r9]
$LN15@lower_boun:

; 2047 : 
; 2048 : 		while (!_Pnode->_Isnil)

	cmp	BYTE PTR [r9+25], 0
	je	SHORT $LL12@lower_boun
$LN13@lower_boun:

; 44   : 		this->_Adopt(_Plist);

	mov	rdx, r11
	mov	QWORD PTR [rbx], r10
	mov	rcx, rbx
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1481 : 		return (iterator(_Lbound(_Keyval), _STD addressof(this->_Get_data())));

	mov	rax, rbx

; 1482 : 		}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z
_TEXT	SEGMENT
_Where$ = 64
this$ = 64
$T14 = 72
__$ReturnUdt$ = 72
_Keyval$ = 80
$T24 = 88
?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find, COMDAT

; 1423 : 		{	// find an element in mutable sequence that matches _Keyval

$LN111:
	mov	QWORD PTR [rsp+24], rbx
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rdi, r8

; 2048 : 		while (!_Pnode->_Isnil)

	xor	ebx, ebx
	mov	r8, QWORD PTR [rcx]

; 1423 : 		{	// find an element in mutable sequence that matches _Keyval

	mov	rsi, rdx
	mov	r14, rcx

; 2046 : 		_Nodeptr _Pnode = _Wherenode->_Parent;

	mov	r9, QWORD PTR [r8+8]

; 2047 : 
; 2048 : 		while (!_Pnode->_Isnil)

	cmp	BYTE PTR [r9+25], bl
	jne	SHORT $LN17@find
$LL16@find:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r9+32]
	test	rax, rax
	je	SHORT $LN42@find

; 221  :    return *this;

	mov	rdx, QWORD PTR [rdi]
	sub	rdx, rax
$LL105@find:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN107@find
	inc	rax
	test	cl, cl
	jne	SHORT $LL105@find
	mov	eax, ebx
	shr	eax, 31
	jmp	SHORT $LN41@find
$LN107@find:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN41@find
$LN42@find:

; 222  : }

	mov	eax, DWORD PTR [rdi+8]
	cmp	DWORD PTR [r9+40], eax
	setl	al
$LN41@find:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 2050 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

	test	al, al
	je	SHORT $LN18@find

; 2051 : 				{
; 2052 : 				_Pnode = _Pnode->_Right;	// descend right subtree

	mov	r9, QWORD PTR [r9+16]

; 2053 : 				}
; 2054 : 			else

	jmp	SHORT $LN19@find
$LN18@find:

; 2055 : 				{	// _Pnode not less than _Keyval, remember it
; 2056 : 				_Wherenode = _Pnode;

	mov	r8, r9

; 2057 : 				_Pnode = _Pnode->_Left;	// descend left subtree

	mov	r9, QWORD PTR [r9]
$LN19@find:

; 2047 : 
; 2048 : 		while (!_Pnode->_Isnil)

	cmp	BYTE PTR [r9+25], bl
	je	SHORT $LL16@find
$LN17@find:

; 44   : 		this->_Adopt(_Plist);

	mov	rdx, r14
	mov	QWORD PTR _Where$[rsp], r8
	lea	rcx, QWORD PTR _Where$[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [r14]

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdx, r14
	mov	QWORD PTR $T14[rsp], rax
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 278  : 		return (this->_Ptr == _Right._Ptr);

	mov	rax, QWORD PTR _Where$[rsp]
	cmp	rax, QWORD PTR $T14[rsp]

; 1425 : 		return (_Where == end()

	je	SHORT $LN3@find
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rcx, QWORD PTR [rdi]
	test	rcx, rcx
	je	SHORT $LN81@find

; 221  :    return *this;

	mov	r8, QWORD PTR [rax+32]
	sub	r8, rcx
$LL102@find:
	movzx	edx, BYTE PTR [rcx]
	cmp	dl, BYTE PTR [rcx+r8]
	jne	SHORT $LN104@find
	inc	rcx
	test	dl, dl
	jne	SHORT $LL102@find
	shr	ebx, 31
	jmp	SHORT $LN80@find
$LN104@find:
	sbb	ebx, ebx
	or	ebx, 1
	shr	ebx, 31
	jmp	SHORT $LN80@find
$LN81@find:

; 222  : }

	mov	ecx, DWORD PTR [rax+40]
	cmp	DWORD PTR [rdi+8], ecx
	setl	bl
$LN80@find:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1425 : 		return (_Where == end()

	test	bl, bl
	je	SHORT $LN108@find
$LN3@find:

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [r14]

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T24[rsp]
	mov	rdx, r14
	mov	QWORD PTR $T24[rsp], rax
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1199 : 		return (iterator(_My_data._Myhead, _STD addressof(_My_data)));

	mov	rax, QWORD PTR $T24[rsp]
$LN108@find:

; 1426 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1427 : 				_Keyval, this->_Key(_Where._Ptr))
; 1428 : 					? end() : _Where);
; 1429 : 		}

	mov	rbx, QWORD PTR [rsp+80]
	mov	QWORD PTR [rsi], rax
	mov	rax, rsi
	add	rsp, 32					; 00000020H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
$T3 = 32
this$ = 64
?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::clear, COMDAT

; 1408 : 		{	// erase all

$LN19:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T3[rsp], -2
	mov	QWORD PTR [rsp+64], rbx
	mov	rdi, rcx

; 1409 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1410 : 		this->_Orphan_ptr(nullptr);
; 1411 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1412 : 
; 1413 : 		auto& _My_data = this->_Get_data();
; 1414 : 		auto _Head = _My_data._Myhead;

	mov	rbx, QWORD PTR [rcx]

; 1415 : 		_Erase(_My_data._Root());

	mov	rdx, QWORD PTR [rbx+8]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase
	npad	1

; 1416 : 		_My_data._Root() = _Head;

	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR [rax+8], rbx

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [rdi]

; 1417 : 		_My_data._Lmost() = _Head;

	mov	QWORD PTR [rax], rbx

; 1418 : 		_My_data._Rmost() = _Head;

	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR [rax+16], rbx

; 1419 : 		_My_data._Mysize = 0;

	mov	QWORD PTR [rdi+8], 0

; 1420 : 		}

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_NXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty, COMDAT

; 1280 : 		return (size() == 0);

	cmp	QWORD PTR [rcx+8], 0
	sete	al

; 1281 : 		}

	ret	0
?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_NXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size, COMDAT

; 1270 : 		return (this->_Get_data()._Mysize);

	mov	rax, QWORD PTR [rcx+8]

; 1271 : 		}

	ret	0
?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end, COMDAT

; 1197 : 		{	// return iterator for end of mutable sequence

$LN19:
	push	rbx
	sub	rsp, 32					; 00000020H

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [rcx]

; 1197 : 		{	// return iterator for end of mutable sequence

	mov	rbx, rdx

; 42   : 		: _Ptr(_Pnode)

	mov	QWORD PTR [rdx], rax

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rcx
	mov	rcx, rbx
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1198 : 		auto& _My_data = this->_Get_data();
; 1199 : 		return (iterator(_My_data._Myhead, _STD addressof(_My_data)));

	mov	rax, rbx

; 1200 : 		}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin, COMDAT

; 1185 : 		{	// return iterator for beginning of mutable sequence

$LN21:
	push	rbx
	sub	rsp, 32					; 00000020H

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [rcx]

; 1185 : 		{	// return iterator for beginning of mutable sequence

	mov	rbx, rdx

; 42   : 		: _Ptr(_Pnode)

	mov	r8, QWORD PTR [rax]
	mov	QWORD PTR [rdx], r8

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rcx
	mov	rcx, rbx
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1186 : 		auto& _My_data = this->_Get_data();
; 1187 : 		return (iterator(_My_data._Lmost(), _STD addressof(_My_data)));

	mov	rax, rbx

; 1188 : 		}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T23 = 32
$T4 = 64
this$ = 64
$T10 = 72
$T13 = 80
??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT

; 1167 : 		{	// destroy tree

$LN74:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T23[rsp], -2
	mov	QWORD PTR [rsp+88], rbx
	mov	rdi, rcx

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR $T4[rsp], rax

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rcx
	lea	rcx, QWORD PTR $T4[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
	npad	1

; 2113 : 		erase(begin(), end());

	mov	rbx, QWORD PTR $T4[rsp]

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [rdi]

; 42   : 		: _Ptr(_Pnode)

	mov	rdx, QWORD PTR [rax]
	mov	QWORD PTR $T10[rsp], rdx

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rdi
	lea	rcx, QWORD PTR $T10[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
	npad	1

; 2113 : 		erase(begin(), end());

	mov	r9, rbx
	mov	r8, QWORD PTR $T10[rsp]
	lea	rdx, QWORD PTR $T13[rsp]
	mov	rcx, rdi
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, QWORD PTR [rdi]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1169 : 		}

	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT

; 125  : 		{	// construct map by copying _Right

$LN14:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	call	??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >

; 126  : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
this$ = 48
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT

; 115  : 		{	// construct empty map from defaults

$LN29:
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

	xor	eax, eax
	mov	QWORD PTR [rbx], rax

; 469  : 		_Mysize(0)

	mov	QWORD PTR [rbx+8], rax

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	QWORD PTR [rbx], rax
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map

; 116  : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
$T5 = 32
this$ = 64
_Right$ = 72
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 789  : 		{	// construct by moving _Right

$LN21:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T5[rsp], -2
	mov	QWORD PTR [rsp+64], rbx
	mov	QWORD PTR [rsp+72], rsi
	mov	rdi, rdx
	mov	rsi, rcx

; 772  : 		}
; 773  : 
; 774  : 	void _Move_from(vector&& _Right, false_type)
; 775  : 		{	// move from _Right, possibly moving its contents
; 776  : 		if (this->_Getal() == _Right._Getal())
; 777  : 			{
; 778  : 			_Move_from(_STD move(_Right), true_type{});
; 779  : 			}
; 780  : 		else if (_Buy(_Right.size()))
; 781  : 			{	// nonzero, fill it
; 782  : 			this->_Mylast() = _Umove(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());
; 783  : 			}
; 784  : 		}
; 785  : 
; 786  : public:
; 787  : 	vector(vector&& _Right) noexcept
; 788  : 		: _Mybase(_STD move(_Right._Getal()))

	mov	rcx, rdx
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	mov	rcx, rsi
	call	??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector

; 540  : 		_Get_data()._Swap_all(_Right._Get_data());

	mov	rcx, rdi
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
	npad	1
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
	npad	1
	mov	rcx, rax
	mov	rdx, rbx
	call	?_Swap_all@_Container_base0@std@@QEAAXAEAU12@@Z ; std::_Container_base0::_Swap_all
	npad	1

; 765  : 		this->_Myfirst() = _Right._Myfirst();

	mov	rcx, rdi
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
	npad	1
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
	npad	1
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 766  : 		this->_Mylast() = _Right._Mylast();

	mov	rcx, rdi
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
	npad	1
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
	npad	1
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 767  : 		this->_Myend() = _Right._Myend();

	mov	rcx, rdi
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
	npad	1
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
	npad	1
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 768  : 
; 769  : 		_Right._Myfirst() = pointer();

	mov	rcx, rdi
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
	npad	1
	xor	ebx, ebx
	mov	QWORD PTR [rax], rbx

; 770  : 		_Right._Mylast() = pointer();

	mov	rcx, rdi
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
	npad	1
	mov	QWORD PTR [rax], rbx

; 771  : 		_Right._Myend() = pointer();

	mov	rcx, rdi
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
	npad	1
	mov	QWORD PTR [rax], rbx

; 790  : 		_Move_from(_STD move(_Right), true_type{});
; 791  : 		}

	mov	rax, rsi
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--, COMDAT

; 86   : 		if (_Ptr->_Isnil)

	mov	rdx, QWORD PTR [rcx]
	mov	r8, rcx
	cmp	BYTE PTR [rdx+25], 0
	je	SHORT $LN4@operator

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx], rax

; 106  : 			}
; 107  : 
; 108  : 		return (*this);
; 109  : 		}

	mov	rax, rcx
	ret	0
$LN4@operator:

; 89   : 			}
; 90   : 		else if (_Ptr->_Left->_Isnil)

	mov	rcx, QWORD PTR [rdx]
	cmp	BYTE PTR [rcx+25], 0
	je	SHORT $LN6@operator

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

	mov	rax, QWORD PTR [rdx+8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN3@operator
	mov	rcx, rdx
	mov	r9, rdx
$LL2@operator:
	mov	r10, rax
	mov	r11, rax
	mov	rdx, r9
	cmp	rcx, QWORD PTR [rax]
	jne	SHORT $LN3@operator
	mov	rcx, rax

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

	mov	QWORD PTR [r8], rax
	mov	rax, QWORD PTR [rax+8]
	mov	r9, rcx
	mov	rdx, rcx
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL2@operator
$LN3@operator:

; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)

	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN24@operator

; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head

	mov	QWORD PTR [r8], rax

; 106  : 			}
; 107  : 
; 108  : 		return (*this);
; 109  : 		}

	mov	rax, r8
	ret	0
$LN6@operator:

; 479  : 		while (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN12@operator
	npad	5
$LL11@operator:

; 480  : 			_Pnode = _Pnode->_Right;

	mov	rcx, rax
	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL11@operator
$LN12@operator:

; 101  : 				}
; 102  : 			}
; 103  : 		else
; 104  : 			{
; 105  : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree

	mov	QWORD PTR [r8], rcx
$LN24@operator:

; 106  : 			}
; 107  : 
; 108  : 		return (*this);
; 109  : 		}

	mov	rax, r8
	ret	0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++, COMDAT

; 59   : 		if (_Ptr->_Right->_Isnil)

	mov	rdx, QWORD PTR [rcx]
	mov	r8, rcx
	mov	r9, QWORD PTR [rdx+16]
	cmp	BYTE PTR [r9+25], 0
	je	SHORT $LN4@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

	mov	rax, QWORD PTR [rdx+8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN3@operator
	npad	5
$LL2@operator:
	cmp	rdx, QWORD PTR [rax+16]
	jne	SHORT $LN3@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	QWORD PTR [rcx], rax
	mov	rdx, rax
	mov	rax, QWORD PTR [rax+8]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL2@operator
$LN3@operator:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else
; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree
; 72   : 			}
; 73   : 
; 74   : 		return (*this);

	mov	QWORD PTR [rcx], rax

; 75   : 		}

	mov	rax, r8
	ret	0
$LN4@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rcx, QWORD PTR [r9]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN9@operator
	npad	10
$LL8@operator:
	mov	rax, QWORD PTR [rcx]

; 487  : 			_Pnode = _Pnode->_Left;

	mov	r9, rcx
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL8@operator
$LN9@operator:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else
; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree
; 72   : 			}
; 73   : 
; 74   : 		return (*this);

	mov	QWORD PTR [r8], r9

; 75   : 		}

	mov	rax, r8
	ret	0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT

; 37   : 		: _Ptr()

	mov	QWORD PTR [rcx], 0

; 210  : 		}

	mov	rax, rcx
	ret	0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT

; 327  : 		{	// construct with node pointer _Pnode

$LN8:
	push	rbx
	sub	rsp, 32					; 00000020H

; 42   : 		: _Ptr(_Pnode)

	mov	QWORD PTR [rcx], rdx

; 327  : 		{	// construct with node pointer _Pnode

	mov	rbx, rcx

; 44   : 		this->_Adopt(_Plist);

	mov	rdx, r8
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 328  : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEBAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEBAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Rmost, COMDAT

; 503  : 		return (_Myhead->_Right);

	mov	rax, QWORD PTR [rcx]
	add	rax, 16

; 504  : 		}

	ret	0
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEBAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEBAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEBAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Lmost, COMDAT

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [rcx]

; 499  : 		}

	ret	0
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEBAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEBAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEBAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Root, COMDAT

; 493  : 		return (_Myhead->_Parent);

	mov	rax, QWORD PTR [rcx]
	add	rax, 8

; 494  : 		}

	ret	0
?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEBAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@AEBV32@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
_Al$dead$ = 16
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@AEBV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::select_on_container_copy_construction, COMDAT

; 897  : 		return (_Al);

	mov	rax, rcx

; 898  : 		}

	ret	0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@AEBV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBAAEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBAAEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_data, COMDAT

; 1020 : 		return (_Mypair._Get_second()._Get_second());

	mov	rax, rcx

; 1021 : 		}

	ret	0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBAAEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAAEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAAEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_data, COMDAT

; 1015 : 		return (_Mypair._Get_second()._Get_second());

	mov	rax, rcx

; 1016 : 		}

	ret	0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAAEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal, COMDAT

; 1010 : 		return (_Mypair._Get_second()._Get_first());

	mov	rax, rcx

; 1011 : 		}

	ret	0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAAEAU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAAEAU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getcomp, COMDAT

; 995  : 		return (_Mypair._Get_first());

	mov	rax, rcx

; 996  : 		}

	ret	0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAAEAU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T10 = 32
this$ = 64
??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT

; 812  : 		{	// destroy head node

$LN36:
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR $T10[rsp], -2
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, QWORD PTR [rcx]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 814  : 		}

	add	rsp, 56					; 00000038H
	ret	0
??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBVCZString@Value@Json@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Pnode$ = 16
?_Key@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBVCZString@Value@Json@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Key, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

	lea	rax, QWORD PTR [rdx+32]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 2124 : 		}

	ret	0
?_Key@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBVCZString@Value@Json@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ
_TEXT	SEGMENT
$T4 = 48
this$ = 48
$T10 = 56
$T13 = 64
?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tidy, COMDAT

; 2112 : 		{	// free all storage

$LN39:
	mov	QWORD PTR [rsp+32], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [rcx]

; 2112 : 		{	// free all storage

	mov	rdi, rcx

; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rcx
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [rdi]

; 44   : 		this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T10[rsp]

; 2113 : 		erase(begin(), end());

	mov	rbx, QWORD PTR $T4[rsp]

; 42   : 		: _Ptr(_Pnode)

	mov	rdx, QWORD PTR [rax]
	mov	QWORD PTR $T10[rsp], rdx

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rdi
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 2113 : 		erase(begin(), end());

	mov	r8, QWORD PTR $T10[rsp]
	lea	rdx, QWORD PTR $T13[rsp]
	mov	r9, rbx
	mov	rcx, rdi
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase

; 2114 : 		}

	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
_TEXT	SEGMENT
$T7 = 32
this$ = 64
_Rootnode$ = 72
?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase, COMDAT

; 2019 : 		{	// free entire subtree, recursively

$LN49:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T7[rsp], -2
	mov	QWORD PTR [rsp+64], rbx
	mov	QWORD PTR [rsp+72], rsi
	mov	rbx, rdx
	mov	rsi, rcx

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

	mov	rdi, rdx
	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN3@Erase
	npad	8
$LL4@Erase:

; 2021 : 			{	// free subtrees, then node
; 2022 : 			_Erase(_Pnode->_Right);

	mov	rdx, QWORD PTR [rdi+16]
	mov	rcx, rsi
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 2023 : 			_Pnode = _Pnode->_Left;

	mov	rdi, QWORD PTR [rdi]
	lea	rcx, QWORD PTR [rbx+48]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rbx+32], 0
	je	SHORT $LN23@Erase
	cmp	DWORD PTR [rbx+40], 1
	jne	SHORT $LN23@Erase

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx+32]
	call	QWORD PTR [rax+16]
	npad	1
$LN23@Erase:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, rbx
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

	mov	rbx, rdi
	cmp	BYTE PTR [rdi+25], 0
	je	SHORT $LL4@Erase
$LN3@Erase:

; 2024 : 			_Alnode& _Al = this->_Getal();
; 2025 : 			_Alnode_traits::destroy(_Al, _STD addressof(_Rootnode->_Myval));
; 2026 : 			_Node::_Freenode0(_Al, _Rootnode);
; 2027 : 			}
; 2028 : 		}

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T22 = 32
$T17 = 64
$T9 = 64
$T4 = 64
this$ = 64
__$ReturnUdt$ = 72
_First$ = 80
_Last$ = 88
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase, COMDAT

; 1385 : 		{	// erase [_First, _Last)

$LN128:
	push	r14
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T22[rsp], -2
	mov	QWORD PTR [rsp+72], rbx
	mov	QWORD PTR [rsp+80], rsi
	mov	QWORD PTR [rsp+88], rdi
	mov	rdi, r9
	mov	rbx, r8
	mov	r14, rdx
	mov	rsi, rcx

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [rcx]

; 42   : 		: _Ptr(_Pnode)

	mov	r8, QWORD PTR [rax]
	mov	QWORD PTR $T4[rsp], r8

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rcx
	lea	rcx, QWORD PTR $T4[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 278  : 		return (this->_Ptr == _Right._Ptr);

	cmp	rbx, QWORD PTR $T4[rsp]

; 1386 : 		if (_First == begin() && _Last == end())

	jne	SHORT $LN112@erase

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [rsi]
	mov	QWORD PTR $T9[rsp], rax

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rsi
	lea	rcx, QWORD PTR $T9[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 278  : 		return (this->_Ptr == _Right._Ptr);

	cmp	rdi, QWORD PTR $T9[rsp]

; 1386 : 		if (_First == begin() && _Last == end())

	jne	SHORT $LN112@erase

; 1414 : 		auto _Head = _My_data._Myhead;

	mov	rbx, QWORD PTR [rsi]

; 1415 : 		_Erase(_My_data._Root());

	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rsi
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 1416 : 		_My_data._Root() = _Head;

	mov	rax, QWORD PTR [rsi]
	mov	QWORD PTR [rax+8], rbx

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [rsi]

; 1417 : 		_My_data._Lmost() = _Head;

	mov	QWORD PTR [rax], rbx

; 1418 : 		_My_data._Rmost() = _Head;

	mov	rax, QWORD PTR [rsi]
	mov	QWORD PTR [rax+16], rbx

; 1419 : 		_My_data._Mysize = 0;

	mov	QWORD PTR [rsi+8], 0

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [rsi]

; 42   : 		: _Ptr(_Pnode)

	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [r14], rcx

; 1387 : 			{	// erase all
; 1388 : 			clear();
; 1389 : 			return (begin());

	jmp	SHORT $LN125@erase
$LN112@erase:

; 278  : 		return (this->_Ptr == _Right._Ptr);

	cmp	rbx, rdi

; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// partial erase, one at a time
; 1393 : 			while (_First != _Last)

	je	SHORT $LN3@erase
$LL2@erase:

; 246  : 		_Tree_const_iterator _Tmp = *this;

	mov	r8, rbx

; 59   : 		if (_Ptr->_Right->_Isnil)

	mov	rax, QWORD PTR [rbx+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LN91@erase

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

	mov	rax, QWORD PTR [rbx+8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN90@erase
$LL89@erase:
	cmp	rbx, QWORD PTR [rax+16]
	jne	SHORT $LN90@erase

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	rbx, rax

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

	mov	rax, QWORD PTR [rax+8]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL89@erase
$LN90@erase:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	rbx, rax

; 68   : 			}
; 69   : 		else

	jmp	SHORT $LN92@erase
$LN91@erase:

; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree

	mov	rbx, rax

; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rcx, QWORD PTR [rax]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN92@erase
	npad	5
$LL95@erase:

; 487  : 			_Pnode = _Pnode->_Left;

	mov	rbx, rcx

; 279  : 		}
; 280  : 
; 281  : 	_NODISCARD bool operator!=(const _Tree_const_iterator& _Right) const
; 282  : 		{	// test for iterator inequality
; 283  : 		return (!(*this == _Right));
; 284  : 		}
; 285  : 
; 286  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 287  : 	friend void _Verify_range(const _Tree_const_iterator& _First, const _Tree_const_iterator& _Last)
; 288  : 		{
; 289  : 		_STL_VERIFY(_First._Getcont() == _Last._Getcont(),
; 290  : 			"map/set iterators in range are from different containers");
; 291  : 		}
; 292  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 293  : 
; 294  : 	_NODISCARD _Tree_unchecked_const_iterator<_Mytree> _Unwrapped() const
; 295  : 		{
; 296  : 		return (_Tree_unchecked_const_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
; 297  : 		}
; 298  : 
; 299  : 	void _Seek_to(const _Tree_unchecked_const_iterator<_Mytree> _It)
; 300  : 		{
; 301  : 		this->_Ptr = _It._Ptr;
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : 	// CLASS TEMPLATE _Tree_iterator
; 306  : template<class _Mytree>
; 307  : 	class _Tree_iterator
; 308  : 		: public _Tree_const_iterator<_Mytree>
; 309  : 	{	// iterator for mutable tree
; 310  : public:
; 311  : 	using _Mybase = _Tree_const_iterator<_Mytree>;
; 312  : 	using iterator_category = bidirectional_iterator_tag;
; 313  : 
; 314  : 	using _Nodeptr = typename _Mytree::_Nodeptr;
; 315  : 	using value_type = typename _Mytree::value_type;
; 316  : 	using difference_type = typename _Mytree::difference_type;
; 317  : 
; 318  : 	using pointer = typename _Mytree::pointer;
; 319  : 	using reference = value_type&;
; 320  : 
; 321  : 	_Tree_iterator()
; 322  : 		{	// construct with null node
; 323  : 		}
; 324  : 
; 325  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 326  : 		: _Mybase(_Pnode, _Plist)
; 327  : 		{	// construct with node pointer _Pnode
; 328  : 		}
; 329  : 
; 330  : 	_NODISCARD reference operator*() const
; 331  : 		{	// return designated value
; 332  : 		return ((reference)**(_Mybase *)this);
; 333  : 		}
; 334  : 
; 335  : 	_NODISCARD pointer operator->() const
; 336  : 		{	// return pointer to class object
; 337  : 		return (pointer_traits<pointer>::pointer_to(**this));
; 338  : 		}
; 339  : 
; 340  : 	_Tree_iterator& operator++()
; 341  : 		{	// preincrement
; 342  : 		++static_cast<_Mybase&>(*this);
; 343  : 		return (*this);
; 344  : 		}
; 345  : 
; 346  : 	_Tree_iterator operator++(int)
; 347  : 		{	// postincrement
; 348  : 		_Tree_iterator _Tmp = *this;
; 349  : 		++*this;
; 350  : 		return (_Tmp);
; 351  : 		}
; 352  : 
; 353  : 	_Tree_iterator& operator--()
; 354  : 		{	// predecrement
; 355  : 		--static_cast<_Mybase&>(*this);
; 356  : 		return (*this);
; 357  : 		}
; 358  : 
; 359  : 	_Tree_iterator operator--(int)
; 360  : 		{	// postdecrement
; 361  : 		_Tree_iterator _Tmp = *this;
; 362  : 		--*this;
; 363  : 		return (_Tmp);
; 364  : 		}
; 365  : 
; 366  : 	_NODISCARD _Tree_unchecked_iterator<_Mytree> _Unwrapped() const
; 367  : 		{
; 368  : 		return (_Tree_unchecked_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
; 369  : 		}
; 370  : 	};
; 371  : 
; 372  : 		// tree TYPE WRAPPERS
; 373  : template<class _Value_type,
; 374  : 	class _Size_type,
; 375  : 	class _Difference_type,
; 376  : 	class _Pointer,
; 377  : 	class _Const_pointer,
; 378  : 	class _Reference,
; 379  : 	class _Const_reference,
; 380  : 	class _Nodeptr_type>
; 381  : 	struct _Tree_iter_types
; 382  : 	{	// wraps types needed by iterators
; 383  : 	using value_type = _Value_type;
; 384  : 	using size_type = _Size_type;
; 385  : 	using difference_type = _Difference_type;
; 386  : 	using pointer = _Pointer;
; 387  : 	using const_pointer = _Const_pointer;
; 388  : 	using _Nodeptr = _Nodeptr_type;
; 389  : 	};
; 390  : 
; 391  : template<class _Value_type,
; 392  : 	class _Voidptr>
; 393  : 	struct _Tree_node
; 394  : 		{	// tree node
; 395  : 		using _Nodeptr = _Rebind_pointer_t<_Voidptr, _Tree_node>;
; 396  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 397  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 398  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 399  : 		char _Color;	// _Red or _Black, _Black if head
; 400  : 		char _Isnil;	// true only if head (also nil) node
; 401  : 		_Value_type _Myval;	// the stored value, unused if head
; 402  : 
; 403  : 		_Tree_node& operator=(const _Tree_node&) = delete;
; 404  : 
; 405  : 		template<class _Alloc>
; 406  : 			static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept
; 407  : 			{
; 408  : 			using _Alnode = _Rebind_alloc_t<_Alloc, _Tree_node>;
; 409  : 			using _Alnode_traits = allocator_traits<_Alnode>;
; 410  : 			_Alnode _Node_alloc(_Al);
; 411  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Left));
; 412  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Parent));
; 413  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Right));
; 414  : 			_Alnode_traits::deallocate(_Node_alloc, _Ptr, 1);
; 415  : 			}
; 416  : 		};
; 417  : 
; 418  : template<class _Ty>
; 419  : 	struct _Tree_simple_types
; 420  : 		: public _Simple_types<_Ty>
; 421  : 	{	// wraps types needed by iterators
; 422  : 	using _Node = _Tree_node<_Ty, void *>;
; 423  : 	using _Nodeptr = _Node *;
; 424  : 	};
; 425  : 
; 426  : template<class _Ty,
; 427  : 	class _Alloc>
; 428  : 	struct _Tree_base_types
; 429  : 	{	// types needed for a container base
; 430  : 	using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
; 431  : 	using _Alty_traits = allocator_traits<_Alty>;
; 432  : 	using _Node = _Tree_node<_Ty, typename allocator_traits<_Alloc>::void_pointer>;
; 433  : 	using _Alnode = _Rebind_alloc_t<_Alloc, _Node>;
; 434  : 	using _Alnode_traits = allocator_traits<_Alnode>;
; 435  : 	using _Nodeptr = typename _Alnode_traits::pointer;
; 436  : 
; 437  : 	using _Val_types = conditional_t<_Is_simple_alloc_v<_Alnode>,
; 438  : 		_Tree_simple_types<_Ty>,
; 439  : 		_Tree_iter_types<_Ty,
; 440  : 			typename _Alty_traits::size_type,
; 441  : 			typename _Alty_traits::difference_type,
; 442  : 			typename _Alty_traits::pointer,
; 443  : 			typename _Alty_traits::const_pointer,
; 444  : 			_Ty&,
; 445  : 			const _Ty&,
; 446  : 			_Nodeptr>>;
; 447  : 	};
; 448  : 
; 449  : 		// CLASS TEMPLATE _Tree_val
; 450  : template<class _Val_types>
; 451  : 	class _Tree_val
; 452  : 		: public _Container_base
; 453  : 	{	// base class for tree to hold data
; 454  : public:
; 455  : 	using _Nodeptr = typename _Val_types::_Nodeptr;
; 456  : 
; 457  : 	using value_type = typename _Val_types::value_type;
; 458  : 	using size_type = typename _Val_types::size_type;
; 459  : 	using difference_type = typename _Val_types::difference_type;
; 460  : 	using pointer = typename _Val_types::pointer;
; 461  : 	using const_pointer = typename _Val_types::const_pointer;
; 462  : 	using reference = value_type&;
; 463  : 	using const_reference = const value_type&;
; 464  : 
; 465  : 	using const_iterator = _Tree_const_iterator<_Tree_val>;
; 466  : 
; 467  : 	_Tree_val()
; 468  : 		: _Myhead(),
; 469  : 		_Mysize(0)
; 470  : 		{	// initialize data
; 471  : 		}
; 472  : 
; 473  : 	enum _Redbl
; 474  : 		{	// colors for link to parent
; 475  : 		_Red, _Black};
; 476  : 
; 477  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 478  : 		{	// return rightmost node in subtree at _Pnode
; 479  : 		while (!_Pnode->_Right->_Isnil)
; 480  : 			_Pnode = _Pnode->_Right;
; 481  : 		return (_Pnode);
; 482  : 		}
; 483  : 
; 484  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 485  : 		{	// return leftmost node in subtree at _Pnode
; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rax, QWORD PTR [rcx]
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL95@erase
$LN92@erase:

; 1394 : 				erase(_First++);

	lea	rdx, QWORD PTR $T17[rsp]
	mov	rcx, rsi
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase

; 278  : 		return (this->_Ptr == _Right._Ptr);

	cmp	rbx, rdi

; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// partial erase, one at a time
; 1393 : 			while (_First != _Last)

	jne	SHORT $LL2@erase
$LN3@erase:

; 42   : 		: _Ptr(_Pnode)

	mov	QWORD PTR [r14], rbx
$LN125@erase:

; 1395 : 			return (iterator(_First._Ptr, _STD addressof(this->_Get_data())));
; 1396 : 			}
; 1397 : 		}

	mov	rdx, rsi
	mov	rcx, r14
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
	mov	rax, r14
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Parg$dead$ = 56
$T1 = 56
??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT

; 1085 : 		{	// construct empty tree from comparator

$LN26:
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

	xor	eax, eax
	mov	QWORD PTR [rbx], rax

; 469  : 		_Mysize(0)

	mov	QWORD PTR [rbx+8], rax

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	QWORD PTR [rbx], rax

; 1086 : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xstddef
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xstddef
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xstddef
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??R?$less@VCZString@Value@Json@@@std@@QEBA_NAEBVCZString@Value@Json@@0@Z
_TEXT	SEGMENT
this$dead$ = 8
_Left$ = 16
_Right$ = 24
??R?$less@VCZString@Value@Json@@@std@@QEBA_NAEBVCZString@Value@Json@@0@Z PROC ; std::less<Json::Value::CZString>::operator(), COMDAT
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rdx]
	test	rax, rax
	je	SHORT $LN4@operator

; 221  :    return *this;

	mov	rdx, QWORD PTR [r8]
	sub	rdx, rax
	npad	2
$LL6@operator:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN8@operator
	inc	rax
	test	cl, cl
	jne	SHORT $LL6@operator
	xor	eax, eax
	shr	eax, 31
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xstddef

; 142  : 		}

	ret	0
$LN8@operator:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 221  :    return *this;

	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xstddef

; 142  : 		}

	ret	0
$LN4@operator:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 222  : }

	mov	eax, DWORD PTR [r8+8]
	cmp	DWORD PTR [rdx+8], eax
	setl	al
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xstddef

; 142  : 		}

	ret	0
??R?$less@VCZString@Value@Json@@@std@@QEBA_NAEBVCZString@Value@Json@@0@Z ENDP ; std::less<Json::Value::CZString>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Move_from@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
__formal$dead$ = 64
?_Move_from@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_from, COMDAT

; 762  : 		{	// move from _Right, stealing its contents

$LN7:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rsi, rdx

; 540  : 		_Get_data()._Swap_all(_Right._Get_data());

	mov	rcx, rdx
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
	mov	rcx, rax
	mov	rdx, rbx
	call	?_Swap_all@_Container_base0@std@@QEAAXAEAU12@@Z ; std::_Container_base0::_Swap_all

; 763  : 		this->_Swap_all(_Right);
; 764  : 
; 765  : 		this->_Myfirst() = _Right._Myfirst();

	mov	rcx, rsi
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 766  : 		this->_Mylast() = _Right._Mylast();

	mov	rcx, rsi
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 767  : 		this->_Myend() = _Right._Myend();

	mov	rcx, rsi
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 768  : 
; 769  : 		_Right._Myfirst() = pointer();

	mov	rcx, rsi
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
	xor	ebx, ebx

; 770  : 		_Right._Mylast() = pointer();

	mov	rcx, rsi
	mov	QWORD PTR [rax], rbx
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast

; 771  : 		_Right._Myend() = pointer();

	mov	rcx, rsi
	mov	QWORD PTR [rax], rbx
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend

; 772  : 		}

	mov	rsi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rax], rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Move_from@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_from
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAXAEAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Swap_all, COMDAT

; 539  : 		{	// swap all iterators

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx

; 540  : 		_Get_data()._Swap_all(_Right._Get_data());

	mov	rcx, rdx
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
	mov	rcx, rax
	mov	rdx, rbx

; 541  : 		}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 540  : 		_Get_data()._Swap_all(_Right._Get_data());

	jmp	?_Swap_all@_Container_base0@std@@QEAAXAEAU12@@Z ; std::_Container_base0::_Swap_all
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAXAEAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEBAAEBV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEBAAEBV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_second, COMDAT

; 307  : 		return (_Myval2);

	mov	rax, rcx

; 308  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEBAAEBV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAAAEAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAAAEAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_second, COMDAT

; 302  : 		return (_Myval2);

	mov	rax, rcx

; 303  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAAAEAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAAAEAU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAAAEAU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_first, COMDAT

; 292  : 		return (*this);

	mov	rax, rcx

; 293  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAAAEAU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEBAAEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEBAAEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_second, COMDAT

; 307  : 		return (_Myval2);

	mov	rax, rcx

; 308  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEBAAEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAAAEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAAAEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_second, COMDAT

; 302  : 		return (_Myval2);

	mov	rax, rcx

; 303  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAAAEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first, COMDAT

; 297  : 		return (*this);

	mov	rax, rcx

; 298  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>, COMDAT

; 37   : 		: _Ptr()

	mov	QWORD PTR [rcx], 0

; 39   : 		}

	mov	rax, rcx
	ret	0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA?AV01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
__formal$dead$ = 24
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++, COMDAT

; 246  : 		_Tree_const_iterator _Tmp = *this;

	mov	r8, QWORD PTR [rcx]
	mov	r10, rcx
	mov	QWORD PTR [rdx], r8

; 59   : 		if (_Ptr->_Right->_Isnil)

	mov	r9, QWORD PTR [r8+16]
	cmp	BYTE PTR [r9+25], 0
	je	SHORT $LN8@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

	mov	rax, QWORD PTR [r8+8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN7@operator
	npad	2
$LL6@operator:
	cmp	r8, QWORD PTR [rax+16]
	jne	SHORT $LN7@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	QWORD PTR [rcx], rax
	mov	r8, rax
	mov	rax, QWORD PTR [rax+8]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL6@operator
$LN7@operator:

; 247  : 		++*this;
; 248  : 		return (_Tmp);

	mov	QWORD PTR [rcx], rax

; 249  : 		}

	mov	rax, rdx
	ret	0
$LN8@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rcx, QWORD PTR [r9]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN13@operator
	npad	10
$LL12@operator:
	mov	rax, QWORD PTR [rcx]

; 487  : 			_Pnode = _Pnode->_Left;

	mov	r9, rcx
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL12@operator
$LN13@operator:

; 247  : 		++*this;
; 248  : 		return (_Tmp);

	mov	QWORD PTR [r10], r9

; 249  : 		}

	mov	rax, rdx
	ret	0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT

; 214  : 		{	// construct with node pointer _Pnode

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H

; 42   : 		: _Ptr(_Pnode)

	mov	QWORD PTR [rcx], rdx

; 214  : 		{	// construct with node pointer _Pnode

	mov	rbx, rcx

; 44   : 		this->_Adopt(_Plist);

	mov	rdx, r8
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 215  : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z
_TEXT	SEGMENT
_Pnode$ = 8
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Min, COMDAT

; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rdx, QWORD PTR [rcx]
	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN9@Min
	npad	7
$LL2@Min:
	mov	rcx, QWORD PTR [rdx]

; 487  : 			_Pnode = _Pnode->_Left;

	mov	rax, rdx
	mov	rdx, rcx
	cmp	BYTE PTR [rcx+25], 0
	je	SHORT $LL2@Min

; 489  : 		}

	ret	0
$LN9@Min:

; 488  : 		return (_Pnode);

	mov	rax, rcx

; 489  : 		}

	ret	0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z
_TEXT	SEGMENT
_Pnode$ = 8
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Max, COMDAT

; 479  : 		while (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN9@Max
	npad	6
$LL2@Max:

; 480  : 			_Pnode = _Pnode->_Right;

	mov	rcx, rax
	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL2@Max
$LN9@Max:

; 481  : 		return (_Pnode);
; 482  : 		}

	mov	rax, rcx
	ret	0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal, COMDAT

; 1005 : 		return (_Mypair._Get_second()._Get_first());

	mov	rax, rcx

; 1006 : 		}

	ret	0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
_TEXT	SEGMENT
$T7 = 32
this$dead$ = 64
_Pnode$ = 72
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Freeheadnode, COMDAT

; 946  : 		{	// free head node using current allocator

$LN28:
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR $T7[rsp], -2
	mov	rcx, rdx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 948  : 		}

	add	rsp, 56					; 00000038H
	ret	0
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Parg$dead$ = 56
$T1 = 56
??0?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT

; 791  : 		{	// construct from comparator

$LN23:
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

	xor	eax, eax
	mov	QWORD PTR [rbx], rax

; 469  : 		_Mysize(0)

	mov	QWORD PTR [rbx+8], rax

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	QWORD PTR [rbx], rax

; 792  : 		_Construct();
; 793  : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Val$ = 16
?_Kfn@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Kfn, COMDAT

; 2118 : 		return (_Traits::_Kfn(_Val));

	mov	rax, rdx

; 2119 : 		}

	ret	0
?_Kfn@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
$T10 = 32
this$ = 64
__$ReturnUdt$ = 72
_Where$ = 80
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase, COMDAT

; 1362 : 		{	// erase element at _Where

$LN77:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T10[rsp], -2
	mov	QWORD PTR [rsp+64], rbx
	mov	QWORD PTR [rsp+72], rbp
	mov	QWORD PTR [rsp+80], rsi
	mov	rsi, rdx
	mov	rbp, rcx

; 1363 : 		auto& _My_data = this->_Get_data();
; 1364 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1365 : 		_STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data)
; 1366 : 			&& !_Where._Ptr->_Isnil, "map/set erase iterator outside range");
; 1367 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1368 : 
; 1369 : 		const_iterator _Successor = _Where;

	mov	rax, r8

; 59   : 		if (_Ptr->_Right->_Isnil)

	mov	rbx, QWORD PTR [r8+16]
	cmp	BYTE PTR [rbx+25], 0
	je	SHORT $LN14@erase

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

	mov	rbx, QWORD PTR [r8+8]
	cmp	BYTE PTR [rbx+25], 0
	jne	SHORT $LN15@erase
	npad	5
$LL12@erase:
	cmp	rax, QWORD PTR [rbx+16]
	jne	SHORT $LN15@erase

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	rax, rbx

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

	mov	rbx, QWORD PTR [rbx+8]
	cmp	BYTE PTR [rbx+25], 0
	je	SHORT $LL12@erase

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else

	jmp	SHORT $LN15@erase
$LN14@erase:

; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rcx, QWORD PTR [rbx]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN15@erase
	npad	2
$LL18@erase:

; 487  : 			_Pnode = _Pnode->_Left;

	mov	rbx, rcx

; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree
; 72   : 			}
; 73   : 
; 74   : 		return (*this);
; 75   : 		}
; 76   : 
; 77   : 	_Tree_unchecked_const_iterator operator++(int)
; 78   : 		{	// postincrement
; 79   : 		_Tree_unchecked_const_iterator _Tmp = *this;
; 80   : 		++*this;
; 81   : 		return (_Tmp);
; 82   : 		}
; 83   : 
; 84   : 	_Tree_unchecked_const_iterator& operator--()
; 85   : 		{	// predecrement
; 86   : 		if (_Ptr->_Isnil)
; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost
; 89   : 			}
; 90   : 		else if (_Ptr->_Left->_Isnil)
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)
; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)
; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head
; 101  : 				}
; 102  : 			}
; 103  : 		else
; 104  : 			{
; 105  : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree
; 106  : 			}
; 107  : 
; 108  : 		return (*this);
; 109  : 		}
; 110  : 
; 111  : 	_Tree_unchecked_const_iterator operator--(int)
; 112  : 		{	// postdecrement
; 113  : 		_Tree_unchecked_const_iterator _Tmp = *this;
; 114  : 		--*this;
; 115  : 		return (_Tmp);
; 116  : 		}
; 117  : 
; 118  : 	_NODISCARD bool operator==(const _Tree_unchecked_const_iterator& _Right) const
; 119  : 		{	// test for iterator equality
; 120  : 		return (_Ptr == _Right._Ptr);
; 121  : 		}
; 122  : 
; 123  : 	_NODISCARD bool operator!=(const _Tree_unchecked_const_iterator& _Right) const
; 124  : 		{	// test for iterator inequality
; 125  : 		return (!(*this == _Right));
; 126  : 		}
; 127  : 
; 128  : 	_Nodeptr _Ptr;	// pointer to node
; 129  : 	};
; 130  : 
; 131  : 	// CLASS TEMPLATE _Tree_unchecked_iterator
; 132  : template<class _Mytree>
; 133  : 	class _Tree_unchecked_iterator
; 134  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 135  : 	{	// unchecked iterator for mutable tree
; 136  : public:
; 137  : 	using _Mybase = _Tree_unchecked_const_iterator<_Mytree>;
; 138  : 	using iterator_category = bidirectional_iterator_tag;
; 139  : 
; 140  : 	using _Nodeptr = typename _Mytree::_Nodeptr;
; 141  : 	using value_type = typename _Mytree::value_type;
; 142  : 	using difference_type = typename _Mytree::difference_type;
; 143  : 	using pointer = typename _Mytree::pointer;
; 144  : 	using reference = value_type&;
; 145  : 
; 146  : 	_Tree_unchecked_iterator()
; 147  : 		{	// construct with null node
; 148  : 		}
; 149  : 
; 150  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 151  : 		: _Mybase(_Pnode, _Plist)
; 152  : 		{	// construct with node pointer _Pnode
; 153  : 		}
; 154  : 
; 155  : 	_NODISCARD reference operator*() const
; 156  : 		{	// return designated value
; 157  : 		return ((reference)**(_Mybase *)this);
; 158  : 		}
; 159  : 
; 160  : 	_NODISCARD pointer operator->() const
; 161  : 		{	// return pointer to class object
; 162  : 		return (pointer_traits<pointer>::pointer_to(**this));
; 163  : 		}
; 164  : 
; 165  : 	_Tree_unchecked_iterator& operator++()
; 166  : 		{	// preincrement
; 167  : 		++static_cast<_Mybase&>(*this);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Tree_unchecked_iterator operator++(int)
; 172  : 		{	// postincrement
; 173  : 		_Tree_unchecked_iterator _Tmp = *this;
; 174  : 		++*this;
; 175  : 		return (_Tmp);
; 176  : 		}
; 177  : 
; 178  : 	_Tree_unchecked_iterator& operator--()
; 179  : 		{	// predecrement
; 180  : 		--static_cast<_Mybase&>(*this);
; 181  : 		return (*this);
; 182  : 		}
; 183  : 
; 184  : 	_Tree_unchecked_iterator operator--(int)
; 185  : 		{	// postdecrement
; 186  : 		_Tree_unchecked_iterator _Tmp = *this;
; 187  : 		--*this;
; 188  : 		return (_Tmp);
; 189  : 		}
; 190  : 	};
; 191  : 
; 192  : 	// CLASS TEMPLATE _Tree_const_iterator
; 193  : template<class _Mytree>
; 194  : 	class _Tree_const_iterator
; 195  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 196  : 	{	// iterator for nonmutable tree
; 197  : public:
; 198  : 	using _Mybase = _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>;
; 199  : 	using iterator_category = bidirectional_iterator_tag;
; 200  : 
; 201  : 	using _Nodeptr = typename _Mytree::_Nodeptr;
; 202  : 	using value_type = typename _Mytree::value_type;
; 203  : 	using difference_type = typename _Mytree::difference_type;
; 204  : 	using pointer = typename _Mytree::const_pointer;
; 205  : 	using reference = const value_type&;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	_NODISCARD reference operator*() const
; 218  : 		{	// return designated value
; 219  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 220  : 		const auto _Mycont = static_cast<const _Mytree *>(this->_Getcont());
; 221  : 		_STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");
; 222  : 		_STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");
; 223  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 224  : 
; 225  : 		return (this->_Ptr->_Myval);
; 226  : 		}
; 227  : 
; 228  : 	_NODISCARD pointer operator->() const
; 229  : 		{	// return pointer to class object
; 230  : 		return (pointer_traits<pointer>::pointer_to(**this));
; 231  : 		}
; 232  : 
; 233  : 	_Tree_const_iterator& operator++()
; 234  : 		{	// preincrement
; 235  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 236  : 		_STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");
; 237  : 		_STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 239  : 
; 240  : 		++static_cast<_Mybase&>(*this);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Tree_const_iterator operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Tree_const_iterator _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Tree_const_iterator& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 254  : 		--static_cast<_Mybase&>(*this);
; 255  :  #else /* ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv */
; 256  : 		_STL_ASSERT(this->_Getcont(), "cannot decrement value-initialized map/set iterator");
; 257  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 258  : 		--static_cast<_Mybase&>(*this);
; 259  : 		_STL_VERIFY(_Ptrsav != this->_Ptr, "cannot decrement begin map/set iterator");
; 260  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 261  : 
; 262  : 		return (*this);
; 263  : 		}
; 264  : 
; 265  : 	_Tree_const_iterator operator--(int)
; 266  : 		{	// postdecrement
; 267  : 		_Tree_const_iterator _Tmp = *this;
; 268  : 		--*this;
; 269  : 		return (_Tmp);
; 270  : 		}
; 271  : 
; 272  : 	_NODISCARD bool operator==(const _Tree_const_iterator& _Right) const
; 273  : 		{	// test for iterator equality
; 274  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 275  : 		_STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");
; 276  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 277  : 
; 278  : 		return (this->_Ptr == _Right._Ptr);
; 279  : 		}
; 280  : 
; 281  : 	_NODISCARD bool operator!=(const _Tree_const_iterator& _Right) const
; 282  : 		{	// test for iterator inequality
; 283  : 		return (!(*this == _Right));
; 284  : 		}
; 285  : 
; 286  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 287  : 	friend void _Verify_range(const _Tree_const_iterator& _First, const _Tree_const_iterator& _Last)
; 288  : 		{
; 289  : 		_STL_VERIFY(_First._Getcont() == _Last._Getcont(),
; 290  : 			"map/set iterators in range are from different containers");
; 291  : 		}
; 292  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 293  : 
; 294  : 	_NODISCARD _Tree_unchecked_const_iterator<_Mytree> _Unwrapped() const
; 295  : 		{
; 296  : 		return (_Tree_unchecked_const_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
; 297  : 		}
; 298  : 
; 299  : 	void _Seek_to(const _Tree_unchecked_const_iterator<_Mytree> _It)
; 300  : 		{
; 301  : 		this->_Ptr = _It._Ptr;
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : 	// CLASS TEMPLATE _Tree_iterator
; 306  : template<class _Mytree>
; 307  : 	class _Tree_iterator
; 308  : 		: public _Tree_const_iterator<_Mytree>
; 309  : 	{	// iterator for mutable tree
; 310  : public:
; 311  : 	using _Mybase = _Tree_const_iterator<_Mytree>;
; 312  : 	using iterator_category = bidirectional_iterator_tag;
; 313  : 
; 314  : 	using _Nodeptr = typename _Mytree::_Nodeptr;
; 315  : 	using value_type = typename _Mytree::value_type;
; 316  : 	using difference_type = typename _Mytree::difference_type;
; 317  : 
; 318  : 	using pointer = typename _Mytree::pointer;
; 319  : 	using reference = value_type&;
; 320  : 
; 321  : 	_Tree_iterator()
; 322  : 		{	// construct with null node
; 323  : 		}
; 324  : 
; 325  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 326  : 		: _Mybase(_Pnode, _Plist)
; 327  : 		{	// construct with node pointer _Pnode
; 328  : 		}
; 329  : 
; 330  : 	_NODISCARD reference operator*() const
; 331  : 		{	// return designated value
; 332  : 		return ((reference)**(_Mybase *)this);
; 333  : 		}
; 334  : 
; 335  : 	_NODISCARD pointer operator->() const
; 336  : 		{	// return pointer to class object
; 337  : 		return (pointer_traits<pointer>::pointer_to(**this));
; 338  : 		}
; 339  : 
; 340  : 	_Tree_iterator& operator++()
; 341  : 		{	// preincrement
; 342  : 		++static_cast<_Mybase&>(*this);
; 343  : 		return (*this);
; 344  : 		}
; 345  : 
; 346  : 	_Tree_iterator operator++(int)
; 347  : 		{	// postincrement
; 348  : 		_Tree_iterator _Tmp = *this;
; 349  : 		++*this;
; 350  : 		return (_Tmp);
; 351  : 		}
; 352  : 
; 353  : 	_Tree_iterator& operator--()
; 354  : 		{	// predecrement
; 355  : 		--static_cast<_Mybase&>(*this);
; 356  : 		return (*this);
; 357  : 		}
; 358  : 
; 359  : 	_Tree_iterator operator--(int)
; 360  : 		{	// postdecrement
; 361  : 		_Tree_iterator _Tmp = *this;
; 362  : 		--*this;
; 363  : 		return (_Tmp);
; 364  : 		}
; 365  : 
; 366  : 	_NODISCARD _Tree_unchecked_iterator<_Mytree> _Unwrapped() const
; 367  : 		{
; 368  : 		return (_Tree_unchecked_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
; 369  : 		}
; 370  : 	};
; 371  : 
; 372  : 		// tree TYPE WRAPPERS
; 373  : template<class _Value_type,
; 374  : 	class _Size_type,
; 375  : 	class _Difference_type,
; 376  : 	class _Pointer,
; 377  : 	class _Const_pointer,
; 378  : 	class _Reference,
; 379  : 	class _Const_reference,
; 380  : 	class _Nodeptr_type>
; 381  : 	struct _Tree_iter_types
; 382  : 	{	// wraps types needed by iterators
; 383  : 	using value_type = _Value_type;
; 384  : 	using size_type = _Size_type;
; 385  : 	using difference_type = _Difference_type;
; 386  : 	using pointer = _Pointer;
; 387  : 	using const_pointer = _Const_pointer;
; 388  : 	using _Nodeptr = _Nodeptr_type;
; 389  : 	};
; 390  : 
; 391  : template<class _Value_type,
; 392  : 	class _Voidptr>
; 393  : 	struct _Tree_node
; 394  : 		{	// tree node
; 395  : 		using _Nodeptr = _Rebind_pointer_t<_Voidptr, _Tree_node>;
; 396  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 397  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 398  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 399  : 		char _Color;	// _Red or _Black, _Black if head
; 400  : 		char _Isnil;	// true only if head (also nil) node
; 401  : 		_Value_type _Myval;	// the stored value, unused if head
; 402  : 
; 403  : 		_Tree_node& operator=(const _Tree_node&) = delete;
; 404  : 
; 405  : 		template<class _Alloc>
; 406  : 			static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept
; 407  : 			{
; 408  : 			using _Alnode = _Rebind_alloc_t<_Alloc, _Tree_node>;
; 409  : 			using _Alnode_traits = allocator_traits<_Alnode>;
; 410  : 			_Alnode _Node_alloc(_Al);
; 411  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Left));
; 412  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Parent));
; 413  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Right));
; 414  : 			_Alnode_traits::deallocate(_Node_alloc, _Ptr, 1);
; 415  : 			}
; 416  : 		};
; 417  : 
; 418  : template<class _Ty>
; 419  : 	struct _Tree_simple_types
; 420  : 		: public _Simple_types<_Ty>
; 421  : 	{	// wraps types needed by iterators
; 422  : 	using _Node = _Tree_node<_Ty, void *>;
; 423  : 	using _Nodeptr = _Node *;
; 424  : 	};
; 425  : 
; 426  : template<class _Ty,
; 427  : 	class _Alloc>
; 428  : 	struct _Tree_base_types
; 429  : 	{	// types needed for a container base
; 430  : 	using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
; 431  : 	using _Alty_traits = allocator_traits<_Alty>;
; 432  : 	using _Node = _Tree_node<_Ty, typename allocator_traits<_Alloc>::void_pointer>;
; 433  : 	using _Alnode = _Rebind_alloc_t<_Alloc, _Node>;
; 434  : 	using _Alnode_traits = allocator_traits<_Alnode>;
; 435  : 	using _Nodeptr = typename _Alnode_traits::pointer;
; 436  : 
; 437  : 	using _Val_types = conditional_t<_Is_simple_alloc_v<_Alnode>,
; 438  : 		_Tree_simple_types<_Ty>,
; 439  : 		_Tree_iter_types<_Ty,
; 440  : 			typename _Alty_traits::size_type,
; 441  : 			typename _Alty_traits::difference_type,
; 442  : 			typename _Alty_traits::pointer,
; 443  : 			typename _Alty_traits::const_pointer,
; 444  : 			_Ty&,
; 445  : 			const _Ty&,
; 446  : 			_Nodeptr>>;
; 447  : 	};
; 448  : 
; 449  : 		// CLASS TEMPLATE _Tree_val
; 450  : template<class _Val_types>
; 451  : 	class _Tree_val
; 452  : 		: public _Container_base
; 453  : 	{	// base class for tree to hold data
; 454  : public:
; 455  : 	using _Nodeptr = typename _Val_types::_Nodeptr;
; 456  : 
; 457  : 	using value_type = typename _Val_types::value_type;
; 458  : 	using size_type = typename _Val_types::size_type;
; 459  : 	using difference_type = typename _Val_types::difference_type;
; 460  : 	using pointer = typename _Val_types::pointer;
; 461  : 	using const_pointer = typename _Val_types::const_pointer;
; 462  : 	using reference = value_type&;
; 463  : 	using const_reference = const value_type&;
; 464  : 
; 465  : 	using const_iterator = _Tree_const_iterator<_Tree_val>;
; 466  : 
; 467  : 	_Tree_val()
; 468  : 		: _Myhead(),
; 469  : 		_Mysize(0)
; 470  : 		{	// initialize data
; 471  : 		}
; 472  : 
; 473  : 	enum _Redbl
; 474  : 		{	// colors for link to parent
; 475  : 		_Red, _Black};
; 476  : 
; 477  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 478  : 		{	// return rightmost node in subtree at _Pnode
; 479  : 		while (!_Pnode->_Right->_Isnil)
; 480  : 			_Pnode = _Pnode->_Right;
; 481  : 		return (_Pnode);
; 482  : 		}
; 483  : 
; 484  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 485  : 		{	// return leftmost node in subtree at _Pnode
; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rax, QWORD PTR [rcx]
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL18@erase
$LN15@erase:

; 1370 : 		++_Successor;	// save successor iterator for return
; 1371 : 		_Nodeptr _Erasednode = _My_data._Extract(_Where);	// node to erase

	mov	rdx, r8
	mov	rcx, rbp
	call	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Extract
	mov	rdi, rax
	lea	rcx, QWORD PTR [rax+48]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rdi+32], 0
	je	SHORT $LN38@erase
	cmp	DWORD PTR [rdi+40], 1
	jne	SHORT $LN38@erase

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rdi+32]
	call	QWORD PTR [rax+16]
	npad	1
$LN38@erase:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, rdi
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

	mov	QWORD PTR [rsi], rbx

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, rbp
	mov	rcx, rsi
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1372 : 
; 1373 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1374 : 		_Orphan_ptr(_Erasednode);
; 1375 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1376 : 
; 1377 : 		_Alnode& _Al = this->_Getal();
; 1378 : 		_Alnode_traits::destroy(_Al, _STD addressof(_Erasednode->_Myval));	// delete erased node
; 1379 : 		_Node::_Freenode0(_Al, _Erasednode);
; 1380 : 
; 1381 : 		return (iterator(_Successor._Ptr, _STD addressof(_My_data)));	// return successor iterator

	mov	rax, rsi

; 1382 : 		}

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first, COMDAT

; 292  : 		return (*this);

	mov	rax, rcx

; 293  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>, COMDAT

; 43   : 		{	// construct with node pointer _Pnode

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 42   : 		: _Ptr(_Pnode)

	mov	QWORD PTR [rcx], rdx

; 43   : 		{	// construct with node pointer _Pnode

	mov	rbx, rcx

; 44   : 		this->_Adopt(_Plist);

	mov	rdx, r8
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 45   : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
this$ = 48
_Where$ = 56
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Extract, COMDAT

; 562  : 		{	// extract node at _Where

$LN132:
	mov	QWORD PTR [rsp+24], rsi
	push	r14
	sub	rsp, 32					; 00000020H

; 59   : 		if (_Ptr->_Right->_Isnil)

	lea	r8, QWORD PTR [rdx+16]

; 562  : 		{	// extract node at _Where

	mov	QWORD PTR [rsp+56], rdi
	mov	rsi, rcx

; 563  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 564  : 		_STL_VERIFY(_Where._Getcont() == this
; 565  : 			&& !_Where._Ptr->_Isnil, "map/set erase iterator outside range");
; 566  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 567  : 
; 568  : 		_Nodeptr _Erasednode = _Where._Ptr;	// node to erase

	mov	r14, rdx

; 59   : 		if (_Ptr->_Right->_Isnil)

	mov	rcx, QWORD PTR [r8]
	cmp	BYTE PTR [rcx+25], 0
	je	SHORT $LN51@Extract

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

	mov	rcx, QWORD PTR [rdx+8]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN56@Extract
	npad	3
$LL49@Extract:
	cmp	rdx, QWORD PTR [rcx+16]
	jne	SHORT $LN56@Extract

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	rdx, rcx
	mov	rcx, QWORD PTR [rcx+8]
	cmp	BYTE PTR [rcx+25], 0
	je	SHORT $LL49@Extract

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else

	jmp	SHORT $LN56@Extract
$LN51@Extract:

; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rdx, QWORD PTR [rcx]
	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN56@Extract
	npad	2
$LL55@Extract:
	mov	rax, QWORD PTR [rdx]

; 487  : 			_Pnode = _Pnode->_Left;

	mov	rcx, rdx
	mov	rdx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL55@Extract
$LN56@Extract:

; 569  : 		++_Where;	// save successor iterator for return
; 570  : 
; 571  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 572  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 573  : 		_Nodeptr _Pnode = _Erasednode;
; 574  : 
; 575  : 		if (_Pnode->_Left->_Isnil)

	mov	rax, QWORD PTR [r14]
	mov	rdi, QWORD PTR [r8]
	mov	QWORD PTR [rsp+48], rbx
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN122@Extract

; 576  : 			{
; 577  : 			_Fixnode = _Pnode->_Right;	// stitch up right subtree
; 578  : 			}
; 579  : 		else if (_Pnode->_Right->_Isnil)

	cmp	BYTE PTR [rdi+25], 0
	je	SHORT $LN7@Extract

; 580  : 			{
; 581  : 			_Fixnode = _Pnode->_Left;	// stitch up left subtree

	mov	rdi, rax

; 582  : 			}
; 583  : 		else

	jmp	SHORT $LN122@Extract
$LN7@Extract:

; 584  : 			{	// two subtrees, must lift successor node to replace erased
; 585  : 			_Pnode = _Where._Ptr;	// _Pnode is successor node
; 586  : 			_Fixnode = _Pnode->_Right;	// _Fixnode is only subtree

	mov	rdi, QWORD PTR [rcx+16]

; 587  : 			}
; 588  : 
; 589  : 		if (_Pnode == _Erasednode)

	cmp	rcx, r14
	jne	$LN9@Extract
$LN122@Extract:

; 590  : 			{	// at most one subtree, relink it
; 591  : 			_Fixnodeparent = _Erasednode->_Parent;
; 592  : 			if (!_Fixnode->_Isnil)

	cmp	BYTE PTR [rdi+25], 0
	mov	rbx, QWORD PTR [r14+8]
	jne	SHORT $LN11@Extract

; 593  : 				_Fixnode->_Parent = _Fixnodeparent;	// link up

	mov	QWORD PTR [rdi+8], rbx
$LN11@Extract:

; 493  : 		return (_Myhead->_Parent);

	mov	rax, QWORD PTR [rsi]

; 594  : 
; 595  : 			if (_Root() == _Erasednode)

	cmp	QWORD PTR [rax+8], r14
	jne	SHORT $LN12@Extract

; 596  : 				{
; 597  : 				_Root() = _Fixnode;	// link down from root

	mov	QWORD PTR [rax+8], rdi
	jmp	SHORT $LN15@Extract
$LN12@Extract:

; 598  : 				}
; 599  : 			else if (_Fixnodeparent->_Left == _Erasednode)

	cmp	QWORD PTR [rbx], r14
	jne	SHORT $LN14@Extract

; 600  : 				{
; 601  : 				_Fixnodeparent->_Left = _Fixnode;	// link down to left

	mov	QWORD PTR [rbx], rdi

; 602  : 				}
; 603  : 			else

	jmp	SHORT $LN15@Extract
$LN14@Extract:

; 604  : 				{
; 605  : 				_Fixnodeparent->_Right = _Fixnode;	// link down to right

	mov	QWORD PTR [rbx+16], rdi
$LN15@Extract:

; 498  : 		return (_Myhead->_Left);

	mov	r8, QWORD PTR [rsi]

; 606  : 				}
; 607  : 
; 608  : 			if (_Lmost() == _Erasednode)

	cmp	QWORD PTR [r8], r14
	jne	SHORT $LN16@Extract

; 609  : 				{
; 610  : 				_Lmost() = _Fixnode->_Isnil

	cmp	BYTE PTR [rdi+25], 0
	je	SHORT $LN42@Extract
	mov	rdx, rbx
	jmp	SHORT $LN66@Extract
$LN42@Extract:

; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rcx, QWORD PTR [rdi]

; 609  : 				{
; 610  : 				_Lmost() = _Fixnode->_Isnil

	mov	rdx, rdi

; 486  : 		while (!_Pnode->_Left->_Isnil)

	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN66@Extract
	npad	14
$LL65@Extract:
	mov	rax, QWORD PTR [rcx]

; 487  : 			_Pnode = _Pnode->_Left;

	mov	rdx, rcx
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL65@Extract
$LN66@Extract:

; 609  : 				{
; 610  : 				_Lmost() = _Fixnode->_Isnil

	mov	QWORD PTR [r8], rdx
$LN16@Extract:

; 503  : 		return (_Myhead->_Right);

	mov	rdx, QWORD PTR [rsi]

; 611  : 					? _Fixnodeparent	// smallest is parent of erased node
; 612  : 					: _Min(_Fixnode);	// smallest in relinked subtree
; 613  : 				}
; 614  : 
; 615  : 			if (_Rmost() == _Erasednode)

	cmp	QWORD PTR [rdx+16], r14
	jne	$LN10@Extract

; 616  : 				{
; 617  : 				_Rmost() = _Fixnode->_Isnil

	cmp	BYTE PTR [rdi+25], 0
	je	SHORT $LN44@Extract
	mov	rcx, rbx
	mov	QWORD PTR [rdx+16], rbx

; 618  : 					? _Fixnodeparent	// largest is parent of erased node
; 619  : 					: _Max(_Fixnode);	// largest in relinked subtree
; 620  : 				}
; 621  : 			}
; 622  : 		else

	jmp	$LN10@Extract
$LN44@Extract:

; 479  : 		while (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [rdi+16]

; 616  : 				{
; 617  : 				_Rmost() = _Fixnode->_Isnil

	mov	rcx, rdi

; 479  : 		while (!_Pnode->_Right->_Isnil)

	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN74@Extract
	npad	2
$LL73@Extract:

; 480  : 			_Pnode = _Pnode->_Right;

	mov	rcx, rax
	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL73@Extract
$LN74@Extract:

; 616  : 				{
; 617  : 				_Rmost() = _Fixnode->_Isnil

	mov	QWORD PTR [rdx+16], rcx

; 618  : 					? _Fixnodeparent	// largest is parent of erased node
; 619  : 					: _Max(_Fixnode);	// largest in relinked subtree
; 620  : 				}
; 621  : 			}
; 622  : 		else

	jmp	SHORT $LN10@Extract
$LN9@Extract:

; 623  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 624  : 			_Erasednode->_Left->_Parent = _Pnode;	// link left up

	mov	QWORD PTR [rax+8], rcx

; 625  : 			_Pnode->_Left = _Erasednode->_Left;	// link successor down

	mov	rax, QWORD PTR [r14]
	mov	QWORD PTR [rcx], rax

; 626  : 
; 627  : 			if (_Pnode == _Erasednode->_Right)

	cmp	rcx, QWORD PTR [r8]
	jne	SHORT $LN18@Extract

; 628  : 				{
; 629  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

	mov	rbx, rcx

; 630  : 				}
; 631  : 			else

	jmp	SHORT $LN19@Extract
$LN18@Extract:

; 632  : 				{	// successor further down, link in place of erased
; 633  : 				_Fixnodeparent = _Pnode->_Parent;	// parent is successor's
; 634  : 				if (!_Fixnode->_Isnil)

	cmp	BYTE PTR [rdi+25], 0
	mov	rbx, QWORD PTR [rcx+8]
	jne	SHORT $LN20@Extract

; 635  : 					{
; 636  : 					_Fixnode->_Parent = _Fixnodeparent;	// link fix up

	mov	QWORD PTR [rdi+8], rbx
$LN20@Extract:

; 637  : 					}
; 638  : 
; 639  : 				_Fixnodeparent->_Left = _Fixnode;	// link fix down

	mov	QWORD PTR [rbx], rdi

; 640  : 				_Pnode->_Right = _Erasednode->_Right;	// link next down

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx+16], rax

; 641  : 				_Erasednode->_Right->_Parent = _Pnode;	// right up

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rax+8], rcx
$LN19@Extract:

; 493  : 		return (_Myhead->_Parent);

	mov	rax, QWORD PTR [rsi]

; 642  : 				}
; 643  : 
; 644  : 			if (_Root() == _Erasednode)

	cmp	QWORD PTR [rax+8], r14
	jne	SHORT $LN21@Extract

; 645  : 				{
; 646  : 				_Root() = _Pnode;	// link down from root

	mov	QWORD PTR [rax+8], rcx
	jmp	SHORT $LN24@Extract
$LN21@Extract:

; 647  : 				}
; 648  : 			else if (_Erasednode->_Parent->_Left == _Erasednode)

	mov	rax, QWORD PTR [r14+8]
	cmp	QWORD PTR [rax], r14
	jne	SHORT $LN23@Extract

; 649  : 				{
; 650  : 				_Erasednode->_Parent->_Left = _Pnode;	// link down to left

	mov	QWORD PTR [rax], rcx

; 651  : 				}
; 652  : 			else

	jmp	SHORT $LN24@Extract
$LN23@Extract:

; 653  : 				{
; 654  : 				_Erasednode->_Parent->_Right = _Pnode;	// link down to right

	mov	QWORD PTR [rax+16], rcx
$LN24@Extract:

; 655  : 				}
; 656  : 
; 657  : 			_Pnode->_Parent = _Erasednode->_Parent;	// link successor up

	mov	rax, QWORD PTR [r14+8]

; 658  : 			_STD swap(_Pnode->_Color, _Erasednode->_Color);	// recolor it

	lea	rdx, QWORD PTR [r14+24]
	mov	QWORD PTR [rcx+8], rax
	add	rcx, 24
	call	??$swap@DX@std@@YAXAEAD0@Z		; std::swap<char,void>
$LN10@Extract:

; 659  : 			}
; 660  : 
; 661  : 		if (_Erasednode->_Color == this->_Black)

	cmp	BYTE PTR [r14+24], 1
	jne	$LN25@Extract

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root()
; 664  : 				&& _Fixnode->_Color == this->_Black;

	mov	rax, QWORD PTR [rsi]
	cmp	rdi, QWORD PTR [rax+8]
	je	$LN3@Extract
	npad	12
$LL4@Extract:
	cmp	BYTE PTR [rdi+24], 1
	mov	r8, rbx
	jne	$LN3@Extract

; 666  : 				if (_Fixnode == _Fixnodeparent->_Left)

	mov	rdx, QWORD PTR [rbx]
	cmp	rdi, rdx
	jne	$LN26@Extract

; 667  : 					{	// fixup left subtree
; 668  : 					_Pnode = _Fixnodeparent->_Right;

	mov	rdx, QWORD PTR [rbx+16]

; 669  : 					if (_Pnode->_Color == this->_Red)

	cmp	BYTE PTR [rdx+24], 0
	jne	SHORT $LN123@Extract

; 670  : 						{	// rotate red up from right subtree
; 671  : 						_Pnode->_Color = this->_Black;

	mov	BYTE PTR [rdx+24], 1

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

	mov	rcx, QWORD PTR [rbx+16]

; 672  : 						_Fixnodeparent->_Color = this->_Red;

	mov	BYTE PTR [rbx+24], 0

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rbx+16], rax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

	mov	rax, QWORD PTR [rcx]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN85@Extract

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rbx
$LN85@Extract:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [rbx+8]
	mov	QWORD PTR [rcx+8], rax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

	mov	rax, QWORD PTR [rsi]
	cmp	rbx, QWORD PTR [rax+8]
	jne	SHORT $LN86@Extract

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], rcx
	jmp	SHORT $LN89@Extract
$LN86@Extract:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

	mov	rax, QWORD PTR [rbx+8]
	cmp	rbx, QWORD PTR [rax]
	jne	SHORT $LN88@Extract

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], rcx

; 525  : 			}
; 526  : 		else

	jmp	SHORT $LN89@Extract
$LN88@Extract:

; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], rcx
$LN89@Extract:

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

	mov	QWORD PTR [rcx], rbx

; 673  : 						_Lrotate(_Fixnodeparent);
; 674  : 						_Pnode = _Fixnodeparent->_Right;

	mov	rdx, QWORD PTR [rbx+16]

; 532  : 		_Wherenode->_Parent = _Pnode;

	mov	QWORD PTR [rbx+8], rcx
$LN123@Extract:

; 675  : 						}
; 676  : 
; 677  : 					if (_Pnode->_Isnil)

	cmp	BYTE PTR [rdx+25], 0
	jne	$LN2@Extract

; 678  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 679  : 					else if (_Pnode->_Left->_Color == this->_Black
; 680  : 						&& _Pnode->_Right->_Color == this->_Black)

	mov	rcx, QWORD PTR [rdx]
	cmp	BYTE PTR [rcx+24], 1
	jne	SHORT $LN125@Extract
	mov	rax, QWORD PTR [rdx+16]
	cmp	BYTE PTR [rax+24], 1
	je	$LN130@Extract
$LN125@Extract:

; 681  : 						{	// redden right subtree with black children
; 682  : 						_Pnode->_Color = this->_Red;
; 683  : 						_Fixnode = _Fixnodeparent;
; 684  : 						}
; 685  : 					else
; 686  : 						{	// must rearrange right subtree
; 687  : 						if (_Pnode->_Right->_Color == this->_Black)

	mov	rax, QWORD PTR [rdx+16]
	cmp	BYTE PTR [rax+24], 1
	jne	SHORT $LN33@Extract

; 688  : 							{	// rotate red up from left sub-subtree
; 689  : 							_Pnode->_Left->_Color = this->_Black;

	mov	BYTE PTR [rcx+24], 1

; 690  : 							_Pnode->_Color = this->_Red;
; 691  : 							_Rrotate(_Pnode);

	mov	rcx, rsi
	mov	BYTE PTR [rdx+24], 0
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Rrotate

; 692  : 							_Pnode = _Fixnodeparent->_Right;

	mov	rdx, QWORD PTR [rbx+16]
$LN33@Extract:

; 693  : 							}
; 694  : 
; 695  : 						_Pnode->_Color = _Fixnodeparent->_Color;

	movzx	eax, BYTE PTR [rbx+24]

; 696  : 						_Fixnodeparent->_Color = this->_Black;
; 697  : 						_Pnode->_Right->_Color = this->_Black;
; 698  : 						_Lrotate(_Fixnodeparent);

	mov	rcx, rsi
	mov	BYTE PTR [rdx+24], al
	mov	BYTE PTR [rbx+24], 1
	mov	rax, QWORD PTR [rdx+16]
	mov	rdx, rbx
	mov	BYTE PTR [rax+24], 1
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Lrotate

; 699  : 						break;	// tree now recolored/rebalanced

	jmp	$LN3@Extract
$LN26@Extract:

; 700  : 						}
; 701  : 					}
; 702  : 				else
; 703  : 					{	// fixup right subtree
; 704  : 					_Pnode = _Fixnodeparent->_Left;
; 705  : 					if (_Pnode->_Color == this->_Red)

	cmp	BYTE PTR [rdx+24], 0
	jne	SHORT $LN124@Extract

; 706  : 						{	// rotate red up from left subtree
; 707  : 						_Pnode->_Color = this->_Black;

	mov	BYTE PTR [rdx+24], 1

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

	mov	rcx, QWORD PTR [rbx]

; 708  : 						_Fixnodeparent->_Color = this->_Red;

	mov	BYTE PTR [rbx+24], 0

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

	mov	rax, QWORD PTR [rcx+16]
	mov	QWORD PTR [rbx], rax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN92@Extract

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rbx
$LN92@Extract:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [rbx+8]
	mov	QWORD PTR [rcx+8], rax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

	mov	rax, QWORD PTR [rsi]
	cmp	rbx, QWORD PTR [rax+8]
	jne	SHORT $LN93@Extract

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], rcx
	jmp	SHORT $LN96@Extract
$LN93@Extract:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

	mov	rax, QWORD PTR [rbx+8]
	cmp	rbx, QWORD PTR [rax+16]
	jne	SHORT $LN95@Extract

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], rcx

; 551  : 			}
; 552  : 		else

	jmp	SHORT $LN96@Extract
$LN95@Extract:

; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], rcx
$LN96@Extract:

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

	mov	QWORD PTR [rcx+16], rbx

; 709  : 						_Rrotate(_Fixnodeparent);
; 710  : 						_Pnode = _Fixnodeparent->_Left;

	mov	rdx, QWORD PTR [rbx]

; 558  : 		_Wherenode->_Parent = _Pnode;

	mov	QWORD PTR [rbx+8], rcx
$LN124@Extract:

; 711  : 						}
; 712  : 
; 713  : 					if (_Pnode->_Isnil)

	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN2@Extract

; 714  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 715  : 					else if (_Pnode->_Right->_Color == this->_Black
; 716  : 						&& _Pnode->_Left->_Color == this->_Black)

	mov	rcx, QWORD PTR [rdx+16]
	cmp	BYTE PTR [rcx+24], 1
	jne	SHORT $LN126@Extract
	mov	rax, QWORD PTR [rdx]
	cmp	BYTE PTR [rax+24], 1
	jne	SHORT $LN126@Extract
$LN130@Extract:

; 665  : 				_Fixnodeparent = _Fixnode->_Parent)

	mov	BYTE PTR [rdx+24], 0
$LN2@Extract:

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root()
; 664  : 				&& _Fixnode->_Color == this->_Black;

	mov	rax, QWORD PTR [rsi]
	mov	rdi, r8

; 665  : 				_Fixnodeparent = _Fixnode->_Parent)

	mov	rbx, QWORD PTR [rbx+8]
	cmp	r8, QWORD PTR [rax+8]
	jne	$LL4@Extract

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root()
; 664  : 				&& _Fixnode->_Color == this->_Black;

	jmp	SHORT $LN3@Extract
$LN126@Extract:

; 717  : 						{	// redden left subtree with black children
; 718  : 						_Pnode->_Color = this->_Red;
; 719  : 						_Fixnode = _Fixnodeparent;
; 720  : 						}
; 721  : 					else
; 722  : 						{	// must rearrange left subtree
; 723  : 						if (_Pnode->_Left->_Color == this->_Black)

	mov	rax, QWORD PTR [rdx]
	cmp	BYTE PTR [rax+24], 1
	jne	SHORT $LN39@Extract

; 724  : 							{	// rotate red up from right sub-subtree
; 725  : 							_Pnode->_Right->_Color = this->_Black;

	mov	BYTE PTR [rcx+24], 1

; 726  : 							_Pnode->_Color = this->_Red;
; 727  : 							_Lrotate(_Pnode);

	mov	rcx, rsi
	mov	BYTE PTR [rdx+24], 0
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Lrotate

; 728  : 							_Pnode = _Fixnodeparent->_Left;

	mov	rdx, QWORD PTR [rbx]
$LN39@Extract:

; 729  : 							}
; 730  : 
; 731  : 						_Pnode->_Color = _Fixnodeparent->_Color;

	movzx	eax, BYTE PTR [rbx+24]

; 732  : 						_Fixnodeparent->_Color = this->_Black;
; 733  : 						_Pnode->_Left->_Color = this->_Black;
; 734  : 						_Rrotate(_Fixnodeparent);

	mov	rcx, rsi
	mov	BYTE PTR [rdx+24], al
	mov	BYTE PTR [rbx+24], 1
	mov	rax, QWORD PTR [rdx]
	mov	rdx, rbx
	mov	BYTE PTR [rax+24], 1
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Rrotate
$LN3@Extract:

; 735  : 						break;	// tree now recolored/rebalanced
; 736  : 						}
; 737  : 					}
; 738  : 
; 739  : 			_Fixnode->_Color = this->_Black;	// stopping node is black

	mov	BYTE PTR [rdi+24], 1
$LN25@Extract:

; 740  : 			}
; 741  : 
; 742  : 		if (0 < _Mysize)

	mov	rcx, QWORD PTR [rsi+8]
	mov	rax, r14
	mov	rdi, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]
	test	rcx, rcx
	je	SHORT $LN40@Extract

; 743  : 			--_Mysize;

	dec	rcx
	mov	QWORD PTR [rsi+8], rcx
$LN40@Extract:

; 744  : 
; 745  : 		return (_Erasednode);
; 746  : 		}

	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Construct, COMDAT

; 807  : 		{	// construct head node

$LN11:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	QWORD PTR [rbx], rax

; 809  : 		}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
_TEXT	SEGMENT
this$ = 8
_Wherenode$ = 16
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Rrotate, COMDAT

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

	mov	r8, QWORD PTR [rdx]

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

	mov	rax, QWORD PTR [r8+16]
	mov	QWORD PTR [rdx], rax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [r8+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN2@Rrotate

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rdx
$LN2@Rrotate:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [r8+8], rax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

	mov	rax, QWORD PTR [rcx]
	cmp	rdx, QWORD PTR [rax+8]
	jne	SHORT $LN3@Rrotate

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], r8

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

	mov	QWORD PTR [r8+16], rdx
	mov	QWORD PTR [rdx+8], r8
	ret	0
$LN3@Rrotate:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

	mov	rax, QWORD PTR [rdx+8]
	cmp	rdx, QWORD PTR [rax+16]
	jne	SHORT $LN5@Rrotate

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], r8

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

	mov	QWORD PTR [r8+16], rdx
	mov	QWORD PTR [rdx+8], r8
	ret	0
$LN5@Rrotate:

; 551  : 			}
; 552  : 		else
; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], r8

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

	mov	QWORD PTR [r8+16], rdx
	mov	QWORD PTR [rdx+8], r8
	ret	0
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
_TEXT	SEGMENT
this$ = 8
_Wherenode$ = 16
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Lrotate, COMDAT

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

	mov	r8, QWORD PTR [rdx+16]

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rdx+16], rax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

	mov	rax, QWORD PTR [r8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN2@Lrotate

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rdx
$LN2@Lrotate:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [r8+8], rax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

	mov	rax, QWORD PTR [rcx]
	cmp	rdx, QWORD PTR [rax+8]
	jne	SHORT $LN3@Lrotate

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], r8

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

	mov	QWORD PTR [r8], rdx
	mov	QWORD PTR [rdx+8], r8
	ret	0
$LN3@Lrotate:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

	mov	rax, QWORD PTR [rdx+8]
	cmp	rdx, QWORD PTR [rax]
	jne	SHORT $LN5@Lrotate

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], r8

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

	mov	QWORD PTR [r8], rdx
	mov	QWORD PTR [rdx+8], r8
	ret	0
$LN5@Lrotate:

; 525  : 			}
; 526  : 		else
; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], r8

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

	mov	QWORD PTR [r8], rdx
	mov	QWORD PTR [rdx+8], r8
	ret	0
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ
_TEXT	SEGMENT
this$dead$ = 48
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode, COMDAT

; 927  : 		{	// get head node using current allocator

$LN36:
	push	rbx
	sub	rsp, 32					; 00000020H
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	rdx, rax
	mov	ecx, 8

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	rbx, rax

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	call	??2@YAPEAX_KPEAX@Z			; operator new
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 933  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Parent), _Pnode);

	lea	rdx, QWORD PTR [rbx+8]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	ecx, 8
	mov	QWORD PTR [rax], rbx
	call	??2@YAPEAX_KPEAX@Z			; operator new
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 934  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Right), _Pnode);

	lea	rdx, QWORD PTR [rbx+16]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	ecx, 8
	mov	QWORD PTR [rax], rbx
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 940  : 		_Pnode->_Color = _Black;

	mov	WORD PTR [rbx+24], 257			; 00000101H

; 941  : 		_Pnode->_Isnil = true;
; 942  : 		return (_Pnode);

	mov	rax, rbx

; 943  : 		}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$dead$ = 56
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocate, COMDAT

; 996  : 		{	// allocate array of _Count elements

$LN4:
	sub	rsp, 40					; 00000028H

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax

; 998  : 		}

	add	rsp, 40					; 00000028H

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	jmp	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_Count$dead$ = 24
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::deallocate, COMDAT

; 990  : 		{	// deallocate object at _Ptr

	mov	rcx, rdx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	edx, 72					; 00000048H
	jmp	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z PROC	; std::_Adl_verify_range<char const *,char const *>, COMDAT

; 616  : 	_Adl_verify_range1(_First, _Last, bool_constant<_Range_verifiable_v<_Iter, _Sentinel>>{});
; 617  : 	}

	ret	0
??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ENDP	; std::_Adl_verify_range<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$swap@TValueHolder@Value@Json@@X@std@@YAXAEATValueHolder@Value@Json@@0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
??$swap@TValueHolder@Value@Json@@X@std@@YAXAEATValueHolder@Value@Json@@0@Z PROC ; std::swap<Json::Value::ValueHolder,void>, COMDAT

; 67   : 	_Ty _Tmp = _STD move(_Left);
; 68   : 	_Left = _STD move(_Right);

	mov	r8, QWORD PTR [rdx]
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rcx], r8

; 69   : 	_Right = _STD move(_Tmp);

	mov	QWORD PTR [rdx], rax

; 70   : 	}

	ret	0
??$swap@TValueHolder@Value@Json@@X@std@@YAXAEATValueHolder@Value@Json@@0@Z ENDP ; std::swap<Json::Value::ValueHolder,void>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z
_TEXT	SEGMENT
$T3 = 32
this$ = 64
_Val1$ = 72
_Val2$dead$ = 80
??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z PROC ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>, COMDAT

; 174  : 		{

$LN19:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T3[rsp], -2
	mov	QWORD PTR [rsp+72], rbx
	mov	rbx, rdx
	mov	rdi, rcx
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rdx+8], 0
	je	SHORT $LN16@Value
	cmp	QWORD PTR [rdx], 0
	je	SHORT $LN16@Value
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+8]
	jmp	SHORT $LN10@Value
$LN16@Value:
	mov	rax, QWORD PTR [rdx]
$LN10@Value:
	mov	QWORD PTR [rdi], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN11@Value
	xor	eax, eax
	cmp	DWORD PTR [rbx+8], eax
	setne	al
	jmp	SHORT $LN12@Value
$LN11@Value:
	mov	eax, DWORD PTR [rbx+8]
$LN12@Value:
	mov	DWORD PTR [rdi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility

; 173  : 				second(_STD forward<_Other2>(_Val2))

	lea	rcx, QWORD PTR [rdi+16]
	lea	rdx, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1

; 175  : 		}

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T3 = 32
this$ = 64
_Val1$ = 72
_Val2$dead$ = 80
?dtor$0@?0???$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z@4HA PROC ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z@4HA ENDP ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 32
this$ = 64
_Val1$ = 72
_Val2$dead$ = 80
?dtor$0@?0???$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z@4HA PROC ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z@4HA ENDP ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
this$ = 64
__$ReturnUdt$ = 72
_Where$ = 80
_Val$ = 88
??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::insert<std::pair<Json::Value::CZString const ,Json::Value> &,void>, COMDAT

; 219  : 		{	// insert _Val with hint

$LN11:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rsi, rdx
	mov	rbx, r8
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1162 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	mov	rdx, r9
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map

; 219  : 		{	// insert _Val with hint

	mov	rdi, rcx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1162 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	call	??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

	mov	r8, rbx
	mov	QWORD PTR [rsp+32], rax
	mov	rdx, rsi
	mov	rcx, rdi
	lea	r9, QWORD PTR [rax+32]
	call	??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map

; 221  : 		}

	mov	rbx, QWORD PTR [rsp+64]
	mov	rax, rsi
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::insert<std::pair<Json::Value::CZString const ,Json::Value> &,void>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
$T3 = 32
$T2 = 64
this$ = 64
_First$ = 72
_Last$ = 80
_Al$ = 88
??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>, COMDAT

; 2221 : 		{	// construct from [_First, _Last) with optional allocator

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T3[rsp], -2
	mov	QWORD PTR [rsp+72], rbx
	mov	QWORD PTR [rsp+80], rsi
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx

; 2220 : 		: _Mybase(_Al)

	mov	rdx, r9
	call	??$?0AEBV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char> const &,void>
	npad	1

; 2222 : 		_Tidy_init();

	mov	rcx, rsi
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2223 : 		_Adl_verify_range(_First, _Last);
; 2224 : 		_Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>());

	movzx	r9d, BYTE PTR $T2[rsp]
	mov	r8, rbx
	mov	rdx, rdi
	mov	rcx, rsi
	call	?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXQEBD0Urandom_access_iterator_tag@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct
	npad	1

; 2225 : 		}

	mov	rax, rsi
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T3 = 32
$T2 = 64
this$ = 64
_First$ = 72
_Last$ = 80
_Al$ = 88
?dtor$0@?0???$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
?dtor$0@?0???$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 32
$T2 = 64
this$ = 64
_First$ = 72
_Last$ = 80
_Al$ = 88
?dtor$0@?0???$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
?dtor$0@?0???$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z
_TEXT	SEGMENT
this$ = 8
_Keyval$ = 16
??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>, COMDAT

; 2045 : 		_Nodeptr _Wherenode = this->_Get_data()._Myhead;	// end() if search fails

	mov	r9, QWORD PTR [rcx]
	mov	r10, rdx

; 2046 : 		_Nodeptr _Pnode = _Wherenode->_Parent;

	mov	r8, QWORD PTR [r9+8]

; 2047 : 
; 2048 : 		while (!_Pnode->_Isnil)

	cmp	BYTE PTR [r8+25], 0
	jne	SHORT $LN36@Lbound
$LL2@Lbound:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r8+32]
	test	rax, rax
	je	SHORT $LN28@Lbound

; 221  :    return *this;

	mov	rdx, QWORD PTR [r10]
	sub	rdx, rax
$LL33@Lbound:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN35@Lbound
	inc	rax
	test	cl, cl
	jne	SHORT $LL33@Lbound
	xor	eax, eax
	shr	eax, 31
	jmp	SHORT $LN27@Lbound
$LN35@Lbound:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN27@Lbound
$LN28@Lbound:

; 222  : }

	mov	eax, DWORD PTR [r10+8]
	cmp	DWORD PTR [r8+40], eax
	setl	al
$LN27@Lbound:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 2050 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

	test	al, al
	je	SHORT $LN4@Lbound

; 2051 : 				{
; 2052 : 				_Pnode = _Pnode->_Right;	// descend right subtree

	mov	r8, QWORD PTR [r8+16]

; 2053 : 				}
; 2054 : 			else

	jmp	SHORT $LN5@Lbound
$LN4@Lbound:

; 2055 : 				{	// _Pnode not less than _Keyval, remember it
; 2056 : 				_Wherenode = _Pnode;

	mov	r9, r8

; 2057 : 				_Pnode = _Pnode->_Left;	// descend left subtree

	mov	r8, QWORD PTR [r8]
$LN5@Lbound:

; 2047 : 
; 2048 : 		while (!_Pnode->_Isnil)

	cmp	BYTE PTR [r8+25], 0
	je	SHORT $LL2@Lbound
$LN36@Lbound:

; 2058 : 				}
; 2059 : 			}
; 2060 : 
; 2061 : 		return (_Wherenode);	// return best remembered candidate
; 2062 : 		}

	mov	rax, r9
	ret	0
??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT

; 330  : 	return (__builtin_addressof(_Val));

	mov	rax, rcx

; 331  : 	}

	ret	0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
$T22 = 32
$T17 = 64
this$ = 64
_Right$ = 72
_Al$dead$ = 80
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 1097 : 		{	// construct tree by copying _Right, allocator

$LN103:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T22[rsp], -2
	mov	QWORD PTR [rsp+72], rbx
	mov	QWORD PTR [rsp+80], rsi
	mov	rsi, rdx
	mov	rbx, rcx

; 468  : 		: _Myhead(),

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 469  : 		_Mysize(0)

	mov	QWORD PTR [rcx+8], rax

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	rdi, rax
	mov	QWORD PTR [rbx], rax

; 493  : 		return (_Myhead->_Parent);

	mov	rdx, QWORD PTR [rsi]

; 1899 : 		_My_data._Root() = _Copy_nodes(_Right._Get_data()._Root(), _My_data._Myhead, _Movefl);

	movzx	r9d, BYTE PTR $T17[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR [rdx+8]
	mov	rcx, rbx
	call	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
	mov	QWORD PTR [rdi+8], rax

; 1900 : 		_My_data._Mysize = _Right.size();

	mov	rax, QWORD PTR [rsi+8]
	mov	QWORD PTR [rbx+8], rax

; 493  : 		return (_Myhead->_Parent);

	mov	r8, QWORD PTR [rbx]

; 1901 : 		if (!_My_data._Root()->_Isnil)

	mov	rdx, QWORD PTR [r8+8]
	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN44@Value

; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rcx, QWORD PTR [rdx]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN77@Value
$LL76@Value:

; 487  : 			_Pnode = _Pnode->_Left;

	mov	rdx, rcx

; 481  : 		return (_Pnode);
; 482  : 		}
; 483  : 
; 484  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 485  : 		{	// return leftmost node in subtree at _Pnode
; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rax, QWORD PTR [rcx]
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL76@Value
$LN77@Value:

; 1903 : 			_My_data._Lmost() = _Mytreeval::_Min(_My_data._Root());

	mov	QWORD PTR [r8], rdx

; 493  : 		return (_Myhead->_Parent);

	mov	rdx, QWORD PTR [rbx]

; 1904 : 			_My_data._Rmost() = _Mytreeval::_Max(_My_data._Root());

	mov	rcx, QWORD PTR [rdx+8]

; 479  : 		while (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN85@Value
	npad	12
$LL84@Value:

; 480  : 			_Pnode = _Pnode->_Right;

	mov	rcx, rax

; 470  : 		{	// initialize data
; 471  : 		}
; 472  : 
; 473  : 	enum _Redbl
; 474  : 		{	// colors for link to parent
; 475  : 		_Red, _Black};
; 476  : 
; 477  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 478  : 		{	// return rightmost node in subtree at _Pnode
; 479  : 		while (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL84@Value
$LN85@Value:

; 1904 : 			_My_data._Rmost() = _Mytreeval::_Max(_My_data._Root());

	mov	QWORD PTR [rdx+16], rcx

; 1905 : 			}
; 1906 : 		else

	jmp	SHORT $LN45@Value
$LN44@Value:

; 1907 : 			{	// empty tree, just tidy head pointers
; 1908 : 			_My_data._Lmost() = _My_data._Myhead;

	mov	QWORD PTR [r8], r8

; 503  : 		return (_Myhead->_Right);

	mov	rax, QWORD PTR [rbx]

; 1909 : 			_My_data._Rmost() = _My_data._Myhead;

	mov	QWORD PTR [rax+16], rax
$LN45@Value:

; 1098 : 		_TRY_BEGIN
; 1099 : 		_Copy(_Right, _Copy_tag());
; 1100 : 		_CATCH_ALL
; 1101 : 		_Tidy();
; 1102 : 		_RERAISE;
; 1103 : 		_CATCH_END
; 1104 : 		}

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN101@Value:
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T22 = 32
$T17 = 64
this$ = 64
_Right$ = 72
_Al$dead$ = 80
?dtor$0@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
?dtor$0@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::dtor$0
$T22 = 32
$T17 = 64
this$ = 64
_Right$ = 72
_Al$dead$ = 80
?catch$1@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::catch$1

; 1098 : 		_TRY_BEGIN
; 1099 : 		_Copy(_Right, _Copy_tag());
; 1100 : 		_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z$0:

; 1098 : 		_TRY_BEGIN
; 1099 : 		_Copy(_Right, _Copy_tag());
; 1100 : 		_CATCH_ALL
; 1101 : 		_Tidy();

	mov	rcx, QWORD PTR this$[rbp]
	call	?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tidy

; 1098 : 		_TRY_BEGIN
; 1099 : 		_Copy(_Right, _Copy_tag());
; 1100 : 		_CATCH_ALL
; 1101 : 		_Tidy();
; 1102 : 		_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$1@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T22 = 32
$T17 = 64
this$ = 64
_Right$ = 72
_Al$dead$ = 80
?dtor$0@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
?dtor$0@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T22 = 32
$T17 = 64
this$ = 64
_Right$ = 72
_Al$dead$ = 80
?catch$1@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::catch$1

; 1100 : 		_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z$0:

; 1101 : 		_Tidy();

	mov	rcx, QWORD PTR this$[rbp]
	call	?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tidy

; 1102 : 		_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$1@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AEAV10@@Z PROC ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>, COMDAT

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	rax, rcx

; 1590 : 	}

	ret	0
??$move@AEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AEAV10@@Z ENDP ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAA@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Al$ = 56
??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAA@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > ><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void>, COMDAT

; 430  : 		{	// construct allocator from _Al

$LN11:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	call	??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\vector

; 431  : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAA@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > ><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AEAV10@@Z PROC ; std::move<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &>, COMDAT

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	rax, rcx

; 1590 : 	}

	ret	0
??$move@AEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AEAV10@@Z ENDP ; std::move<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z PROC ; std::addressof<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT

; 330  : 	return (__builtin_addressof(_Val));

	mov	rax, rcx

; 331  : 	}

	ret	0
??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z ENDP ; std::addressof<std::pair<Json::Value::CZString const ,Json::Value> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$dead$ = 64
_Ptr$ = 72
??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT

; 886  : 		{	// destroy object at _Ptr

$LN17:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T1[rsp], -2
	mov	rbx, rdx
	lea	rcx, QWORD PTR [rdx+16]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN13@destroy
	cmp	DWORD PTR [rbx+8], 1
	jne	SHORT $LN13@destroy

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+16]
	npad	1
$LN13@destroy:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 888  : 		}

	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::pair<Json::Value::CZString const ,Json::Value> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z
_TEXT	SEGMENT
$T4 = 32
_Al$dead$ = 64
_Ptr$ = 72
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z PROC ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 407  : 			{

$LN19:
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR $T4[rsp], -2
	mov	rcx, rdx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 415  : 			}

	add	rsp, 56					; 00000038H
	ret	0
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z ENDP ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$dead$ = 56
_Val1$dead$ = 64
<_Val2_0>$ = 72
??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString> const &,std::_Zero_then_variadic_args_t>, COMDAT

; 287  : 		{	// construct from forwarded values

$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rcx, r9
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

	xor	eax, eax
	mov	QWORD PTR [rbx], rax

; 469  : 		_Mysize(0)

	mov	QWORD PTR [rbx+8], rax
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
_Val$ = 8
??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn<Json::Value::CZString const ,Json::Value>, COMDAT

; 71   : 		return (_Val.first);

	mov	rax, rcx

; 72   : 		}

	ret	0
??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn<Json::Value::CZString const ,Json::Value>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAPEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAPEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT

; 330  : 	return (__builtin_addressof(_Val));

	mov	rax, rcx

; 331  : 	}

	ret	0
??$addressof@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAPEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAPEAU31@@Z
_TEXT	SEGMENT
__formal$dead$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAPEAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	ecx, 8
	mov	rbx, r8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$construct@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAPEAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__flags$dead$ = 72
??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z PROC ; std::pair<Json::Value::CZString const ,Json::Value>::`scalar deleting destructor', COMDAT
$LN15:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T1[rsp], -2
	mov	rbx, rcx
	add	rcx, 16
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN11@scalar
	cmp	DWORD PTR [rbx+8], 1
	jne	SHORT $LN11@scalar

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+16]
	npad	1
$LN11@scalar:
	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z
_TEXT	SEGMENT
__formal$dead$ = 8
_Ptr$ = 16
_Count$dead$ = 24
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::deallocate, COMDAT

; 871  : 		{	// deallocate _Count elements at _Ptr

	mov	rcx, rdx

; 872  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	jmp	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Compare@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA_NAEBVCZString@Value@Json@@0@Z
_TEXT	SEGMENT
this$dead$ = 8
_Left$ = 16
_Right$ = 24
?_Compare@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA_NAEBVCZString@Value@Json@@0@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Compare, COMDAT
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rdx]
	test	rax, rax
	je	SHORT $LN10@Compare

; 221  :    return *this;

	mov	rdx, QWORD PTR [r8]
	sub	rdx, rax
	npad	2
$LL12@Compare:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN14@Compare
	inc	rax
	test	cl, cl
	jne	SHORT $LL12@Compare
	xor	eax, eax
	shr	eax, 31
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 2033 : 		}

	ret	0
$LN14@Compare:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 221  :    return *this;

	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 2033 : 		}

	ret	0
$LN10@Compare:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 222  : }

	mov	eax, DWORD PTR [r8+8]
	cmp	DWORD PTR [rdx+8], eax
	setl	al
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 2033 : 		}

	ret	0
?_Compare@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA_NAEBVCZString@Value@Json@@0@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Compare
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA?AU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA?AU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::key_comp, COMDAT

; 1290 : 		return (this->_Getcomp());

	mov	rax, rdx

; 1291 : 		}

	ret	0
?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA?AU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::key_comp
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBAAEBU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBAAEBU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getcomp, COMDAT

; 1000 : 		return (_Mypair._Get_first());

	mov	rax, rcx

; 1001 : 		}

	ret	0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBAAEBU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEBAAEBU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEBAAEBU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_first, COMDAT

; 297  : 		return (*this);

	mov	rax, rcx

; 298  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEBAAEBU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Adl_verify_range1@PEBDPEBD@std@@YAXAEBQEBD0U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
__formal$ = 24
??$_Adl_verify_range1@PEBDPEBD@std@@YAXAEBQEBD0U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Adl_verify_range1<char const *,char const *>, COMDAT

; 610  : 	}

	ret	0
??$_Adl_verify_range1@PEBDPEBD@std@@YAXAEBQEBD0U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Adl_verify_range1<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AEATValueHolder@Value@Json@@@std@@YA$$QEATValueHolder@Value@Json@@AEAT123@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEATValueHolder@Value@Json@@@std@@YA$$QEATValueHolder@Value@Json@@AEAT123@@Z PROC ; std::move<Json::Value::ValueHolder &>, COMDAT

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	rax, rcx

; 1590 : 	}

	ret	0
??$move@AEATValueHolder@Value@Json@@@std@@YA$$QEATValueHolder@Value@Json@@AEAT123@@Z ENDP ; std::move<Json::Value::ValueHolder &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AEAVCZString@Value@Json@@@std@@YAAEAVCZString@Value@Json@@AEAV123@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAVCZString@Value@Json@@@std@@YAAEAVCZString@Value@Json@@AEAV123@@Z PROC ; std::forward<Json::Value::CZString &>, COMDAT

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	rax, rcx

; 1575 : 	}

	ret	0
??$forward@AEAVCZString@Value@Json@@@std@@YAAEAVCZString@Value@Json@@AEAV123@@Z ENDP ; std::forward<Json::Value::CZString &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AEBVValue@Json@@@std@@YAAEBVValue@Json@@AEBV12@@Z
_TEXT	SEGMENT
_Arg$dead$ = 8
??$forward@AEBVValue@Json@@@std@@YAAEBVValue@Json@@AEBV12@@Z PROC ; std::forward<Json::Value const &>, COMDAT

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	lea	rax, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null

; 1575 : 	}

	ret	0
??$forward@AEBVValue@Json@@@std@@YAAEBVValue@Json@@AEBV12@@Z ENDP ; std::forward<Json::Value const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z PROC ; std::forward<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	rax, rcx

; 1575 : 	}

	ret	0
??$forward@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z ENDP ; std::forward<std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
this$ = 64
__$ReturnUdt$ = 72
_Where$ = 80
<_Val_0>$ = 88
??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 1161 : 		{	// insert value_type(_Val...) at _Where

$LN7:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rsi, rdx
	mov	rbx, r8

; 1162 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	mov	rdx, r9
	mov	rdi, rcx
	call	??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

	mov	r8, rbx
	mov	QWORD PTR [rsp+32], rax
	mov	rdx, rsi
	mov	rcx, rdi
	lea	r9, QWORD PTR [rax+32]
	call	??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>

; 1164 : 		}

	mov	rbx, QWORD PTR [rsp+64]
	mov	rax, rsi
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z PROC		; std::_Get_unwrapped<char const >, COMDAT

; 663  : 	return (_Ptr);

	mov	rax, rcx

; 664  : 	}

	ret	0
??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ENDP		; std::_Get_unwrapped<char const >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@YA$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@YA$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@0@AEAV10@@Z PROC ; std::forward<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	rax, rcx

; 1575 : 	}

	ret	0
??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@YA$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@0@AEAV10@@Z ENDP ; std::forward<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Parg$dead$ = 56
_Al$dead$ = 64
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,void>, COMDAT

; 801  : 		{	// construct from comparator, allocator

$LN29:
	push	rbx
	sub	rsp, 32					; 00000020H

; 468  : 		: _Myhead(),

	xor	eax, eax

; 801  : 		{	// construct from comparator, allocator

	mov	rbx, rcx

; 468  : 		: _Myhead(),

	mov	QWORD PTR [rcx], rax

; 469  : 		_Mysize(0)

	mov	QWORD PTR [rcx+8], rax

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	QWORD PTR [rbx], rax

; 802  : 		_Construct();
; 803  : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,void>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
_Movefl$ = 64
??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>, COMDAT

; 1897 : 		{	// copy or move entire tree from _Right

$LN61:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 493  : 		return (_Myhead->_Parent);

	mov	rbx, QWORD PTR [rcx]

; 1897 : 		{	// copy or move entire tree from _Right

	mov	rdi, rdx

; 493  : 		return (_Myhead->_Parent);

	mov	rdx, QWORD PTR [rdx]

; 1898 : 		auto& _My_data = this->_Get_data();
; 1899 : 		_My_data._Root() = _Copy_nodes(_Right._Get_data()._Root(), _My_data._Myhead, _Movefl);

	movzx	r9d, r8b
	mov	r8, rbx
	mov	rsi, rcx
	mov	rdx, QWORD PTR [rdx+8]
	call	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
	mov	QWORD PTR [rbx+8], rax

; 493  : 		return (_Myhead->_Parent);

	mov	r8, QWORD PTR [rsi]

; 1900 : 		_My_data._Mysize = _Right.size();

	mov	rax, QWORD PTR [rdi+8]
	mov	QWORD PTR [rsi+8], rax

; 1901 : 		if (!_My_data._Root()->_Isnil)

	mov	rdx, QWORD PTR [r8+8]
	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN2@Copy

; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rcx, QWORD PTR [rdx]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN35@Copy
	npad	3
$LL34@Copy:
	mov	rax, QWORD PTR [rcx]

; 487  : 			_Pnode = _Pnode->_Left;

	mov	rdx, rcx
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL34@Copy
$LN35@Copy:

; 1902 : 			{	// nonempty tree, look for new smallest and largest
; 1903 : 			_My_data._Lmost() = _Mytreeval::_Min(_My_data._Root());

	mov	QWORD PTR [r8], rdx

; 493  : 		return (_Myhead->_Parent);

	mov	rdx, QWORD PTR [rsi]

; 1904 : 			_My_data._Rmost() = _Mytreeval::_Max(_My_data._Root());

	mov	rcx, QWORD PTR [rdx+8]

; 479  : 		while (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN43@Copy
$LL42@Copy:

; 480  : 			_Pnode = _Pnode->_Right;

	mov	rcx, rax
	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL42@Copy
$LN43@Copy:

; 1904 : 			_My_data._Rmost() = _Mytreeval::_Max(_My_data._Root());

	mov	QWORD PTR [rdx+16], rcx

; 1905 : 			}
; 1906 : 		else
; 1907 : 			{	// empty tree, just tidy head pointers
; 1908 : 			_My_data._Lmost() = _My_data._Myhead;
; 1909 : 			_My_data._Rmost() = _My_data._Myhead;
; 1910 : 			}
; 1911 : 		}

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@Copy:
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [r8], r8

; 503  : 		return (_Myhead->_Right);

	mov	rax, QWORD PTR [rsi]

; 1905 : 			}
; 1906 : 		else
; 1907 : 			{	// empty tree, just tidy head pointers
; 1908 : 			_My_data._Lmost() = _My_data._Myhead;
; 1909 : 			_My_data._Rmost() = _My_data._Myhead;
; 1910 : 			}
; 1911 : 		}

	mov	rsi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rax+16], rax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AEAV10@@Z PROC ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	rax, rcx

; 1575 : 	}

	ret	0
??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AEAV10@@Z ENDP ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Val1$ = 64
??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 287  : 		{	// construct from forwarded values

$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	call	??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 288  : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
_Ptr$dead$ = 16
??$destroy@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

	ret	0
??$destroy@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AEBU?$less@VCZString@Value@Json@@@std@@@std@@YAAEBU?$less@VCZString@Value@Json@@@0@AEBU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBU?$less@VCZString@Value@Json@@@std@@@std@@YAAEBU?$less@VCZString@Value@Json@@@0@AEBU10@@Z PROC ; std::forward<std::less<Json::Value::CZString> const &>, COMDAT

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	rax, rcx

; 1575 : 	}

	ret	0
??$forward@AEBU?$less@VCZString@Value@Json@@@std@@@std@@YAAEBU?$less@VCZString@Value@Json@@@0@AEBU10@@Z ENDP ; std::forward<std::less<Json::Value::CZString> const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 469  : 		_Mysize(0)

	mov	QWORD PTR [rcx+8], rax
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

	mov	rax, rcx
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>, COMDAT

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	rax, rcx

; 1575 : 	}

	ret	0
??$forward@AEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0CI@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Count$ = 8
??$_Get_size_of_n@$0CI@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<40>, COMDAT

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 25   : 	size_t _Result = _Count * _Ty_size;

	lea	rax, QWORD PTR [rcx+rcx*4]

; 26   : 	if (_Max_possible < _Count)

	mov	rdx, 461168601842738790			; 0666666666666666H
	shl	rax, 3
	mov	r8, -1
	cmp	rcx, rdx
	cmova	rax, r8

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);
; 30   : 		}
; 31   : 
; 32   : 	return (_Result);
; 33   : 	}

	ret	0
??$_Get_size_of_n@$0CI@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<40>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT

; 468  : 		: _Myhead(),

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 469  : 		_Mysize(0)

	mov	QWORD PTR [rcx+8], rax

; 471  : 		}

	mov	rax, rcx
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAA@XZ PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >, COMDAT

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

	mov	rax, rcx
	ret	0
??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAA@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
$T8 = 32
_Pnode$ = 64
this$ = 64
$T6 = 72
<_Val_0>$ = 72
??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 976  : 		{	// allocate a node with defaults and set links and value

$LN36:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T8[rsp], -2
	mov	QWORD PTR [rsp+80], rbx
	mov	QWORD PTR [rsp+88], rsi
	mov	rbx, rdx

; 977  : 		_Nodeptr _Pnode = _Buynode0();

	call	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode0
	mov	rdi, rax
	mov	QWORD PTR _Pnode$[rsp], rax

; 978  : 
; 979  : 		_Pnode->_Color = _Red;

	mov	WORD PTR [rax+24], 0

; 980  : 		_Pnode->_Isnil = false;
; 981  : 
; 982  : 		_TRY_BEGIN
; 983  : 		_Alnode_traits::construct(_Getal(),

	lea	rdx, QWORD PTR [rax+32]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	ecx, 40					; 00000028H
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rsi, rax
	mov	QWORD PTR $T6[rsp], rax
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rbx+8], 0
	je	SHORT $LN33@Buynode
	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN33@Buynode
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	r8, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [r8+8]
	jmp	SHORT $LN29@Buynode
$LN33@Buynode:
	mov	rax, QWORD PTR [rbx]
$LN29@Buynode:
	mov	QWORD PTR [rsi], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN30@Buynode
	xor	eax, eax
	cmp	DWORD PTR [rbx+8], eax
	setne	al
	jmp	SHORT $LN31@Buynode
$LN30@Buynode:
	mov	eax, DWORD PTR [rbx+8]
$LN31@Buynode:
	mov	DWORD PTR [rsi+8], eax

; 1719 :       }

	lea	rdx, QWORD PTR [rbx+16]
	lea	rcx, QWORD PTR [rsi+16]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 990  : 		return (_Pnode);

	mov	rax, rdi

; 991  : 		}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN34@Buynode:
??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
_Pnode$ = 64
this$ = 64
$T6 = 72
<_Val_0>$ = 72
?dtor$0@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
	mov	rcx, QWORD PTR $T6[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
$T8 = 32
_Pnode$ = 64
this$ = 64
$T6 = 72
<_Val_0>$ = 72
?catch$2@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::catch$2

; 984  : 			_STD addressof(_Pnode->_Myval), _STD forward<_Valty>(_Val)...);
; 985  : 		_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$0:

; 984  : 			_STD addressof(_Pnode->_Myval), _STD forward<_Valty>(_Val)...);
; 985  : 		_CATCH_ALL
; 986  : 		_Freenode0(_Pnode);

	mov	rdx, QWORD PTR _Pnode$[rbp]
	call	?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Freenode0

; 984  : 			_STD addressof(_Pnode->_Myval), _STD forward<_Valty>(_Val)...);
; 985  : 		_CATCH_ALL
; 986  : 		_Freenode0(_Pnode);
; 987  : 		_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$2@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::catch$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
_Pnode$ = 64
this$ = 64
$T6 = 72
<_Val_0>$ = 72
?dtor$0@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
	mov	rcx, QWORD PTR $T6[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
_Pnode$ = 64
this$ = 64
$T6 = 72
<_Val_0>$ = 72
?catch$2@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::catch$2

; 985  : 		_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$0:

; 986  : 		_Freenode0(_Pnode);

	mov	rdx, QWORD PTR _Pnode$[rbp]
	call	?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Freenode0

; 987  : 		_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$2@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::catch$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
_TEXT	SEGMENT
$T87 = 56
$T79 = 112
$T59 = 112
$T50 = 112
this$ = 112
__$ReturnUdt$ = 120
_Where$ = 128
_Val$ = 136
_Newnode$ = 144
??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT

; 1599 : 		{	// try to insert node using _Where as a hint

$LN526:
	mov	r11, rsp
	push	r12
	push	r14
	push	r15
	sub	rsp, 80					; 00000050H
	mov	QWORD PTR [r11-56], -2
	mov	QWORD PTR [r11+16], rbx
	mov	QWORD PTR [r11+24], rsi
	mov	QWORD PTR [r11+32], rdi
	mov	r12, r9
	mov	rdi, r8
	mov	r14, rdx
	mov	r15, rcx

; 1600 : 		const_iterator _Next;
; 1601 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1602 : 		auto& _My_data = this->_Get_data();
; 1603 : 
; 1604 : 		_TRY_BEGIN
; 1605 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1606 : 		_STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data), "map/set insert iterator outside range");
; 1607 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1608 : 
; 1609 : #pragma warning(push)
; 1610 : #pragma warning(disable: 4127)	// conditional expression is constant
; 1611 : 		if (size() == 0)

	cmp	QWORD PTR [rcx+8], 0
	jne	SHORT $LN3@Insert_hin

; 1612 : 			{
; 1613 : 			return (_Insert_at(true, _My_data._Myhead,

	mov	rax, QWORD PTR _Newnode$[rsp]
	mov	QWORD PTR [r11-64], rax
	mov	r9, QWORD PTR [rcx]
	mov	r8b, 1
	call	??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	rax, r14
	jmp	$LN1@Insert_hin
$LN3@Insert_hin:

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [rcx]

; 42   : 		: _Ptr(_Pnode)

	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR $T50[rsp], rcx

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, r15
	lea	rcx, QWORD PTR $T50[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 278  : 		return (this->_Ptr == _Right._Ptr);

	cmp	rdi, QWORD PTR $T50[rsp]

; 1614 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1615 : 			}
; 1616 : 		else if (this->_Multi)
; 1617 : 			{	// insert even if duplicate
; 1618 : 			if (_Where == begin())
; 1619 : 				{	// insert at beginning if before first element
; 1620 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1621 : 					this->_Key(_Where._Ptr), this->_Kfn(_Val)))
; 1622 : 					return (_Insert_at(true, _Where._Ptr,
; 1623 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1624 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1625 : 				}
; 1626 : 			else if (_Where == end())
; 1627 : 				{	// insert at end if after last element
; 1628 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1629 : 					this->_Kfn(_Val), this->_Key(_My_data._Rmost())))
; 1630 : 					return (_Insert_at(false, _My_data._Rmost(),
; 1631 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1632 : 				}
; 1633 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1634 : 				this->_Key(_Where._Ptr), this->_Kfn(_Val))
; 1635 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1636 : 					this->_Kfn(_Val),
; 1637 : 					this->_Key((--(_Next = _Where))._Ptr)))
; 1638 : 				{	// insert before _Where
; 1639 : 				if (_Next._Ptr->_Right->_Isnil)
; 1640 : 					return (_Insert_at(false, _Next._Ptr,
; 1641 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1642 : 				else
; 1643 : 					return (_Insert_at(true, _Where._Ptr,
; 1644 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1645 : 				}
; 1646 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1647 : 				this->_Kfn(_Val), this->_Key(_Where._Ptr))
; 1648 : 				&& (++(_Next = _Where) == end()
; 1649 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1650 : 						this->_Key(_Next._Ptr), this->_Kfn(_Val))))
; 1651 : 				{	// insert after _Where
; 1652 : 				if (_Where._Ptr->_Right->_Isnil)
; 1653 : 					return (_Insert_at(false, _Where._Ptr,
; 1654 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1655 : 				else
; 1656 : 					return (_Insert_at(true, _Next._Ptr,
; 1657 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1658 : 				}
; 1659 : 			else
; 1660 : 				{
; 1661 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1662 : 				}
; 1663 : 			}
; 1664 : 		else
; 1665 : 			{	// insert only if unique
; 1666 : 			if (_Where == begin())

	jne	SHORT $LN22@Insert_hin
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r12]
	test	rax, rax
	je	SHORT $LN311@Insert_hin

; 221  :    return *this;

	mov	rdx, QWORD PTR [rdi+32]
	sub	rdx, rax
$LL521@Insert_hin:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN523@Insert_hin
	inc	rax
	test	cl, cl
	jne	SHORT $LL521@Insert_hin
	xor	esi, esi
	shr	esi, 31
	jmp	SHORT $LN310@Insert_hin
$LN523@Insert_hin:
	sbb	esi, esi
	or	esi, 1
	shr	esi, 31
	jmp	SHORT $LN310@Insert_hin
$LN311@Insert_hin:

; 222  : }

	mov	eax, DWORD PTR [rdi+40]
	cmp	DWORD PTR [r12+8], eax
	setl	sil
$LN310@Insert_hin:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1668 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

	test	sil, sil
	je	$LN35@Insert_hin

; 1669 : 					this->_Kfn(_Val), this->_Key(_Where._Ptr)))
; 1670 : 					{
; 1671 : 					return (_Insert_at(true, _Where._Ptr,

	mov	rax, QWORD PTR _Newnode$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	r9, rdi
	mov	r8b, 1
	mov	rdx, r14
	mov	rcx, r15
	call	??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	rax, r14
	jmp	$LN1@Insert_hin
$LN22@Insert_hin:

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [r15]
	mov	QWORD PTR $T59[rsp], rax

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, r15
	lea	rcx, QWORD PTR $T59[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 278  : 		return (this->_Ptr == _Right._Ptr);

	cmp	rdi, QWORD PTR $T59[rsp]

; 1672 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1673 : 					}
; 1674 : 				}
; 1675 : 			else if (_Where == end())

	jne	SHORT $LN25@Insert_hin
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

	mov	rax, QWORD PTR [r15]
	mov	r9, QWORD PTR [rax+16]
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r9+32]
	test	rax, rax
	je	SHORT $LN352@Insert_hin

; 221  :    return *this;

	mov	rdx, QWORD PTR [r12]
	sub	rdx, rax
$LL518@Insert_hin:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN520@Insert_hin
	inc	rax
	test	cl, cl
	jne	SHORT $LL518@Insert_hin
	xor	esi, esi
	shr	esi, 31
	jmp	SHORT $LN351@Insert_hin
$LN520@Insert_hin:
	sbb	esi, esi
	or	esi, 1
	shr	esi, 31
	jmp	SHORT $LN351@Insert_hin
$LN352@Insert_hin:

; 222  : }

	mov	eax, DWORD PTR [r12+8]
	cmp	DWORD PTR [r9+40], eax
	setl	sil
$LN351@Insert_hin:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1677 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

	test	sil, sil
	je	$LN35@Insert_hin

; 1678 : 					this->_Key(_My_data._Rmost()), this->_Kfn(_Val)))
; 1679 : 					{
; 1680 : 					return (_Insert_at(false, _My_data._Rmost(),

	mov	rax, QWORD PTR _Newnode$[rsp]
	mov	QWORD PTR [rsp+40], rax
	xor	r8d, r8d
	mov	rdx, r14
	mov	rcx, r15
	call	??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	rax, r14
	jmp	$LN1@Insert_hin
$LN25@Insert_hin:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	r8, QWORD PTR [r12]
	test	r8, r8
	je	SHORT $LN375@Insert_hin

; 221  :    return *this;

	mov	rax, r8
	mov	rdx, QWORD PTR [rdi+32]
	sub	rdx, r8
	npad	4
$LL515@Insert_hin:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN517@Insert_hin
	inc	rax
	test	cl, cl
	jne	SHORT $LL515@Insert_hin
	xor	esi, esi
	mov	eax, esi
	shr	eax, 31
	jmp	SHORT $LN374@Insert_hin
$LN517@Insert_hin:
	sbb	eax, eax
	or	eax, 1
	xor	esi, esi
	shr	eax, 31
	jmp	SHORT $LN374@Insert_hin
$LN375@Insert_hin:

; 222  : }

	mov	eax, DWORD PTR [rdi+40]
	cmp	DWORD PTR [r12+8], eax
	setl	al
	xor	esi, esi
$LN374@Insert_hin:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1686 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

	test	al, al
	je	$LN501@Insert_hin
	mov	rax, rdi

; 86   : 		if (_Ptr->_Isnil)

	cmp	BYTE PTR [rdi+25], 0
	je	SHORT $LN386@Insert_hin

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

	mov	r9, QWORD PTR [rdi+16]
	jmp	SHORT $LN389@Insert_hin
$LN386@Insert_hin:

; 89   : 			}
; 90   : 		else if (_Ptr->_Left->_Isnil)

	mov	r9, QWORD PTR [rdi]
	cmp	BYTE PTR [r9+25], 0
	je	SHORT $LN388@Insert_hin

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

	mov	r9, QWORD PTR [rdi+8]
	cmp	BYTE PTR [r9+25], 0
	jne	SHORT $LN385@Insert_hin
	npad	3
$LL384@Insert_hin:
	cmp	rax, QWORD PTR [r9]
	jne	SHORT $LN385@Insert_hin

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

	mov	rax, r9

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

	mov	r9, QWORD PTR [r9+8]
	cmp	BYTE PTR [r9+25], 0
	je	SHORT $LL384@Insert_hin
$LN385@Insert_hin:

; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)
; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head
; 101  : 				}
; 102  : 			}
; 103  : 		else

	cmp	BYTE PTR [rax+25], 0
	cmovne	r9, rax
	jmp	SHORT $LN389@Insert_hin
$LN388@Insert_hin:

; 479  : 		while (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [r9+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN389@Insert_hin
	npad	9
$LL393@Insert_hin:

; 480  : 			_Pnode = _Pnode->_Right;

	mov	r9, rax

; 279  : 		}
; 280  : 
; 281  : 	_NODISCARD bool operator!=(const _Tree_const_iterator& _Right) const
; 282  : 		{	// test for iterator inequality
; 283  : 		return (!(*this == _Right));
; 284  : 		}
; 285  : 
; 286  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 287  : 	friend void _Verify_range(const _Tree_const_iterator& _First, const _Tree_const_iterator& _Last)
; 288  : 		{
; 289  : 		_STL_VERIFY(_First._Getcont() == _Last._Getcont(),
; 290  : 			"map/set iterators in range are from different containers");
; 291  : 		}
; 292  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 293  : 
; 294  : 	_NODISCARD _Tree_unchecked_const_iterator<_Mytree> _Unwrapped() const
; 295  : 		{
; 296  : 		return (_Tree_unchecked_const_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
; 297  : 		}
; 298  : 
; 299  : 	void _Seek_to(const _Tree_unchecked_const_iterator<_Mytree> _It)
; 300  : 		{
; 301  : 		this->_Ptr = _It._Ptr;
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : 	// CLASS TEMPLATE _Tree_iterator
; 306  : template<class _Mytree>
; 307  : 	class _Tree_iterator
; 308  : 		: public _Tree_const_iterator<_Mytree>
; 309  : 	{	// iterator for mutable tree
; 310  : public:
; 311  : 	using _Mybase = _Tree_const_iterator<_Mytree>;
; 312  : 	using iterator_category = bidirectional_iterator_tag;
; 313  : 
; 314  : 	using _Nodeptr = typename _Mytree::_Nodeptr;
; 315  : 	using value_type = typename _Mytree::value_type;
; 316  : 	using difference_type = typename _Mytree::difference_type;
; 317  : 
; 318  : 	using pointer = typename _Mytree::pointer;
; 319  : 	using reference = value_type&;
; 320  : 
; 321  : 	_Tree_iterator()
; 322  : 		{	// construct with null node
; 323  : 		}
; 324  : 
; 325  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 326  : 		: _Mybase(_Pnode, _Plist)
; 327  : 		{	// construct with node pointer _Pnode
; 328  : 		}
; 329  : 
; 330  : 	_NODISCARD reference operator*() const
; 331  : 		{	// return designated value
; 332  : 		return ((reference)**(_Mybase *)this);
; 333  : 		}
; 334  : 
; 335  : 	_NODISCARD pointer operator->() const
; 336  : 		{	// return pointer to class object
; 337  : 		return (pointer_traits<pointer>::pointer_to(**this));
; 338  : 		}
; 339  : 
; 340  : 	_Tree_iterator& operator++()
; 341  : 		{	// preincrement
; 342  : 		++static_cast<_Mybase&>(*this);
; 343  : 		return (*this);
; 344  : 		}
; 345  : 
; 346  : 	_Tree_iterator operator++(int)
; 347  : 		{	// postincrement
; 348  : 		_Tree_iterator _Tmp = *this;
; 349  : 		++*this;
; 350  : 		return (_Tmp);
; 351  : 		}
; 352  : 
; 353  : 	_Tree_iterator& operator--()
; 354  : 		{	// predecrement
; 355  : 		--static_cast<_Mybase&>(*this);
; 356  : 		return (*this);
; 357  : 		}
; 358  : 
; 359  : 	_Tree_iterator operator--(int)
; 360  : 		{	// postdecrement
; 361  : 		_Tree_iterator _Tmp = *this;
; 362  : 		--*this;
; 363  : 		return (_Tmp);
; 364  : 		}
; 365  : 
; 366  : 	_NODISCARD _Tree_unchecked_iterator<_Mytree> _Unwrapped() const
; 367  : 		{
; 368  : 		return (_Tree_unchecked_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
; 369  : 		}
; 370  : 	};
; 371  : 
; 372  : 		// tree TYPE WRAPPERS
; 373  : template<class _Value_type,
; 374  : 	class _Size_type,
; 375  : 	class _Difference_type,
; 376  : 	class _Pointer,
; 377  : 	class _Const_pointer,
; 378  : 	class _Reference,
; 379  : 	class _Const_reference,
; 380  : 	class _Nodeptr_type>
; 381  : 	struct _Tree_iter_types
; 382  : 	{	// wraps types needed by iterators
; 383  : 	using value_type = _Value_type;
; 384  : 	using size_type = _Size_type;
; 385  : 	using difference_type = _Difference_type;
; 386  : 	using pointer = _Pointer;
; 387  : 	using const_pointer = _Const_pointer;
; 388  : 	using _Nodeptr = _Nodeptr_type;
; 389  : 	};
; 390  : 
; 391  : template<class _Value_type,
; 392  : 	class _Voidptr>
; 393  : 	struct _Tree_node
; 394  : 		{	// tree node
; 395  : 		using _Nodeptr = _Rebind_pointer_t<_Voidptr, _Tree_node>;
; 396  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 397  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 398  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 399  : 		char _Color;	// _Red or _Black, _Black if head
; 400  : 		char _Isnil;	// true only if head (also nil) node
; 401  : 		_Value_type _Myval;	// the stored value, unused if head
; 402  : 
; 403  : 		_Tree_node& operator=(const _Tree_node&) = delete;
; 404  : 
; 405  : 		template<class _Alloc>
; 406  : 			static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept
; 407  : 			{
; 408  : 			using _Alnode = _Rebind_alloc_t<_Alloc, _Tree_node>;
; 409  : 			using _Alnode_traits = allocator_traits<_Alnode>;
; 410  : 			_Alnode _Node_alloc(_Al);
; 411  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Left));
; 412  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Parent));
; 413  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Right));
; 414  : 			_Alnode_traits::deallocate(_Node_alloc, _Ptr, 1);
; 415  : 			}
; 416  : 		};
; 417  : 
; 418  : template<class _Ty>
; 419  : 	struct _Tree_simple_types
; 420  : 		: public _Simple_types<_Ty>
; 421  : 	{	// wraps types needed by iterators
; 422  : 	using _Node = _Tree_node<_Ty, void *>;
; 423  : 	using _Nodeptr = _Node *;
; 424  : 	};
; 425  : 
; 426  : template<class _Ty,
; 427  : 	class _Alloc>
; 428  : 	struct _Tree_base_types
; 429  : 	{	// types needed for a container base
; 430  : 	using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
; 431  : 	using _Alty_traits = allocator_traits<_Alty>;
; 432  : 	using _Node = _Tree_node<_Ty, typename allocator_traits<_Alloc>::void_pointer>;
; 433  : 	using _Alnode = _Rebind_alloc_t<_Alloc, _Node>;
; 434  : 	using _Alnode_traits = allocator_traits<_Alnode>;
; 435  : 	using _Nodeptr = typename _Alnode_traits::pointer;
; 436  : 
; 437  : 	using _Val_types = conditional_t<_Is_simple_alloc_v<_Alnode>,
; 438  : 		_Tree_simple_types<_Ty>,
; 439  : 		_Tree_iter_types<_Ty,
; 440  : 			typename _Alty_traits::size_type,
; 441  : 			typename _Alty_traits::difference_type,
; 442  : 			typename _Alty_traits::pointer,
; 443  : 			typename _Alty_traits::const_pointer,
; 444  : 			_Ty&,
; 445  : 			const _Ty&,
; 446  : 			_Nodeptr>>;
; 447  : 	};
; 448  : 
; 449  : 		// CLASS TEMPLATE _Tree_val
; 450  : template<class _Val_types>
; 451  : 	class _Tree_val
; 452  : 		: public _Container_base
; 453  : 	{	// base class for tree to hold data
; 454  : public:
; 455  : 	using _Nodeptr = typename _Val_types::_Nodeptr;
; 456  : 
; 457  : 	using value_type = typename _Val_types::value_type;
; 458  : 	using size_type = typename _Val_types::size_type;
; 459  : 	using difference_type = typename _Val_types::difference_type;
; 460  : 	using pointer = typename _Val_types::pointer;
; 461  : 	using const_pointer = typename _Val_types::const_pointer;
; 462  : 	using reference = value_type&;
; 463  : 	using const_reference = const value_type&;
; 464  : 
; 465  : 	using const_iterator = _Tree_const_iterator<_Tree_val>;
; 466  : 
; 467  : 	_Tree_val()
; 468  : 		: _Myhead(),
; 469  : 		_Mysize(0)
; 470  : 		{	// initialize data
; 471  : 		}
; 472  : 
; 473  : 	enum _Redbl
; 474  : 		{	// colors for link to parent
; 475  : 		_Red, _Black};
; 476  : 
; 477  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 478  : 		{	// return rightmost node in subtree at _Pnode
; 479  : 		while (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL393@Insert_hin
$LN389@Insert_hin:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r9+32]
	test	rax, rax
	je	SHORT $LN409@Insert_hin

; 221  :    return *this;

	mov	rdx, r8
	sub	rdx, rax
	npad	4
$LL512@Insert_hin:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN514@Insert_hin
	inc	rax
	test	cl, cl
	jne	SHORT $LL512@Insert_hin
	mov	eax, esi
	shr	eax, 31
	jmp	SHORT $LN408@Insert_hin
$LN514@Insert_hin:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN408@Insert_hin
$LN409@Insert_hin:

; 222  : }

	mov	eax, DWORD PTR [r12+8]
	cmp	DWORD PTR [r9+40], eax
	setl	al
$LN408@Insert_hin:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1686 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

	test	al, al
	je	SHORT $LN501@Insert_hin

; 1687 : 					this->_Key((--(_Next = _Where))._Ptr),
; 1688 : 					this->_Kfn(_Val)))
; 1689 : 				{	// insert before _Where
; 1690 : 				if (_Next._Ptr->_Right->_Isnil)

	mov	rax, QWORD PTR [r9+16]
	mov	rdx, r14
	mov	rcx, r15
	cmp	BYTE PTR [rax+25], 0
	mov	rax, QWORD PTR _Newnode$[rsp]
	mov	QWORD PTR [rsp+40], rax
	je	SHORT $LN30@Insert_hin

; 1691 : 					{
; 1692 : 					return (_Insert_at(false, _Next._Ptr,

	xor	r8d, r8d
	call	??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	rax, r14
	jmp	$LN1@Insert_hin
$LN30@Insert_hin:

; 1693 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1694 : 					}
; 1695 : 				else
; 1696 : 					{
; 1697 : 					return (_Insert_at(true, _Where._Ptr,

	mov	r9, rdi
	mov	r8b, 1
	call	??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	rax, r14
	jmp	$LN1@Insert_hin
$LN501@Insert_hin:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rdi+32]
	test	rax, rax
	je	SHORT $LN432@Insert_hin

; 221  :    return *this;

	sub	r8, rax
	npad	4
$LL509@Insert_hin:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+r8]
	jne	SHORT $LN511@Insert_hin
	inc	rax
	test	cl, cl
	jne	SHORT $LL509@Insert_hin
	mov	eax, esi
	shr	eax, 31
	jmp	SHORT $LN431@Insert_hin
$LN511@Insert_hin:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN431@Insert_hin
$LN432@Insert_hin:

; 222  : }

	mov	eax, DWORD PTR [r12+8]
	cmp	DWORD PTR [rdi+40], eax
	setl	al
$LN431@Insert_hin:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1703 : 				&& (++(_Next = _Where) == end()

	test	al, al
	je	$LN35@Insert_hin
	mov	rbx, rdi

; 42   : 		: _Ptr(_Pnode)

	mov	rax, QWORD PTR [r15]
	mov	QWORD PTR $T79[rsp], rax

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, r15
	lea	rcx, QWORD PTR $T79[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 59   : 		if (_Ptr->_Right->_Isnil)

	mov	r9, QWORD PTR [rdi+16]
	movzx	r8d, BYTE PTR [r9+25]
	test	r8b, r8b
	je	SHORT $LN455@Insert_hin

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

	mov	r9, QWORD PTR [rdi+8]
	cmp	BYTE PTR [r9+25], 0
	jne	SHORT $LN456@Insert_hin
$LL453@Insert_hin:
	cmp	rbx, QWORD PTR [r9+16]
	jne	SHORT $LN456@Insert_hin

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	rbx, r9

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

	mov	r9, QWORD PTR [r9+8]
	cmp	BYTE PTR [r9+25], 0
	je	SHORT $LL453@Insert_hin

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else

	jmp	SHORT $LN456@Insert_hin
$LN455@Insert_hin:

; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rcx, QWORD PTR [r9]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN456@Insert_hin
	npad	12
$LL459@Insert_hin:

; 487  : 			_Pnode = _Pnode->_Left;

	mov	r9, rcx

; 481  : 		return (_Pnode);
; 482  : 		}
; 483  : 
; 484  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 485  : 		{	// return leftmost node in subtree at _Pnode
; 486  : 		while (!_Pnode->_Left->_Isnil)

	mov	rax, QWORD PTR [rcx]
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL459@Insert_hin
$LN456@Insert_hin:

; 278  : 		return (this->_Ptr == _Right._Ptr);

	cmp	r9, QWORD PTR $T79[rsp]

; 1703 : 				&& (++(_Next = _Where) == end()

	je	SHORT $LN33@Insert_hin
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r12]
	test	rax, rax
	je	SHORT $LN481@Insert_hin

; 221  :    return *this;

	mov	rdx, QWORD PTR [r9+32]
	sub	rdx, rax
$LL506@Insert_hin:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN508@Insert_hin
	inc	rax
	test	cl, cl
	jne	SHORT $LL506@Insert_hin
	shr	esi, 31
	jmp	SHORT $LN480@Insert_hin
$LN508@Insert_hin:
	sbb	esi, esi
	or	esi, 1
	shr	esi, 31
	jmp	SHORT $LN480@Insert_hin
$LN481@Insert_hin:

; 222  : }

	mov	eax, DWORD PTR [r9+40]
	cmp	DWORD PTR [r12+8], eax
	setl	sil
$LN480@Insert_hin:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1703 : 				&& (++(_Next = _Where) == end()

	test	sil, sil
	je	SHORT $LN35@Insert_hin
$LN33@Insert_hin:

; 1704 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1705 : 						this->_Kfn(_Val), this->_Key(_Next._Ptr))))
; 1706 : 				{	// insert after _Where
; 1707 : 				if (_Where._Ptr->_Right->_Isnil)

	mov	rax, QWORD PTR _Newnode$[rsp]
	mov	rdx, r14
	mov	rcx, r15
	mov	QWORD PTR [rsp+40], rax
	test	r8b, r8b
	je	SHORT $LN34@Insert_hin

; 1708 : 					{
; 1709 : 					return (_Insert_at(false, _Where._Ptr,

	mov	r9, rdi
	xor	r8d, r8d
	call	??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	rax, r14
	jmp	SHORT $LN1@Insert_hin
$LN34@Insert_hin:

; 1710 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1711 : 					}
; 1712 : 				else
; 1713 : 					{
; 1714 : 					return (_Insert_at(true, _Next._Ptr,

	mov	r8b, 1
	call	??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	rax, r14
	jmp	SHORT $LN1@Insert_hin
$LN35@Insert_hin:

; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 					}
; 1717 : 				}
; 1718 : 			}
; 1719 : #pragma warning(pop)
; 1720 : 		_CATCH_ALL
; 1721 : 		_Destroy_if_node(_Newnode);
; 1722 : 		_RERAISE;
; 1723 : 		_CATCH_END
; 1724 : 
; 1725 : 		return (_Insert_nohint(_Leftish,

	mov	rax, QWORD PTR _Newnode$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, r12
	lea	rdx, QWORD PTR $T87[rsp]
	mov	rcx, r15
	call	??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_nohint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [r14], rcx
	mov	rax, r14
$LN1@Insert_hin:

; 1726 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1727 : 		}

	lea	r11, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rdi, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r12
	ret	0
	int	3
$LN524@Insert_hin:
??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T87 = 56
$T79 = 112
$T59 = 112
$T50 = 112
this$ = 112
__$ReturnUdt$ = 120
_Where$ = 128
_Val$ = 136
_Newnode$ = 144
?catch$0@?0???$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>'::`1'::catch$0

; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 					}
; 1717 : 				}
; 1718 : 			}
; 1719 : #pragma warning(pop)
; 1720 : 		_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 48					; 00000030H
	mov	rbp, rdx
__catch$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z$0:

; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 					}
; 1717 : 				}
; 1718 : 			}
; 1719 : #pragma warning(pop)
; 1720 : 		_CATCH_ALL
; 1721 : 		_Destroy_if_node(_Newnode);

	mov	rdx, QWORD PTR _Newnode$[rbp]
	call	?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_node

; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 					}
; 1717 : 				}
; 1718 : 			}
; 1719 : #pragma warning(pop)
; 1720 : 		_CATCH_ALL
; 1721 : 		_Destroy_if_node(_Newnode);
; 1722 : 		_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0???$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T87 = 56
$T79 = 112
$T59 = 112
$T50 = 112
this$ = 112
__$ReturnUdt$ = 120
_Where$ = 128
_Val$ = 136
_Newnode$ = 144
?catch$0@?0???$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>'::`1'::catch$0

; 1720 : 		_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 48					; 00000030H
	mov	rbp, rdx
__catch$??$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z$0:

; 1721 : 		_Destroy_if_node(_Newnode);

	mov	rdx, QWORD PTR _Newnode$[rbp]
	call	?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_node

; 1722 : 		_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0???$_Insert_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU21@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
_Val1$dead$ = 24
<_Val2_0>$dead$ = 32
<_Val2_1>$dead$ = 40
??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU21@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString> const &,std::_One_then_variadic_args_t,std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 469  : 		_Mysize(0)

	mov	QWORD PTR [rcx+8], rax
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

	mov	rax, rcx
	ret	0
??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU21@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString> const &,std::_One_then_variadic_args_t,std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
_TEXT	SEGMENT
$T4 = 32
this$ = 96
_Newroot$ = 104
_Rootnode$ = 104
_Wherenode$ = 112
_Movefl$ = 120
??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>, COMDAT

; 1937 : 		{	// copy entire subtree, recursively

$LN20:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T4[rsp], -2
	mov	QWORD PTR [rsp+112], rbx
	movzx	ebx, r9b
	mov	r12, r8
	mov	r15, rdx
	mov	r14, rcx

; 1938 : 		_Nodeptr _Newroot = this->_Get_data()._Myhead;	// point at nil node

	mov	rsi, QWORD PTR [rcx]

; 1939 : 
; 1940 : 		if (!_Rootnode->_Isnil)

	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN8@Copy_nodes

; 1941 : 			{	// copy or move a node, then any subtrees
; 1942 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1943 : 			_Nodeptr _Pnode = _Copy_or_move(_Rootnode->_Myval, _Movefl, _Is_set);

	add	rdx, 32					; 00000020H

; 1917 : 		return (this->_Buynode(_Val));

	call	??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
	mov	rdi, rax

; 1944 : 			_Pnode->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], r12

; 1945 : 			_Pnode->_Color = _Rootnode->_Color;

	movzx	eax, BYTE PTR [r15+24]
	mov	BYTE PTR [rdi+24], al

; 1946 : 			if (_Newroot->_Isnil)

	cmp	BYTE PTR [rsi+25], 0
	cmovne	rsi, rdi
	mov	QWORD PTR _Newroot$[rsp], rsi

; 1947 : 				_Newroot = _Pnode;	// memorize new root
; 1948 : 
; 1949 : 			_TRY_BEGIN
; 1950 : 			_Pnode->_Left = _Copy_nodes(_Rootnode->_Left, _Pnode, _Movefl);

	movzx	r9d, bl
	mov	r8, rdi
	mov	rdx, QWORD PTR [r15]
	mov	rcx, r14
	call	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
	mov	QWORD PTR [rdi], rax

; 1951 : 			_Pnode->_Right = _Copy_nodes(_Rootnode->_Right, _Pnode, _Movefl);

	movzx	r9d, bl
	mov	r8, rdi
	mov	rdx, QWORD PTR [r15+16]
	mov	rcx, r14
	call	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
	mov	QWORD PTR [rdi+16], rax
$LN8@Copy_nodes:

; 1952 : 			_CATCH_ALL
; 1953 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 1954 : 			_RERAISE;
; 1955 : 			_CATCH_END
; 1956 : 			}
; 1957 : 
; 1958 : 		return (_Newroot);	// return newly constructed tree

	mov	rax, rsi

; 1959 : 		}

	mov	rbx, QWORD PTR [rsp+112]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
$LN18@Copy_nodes:
??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T4 = 32
this$ = 96
_Newroot$ = 104
_Rootnode$ = 104
_Wherenode$ = 112
_Movefl$ = 120
?catch$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::catch$0

; 1952 : 			_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z$0:

; 1952 : 			_CATCH_ALL
; 1953 : 			_Erase(_Newroot);	// subtree copy failed, bail out

	mov	rdx, QWORD PTR _Newroot$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 1952 : 			_CATCH_ALL
; 1953 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 1954 : 			_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T4 = 32
this$ = 96
_Newroot$ = 104
_Rootnode$ = 104
_Wherenode$ = 112
_Movefl$ = 120
?catch$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::catch$0

; 1952 : 			_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z$0:

; 1953 : 			_Erase(_Newroot);	// subtree copy failed, bail out

	mov	rdx, QWORD PTR _Newroot$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 1954 : 			_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAAEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAAEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AEAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &>, COMDAT

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	rax, rcx

; 1575 : 	}

	ret	0
??$forward@AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAAEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AEAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
_TEXT	SEGMENT
$T7 = 32
this$dead$ = 64
_Pnode$ = 72
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Freenode0, COMDAT

; 970  : 		{	// free non-value node using current allocator

$LN28:
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR $T7[rsp], -2
	mov	rcx, rdx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 972  : 		}

	add	rsp, 56					; 00000038H
	ret	0
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode0, COMDAT

; 951  : 		{	// allocate a non-value node

$LN42:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	rdx, rax
	mov	ecx, 8

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	rdi, rax

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rdx, QWORD PTR [rbx]
	mov	ecx, 8
	mov	QWORD PTR [rax], rdx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 959  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Parent), _My_data._Myhead);

	lea	rdx, QWORD PTR [rdi+8]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rdx, QWORD PTR [rbx]
	mov	ecx, 8
	mov	QWORD PTR [rax], rdx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 960  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Right), _My_data._Myhead);

	lea	rdx, QWORD PTR [rdi+16]
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 967  : 		}

	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
_TEXT	SEGMENT
$T7 = 32
this$dead$ = 64
_Newnode$ = 72
?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_node, COMDAT

; 1585 : 		{	// node exists, destroy it

$LN42:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T7[rsp], -2
	mov	rbx, rdx
	lea	rcx, QWORD PTR [rdx+48]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rbx+32], 0
	je	SHORT $LN20@Destroy_if
	cmp	DWORD PTR [rbx+40], 1
	jne	SHORT $LN20@Destroy_if

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx+32]
	call	QWORD PTR [rax+16]
	npad	1
$LN20@Destroy_if:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, rbx
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1589 : 		}

	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_node
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z
_TEXT	SEGMENT
$T3 = 32
__formal$dead$ = 64
$T1 = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

$LN19:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T3[rsp], -2
	mov	QWORD PTR [rsp+72], rbx
	mov	rbx, r8

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	ecx, 40					; 00000028H
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rdi, rax
	mov	QWORD PTR $T1[rsp], rax
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rbx+8], 0
	je	SHORT $LN16@construct
	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN16@construct
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	r8, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [r8+8]
	jmp	SHORT $LN12@construct
$LN16@construct:
	mov	rax, QWORD PTR [rbx]
$LN12@construct:
	mov	QWORD PTR [rdi], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN13@construct
	xor	eax, eax
	cmp	DWORD PTR [rbx+8], eax
	setne	al
	jmp	SHORT $LN14@construct
$LN13@construct:
	mov	eax, DWORD PTR [rbx+8]
$LN14@construct:
	mov	DWORD PTR [rdi+8], eax

; 1719 :       }

	lea	rdx, QWORD PTR [rbx+16]
	lea	rcx, QWORD PTR [rdi+16]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0

; 882  : 		}

	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T3 = 32
__formal$dead$ = 64
$T1 = 64
_Ptr$ = 72
<_Args_0>$ = 80
?dtor$0@?0???$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z@4HA PROC ; `std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z@4HA ENDP ; `std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 32
__formal$dead$ = 64
$T1 = 64
_Ptr$ = 72
<_Args_0>$ = 80
?dtor$0@?0???$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z@4HA PROC ; `std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z@4HA ENDP ; `std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_Addleft$ = 64
_Wherenode$ = 72
_Val$dead$ = 80
_Node$ = 88
??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT

; 1805 : 		{	// add node with value next to _Wherenode, to left if _Addleft

$LN104:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1806 : 		auto& _My_data = this->_Get_data();
; 1807 : 		if (max_size() - 1 <= _My_data._Mysize)

	mov	rax, QWORD PTR [rcx+8]
	mov	r11, rcx
	mov	rcx, 256204778801521549			; 038e38e38e38e38dH
	mov	rdi, rdx
	cmp	rax, rcx
	jb	SHORT $LN5@Insert_at

; 1808 : 			{	// tree would get too big, fail
; 1809 : 			_Destroy_if_node(_Node);

	mov	rdx, QWORD PTR _Node$[rsp]
	call	?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_node

; 1810 : 			_Xlength_error("map/set<T> too long");

	lea	rcx, OFFSET FLAT:??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN5@Insert_at:

; 1811 : 			}
; 1812 : 
; 1813 : 		_Nodeptr _Newnode = _Buy_if_not_node(_Node, _STD forward<_Valty>(_Val));
; 1814 : 
; 1815 : 		++_My_data._Mysize;

	inc	rax
	mov	QWORD PTR [rsp+48], rbx

; 1816 : 		_Newnode->_Parent = _Wherenode;

	mov	rbx, QWORD PTR _Node$[rsp]
	mov	QWORD PTR [r11+8], rax
	mov	QWORD PTR [rbx+8], r9

; 1817 : 
; 1818 : 		if (_Wherenode == _My_data._Myhead)

	mov	rax, QWORD PTR [r11]
	cmp	r9, rax
	jne	SHORT $LN6@Insert_at

; 1819 : 			{	// first node in tree, just set head values
; 1820 : 			_My_data._Root() = _Newnode;

	mov	QWORD PTR [rax+8], rbx

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [r11]

; 1821 : 			_My_data._Lmost() = _Newnode;

	mov	QWORD PTR [rax], rbx

; 1822 : 			_My_data._Rmost() = _Newnode;

	mov	rax, QWORD PTR [r11]
	jmp	SHORT $LN99@Insert_at
$LN6@Insert_at:

; 1823 : 			}
; 1824 : 		else if (_Addleft)

	test	r8b, r8b
	je	SHORT $LN8@Insert_at

; 1825 : 			{	// add to left of _Wherenode
; 1826 : 			_Wherenode->_Left = _Newnode;

	mov	QWORD PTR [r9], rbx

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [r11]

; 1827 : 			if (_Wherenode == _My_data._Lmost())

	cmp	r9, QWORD PTR [rax]
	jne	SHORT $LN11@Insert_at

; 1828 : 				{
; 1829 : 				_My_data._Lmost() = _Newnode;

	mov	QWORD PTR [rax], rbx

; 1830 : 				}
; 1831 : 			}
; 1832 : 		else

	jmp	SHORT $LN11@Insert_at
$LN8@Insert_at:

; 1833 : 			{	// add to right of _Wherenode
; 1834 : 			_Wherenode->_Right = _Newnode;

	mov	QWORD PTR [r9+16], rbx

; 503  : 		return (_Myhead->_Right);

	mov	rax, QWORD PTR [r11]

; 1835 : 			if (_Wherenode == _My_data._Rmost())

	cmp	r9, QWORD PTR [rax+16]
	jne	SHORT $LN11@Insert_at
$LN99@Insert_at:

; 1836 : 				{
; 1837 : 				_My_data._Rmost() = _Newnode;
; 1838 : 				}
; 1839 : 			}
; 1840 : 
; 1841 : 		for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == this->_Red; )

	mov	QWORD PTR [rax+16], rbx
$LN11@Insert_at:
	mov	rax, QWORD PTR [rbx+8]
	mov	rdx, rbx
	cmp	BYTE PTR [rax+24], 0
	jne	$LN3@Insert_at
	npad	6
$LL2@Insert_at:

; 1842 : 			{
; 1843 : 			if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left)

	mov	rcx, QWORD PTR [rdx+8]
	lea	r9, QWORD PTR [rdx+8]
	mov	r8, QWORD PTR [rcx+8]
	lea	r10, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [r8]
	cmp	rcx, rax
	jne	$LN12@Insert_at

; 1844 : 				{	// fixup red-red in left subtree
; 1845 : 				_Wherenode = _Pnode->_Parent->_Parent->_Right;

	mov	rax, QWORD PTR [r8+16]

; 1846 : 				if (_Wherenode->_Color == this->_Red)

	cmp	BYTE PTR [rax+24], 0
	je	$LN101@Insert_at

; 1847 : 					{	// parent has two red children, blacken both
; 1848 : 					_Pnode->_Parent->_Color = this->_Black;
; 1849 : 					_Wherenode->_Color = this->_Black;
; 1850 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;
; 1851 : 					_Pnode = _Pnode->_Parent->_Parent;
; 1852 : 					}
; 1853 : 				else
; 1854 : 					{	// parent has red and black children
; 1855 : 					if (_Pnode == _Pnode->_Parent->_Right)

	mov	r8, QWORD PTR [rcx+16]
	cmp	rdx, r8
	jne	SHORT $LN97@Insert_at

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

	mov	rax, QWORD PTR [r8]

; 1856 : 						{	// rotate right child to left
; 1857 : 						_Pnode = _Pnode->_Parent;

	mov	rdx, rcx

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

	mov	QWORD PTR [rcx+16], rax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

	mov	rax, QWORD PTR [r8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN56@Insert_at

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rcx
$LN56@Insert_at:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [r10]
	mov	QWORD PTR [r8+8], rax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

	mov	rax, QWORD PTR [r11]
	cmp	rcx, QWORD PTR [rax+8]
	jne	SHORT $LN57@Insert_at

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], r8

; 532  : 		_Wherenode->_Parent = _Pnode;

	mov	r9, r10
	mov	QWORD PTR [r8], rcx
	mov	QWORD PTR [r10], r8
	jmp	SHORT $LN95@Insert_at
$LN57@Insert_at:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

	mov	rax, QWORD PTR [r10]
	cmp	rcx, QWORD PTR [rax]
	jne	SHORT $LN59@Insert_at

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], r8

; 532  : 		_Wherenode->_Parent = _Pnode;

	mov	r9, r10
	mov	QWORD PTR [r8], rcx
	mov	QWORD PTR [r10], r8
	jmp	SHORT $LN95@Insert_at
$LN59@Insert_at:

; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], r8

; 532  : 		_Wherenode->_Parent = _Pnode;

	mov	r9, r10
	mov	QWORD PTR [r8], rcx
	mov	QWORD PTR [r10], r8
	jmp	SHORT $LN95@Insert_at
$LN97@Insert_at:
	mov	r8, rcx
$LN95@Insert_at:

; 1858 : 						_My_data._Lrotate(_Pnode);
; 1859 : 						}
; 1860 : 
; 1861 : 					_Pnode->_Parent->_Color = this->_Black;	// propagate red up

	mov	BYTE PTR [r8+24], 1

; 1862 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;

	mov	rax, QWORD PTR [r9]
	mov	rcx, QWORD PTR [rax+8]
	mov	BYTE PTR [rcx+24], 0

; 1863 : 					_My_data._Rrotate(_Pnode->_Parent->_Parent);

	mov	rax, QWORD PTR [r9]
	mov	rcx, QWORD PTR [rax+8]

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

	mov	r8, QWORD PTR [rcx]

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

	mov	rax, QWORD PTR [r8+16]
	mov	QWORD PTR [rcx], rax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [r8+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN63@Insert_at

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rcx
$LN63@Insert_at:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [r8+8], rax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

	mov	rax, QWORD PTR [r11]
	cmp	rcx, QWORD PTR [rax+8]
	jne	SHORT $LN64@Insert_at

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], r8

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

	mov	QWORD PTR [r8+16], rcx

; 1864 : 					}
; 1865 : 				}
; 1866 : 			else

	jmp	$LN100@Insert_at
$LN64@Insert_at:

; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

	mov	rax, QWORD PTR [rcx+8]
	cmp	rcx, QWORD PTR [rax+16]
	jne	SHORT $LN66@Insert_at

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], r8

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

	mov	QWORD PTR [r8+16], rcx

; 1864 : 					}
; 1865 : 				}
; 1866 : 			else

	jmp	$LN100@Insert_at
$LN66@Insert_at:

; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], r8

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

	mov	QWORD PTR [r8+16], rcx

; 1864 : 					}
; 1865 : 				}
; 1866 : 			else

	jmp	$LN100@Insert_at
$LN12@Insert_at:

; 1867 : 				{	// fixup red-red in right subtree
; 1868 : 				_Wherenode = _Pnode->_Parent->_Parent->_Left;
; 1869 : 				if (_Wherenode->_Color == this->_Red)

	cmp	BYTE PTR [rax+24], 0
	jne	SHORT $LN17@Insert_at
$LN101@Insert_at:

; 1836 : 				{
; 1837 : 				_My_data._Rmost() = _Newnode;
; 1838 : 				}
; 1839 : 			}
; 1840 : 
; 1841 : 		for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == this->_Red; )

	mov	BYTE PTR [rcx+24], 1
	mov	BYTE PTR [rax+24], 1
	mov	rax, QWORD PTR [r9]
	mov	rcx, QWORD PTR [rax+8]
	mov	BYTE PTR [rcx+24], 0
	mov	rax, QWORD PTR [r9]
	mov	rdx, QWORD PTR [rax+8]
	jmp	$LN18@Insert_at
$LN17@Insert_at:

; 1870 : 					{	// parent has two red children, blacken both
; 1871 : 					_Pnode->_Parent->_Color = this->_Black;
; 1872 : 					_Wherenode->_Color = this->_Black;
; 1873 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;
; 1874 : 					_Pnode = _Pnode->_Parent->_Parent;
; 1875 : 					}
; 1876 : 				else
; 1877 : 					{	// parent has red and black children
; 1878 : 					if (_Pnode == _Pnode->_Parent->_Left)

	mov	rax, QWORD PTR [rcx]
	cmp	rdx, rax
	jne	SHORT $LN19@Insert_at

; 1879 : 						{	// rotate left child to right
; 1880 : 						_Pnode = _Pnode->_Parent;

	mov	rdx, rcx

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

	mov	rcx, rax

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR [rdx], rax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN70@Insert_at

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rdx
$LN70@Insert_at:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [r10]
	mov	QWORD PTR [rcx+8], rax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

	mov	rax, QWORD PTR [r11]
	cmp	rdx, QWORD PTR [rax+8]
	jne	SHORT $LN71@Insert_at

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], rcx
	jmp	SHORT $LN74@Insert_at
$LN71@Insert_at:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

	mov	rax, QWORD PTR [r10]
	cmp	rdx, QWORD PTR [rax+16]
	jne	SHORT $LN73@Insert_at

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], rcx

; 551  : 			}
; 552  : 		else

	jmp	SHORT $LN74@Insert_at
$LN73@Insert_at:

; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], rcx
$LN74@Insert_at:

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

	mov	QWORD PTR [rcx+16], rdx

; 558  : 		_Wherenode->_Parent = _Pnode;

	mov	r9, r10
	mov	QWORD PTR [r10], rcx
$LN19@Insert_at:

; 1881 : 						_My_data._Rrotate(_Pnode);
; 1882 : 						}
; 1883 : 
; 1884 : 					_Pnode->_Parent->_Color = this->_Black;	// propagate red up

	mov	BYTE PTR [rcx+24], 1

; 1885 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;

	mov	rax, QWORD PTR [r9]
	mov	rcx, QWORD PTR [rax+8]
	mov	BYTE PTR [rcx+24], 0

; 1886 : 					_My_data._Lrotate(_Pnode->_Parent->_Parent);

	mov	rax, QWORD PTR [r9]
	mov	rcx, QWORD PTR [rax+8]

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

	mov	r8, QWORD PTR [rcx+16]

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx+16], rax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

	mov	rax, QWORD PTR [r8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN77@Insert_at

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rcx
$LN77@Insert_at:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [r8+8], rax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

	mov	rax, QWORD PTR [r11]
	cmp	rcx, QWORD PTR [rax+8]
	jne	SHORT $LN78@Insert_at

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], r8
	jmp	SHORT $LN81@Insert_at
$LN78@Insert_at:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

	mov	rax, QWORD PTR [rcx+8]
	cmp	rcx, QWORD PTR [rax]
	jne	SHORT $LN80@Insert_at

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], r8

; 525  : 			}
; 526  : 		else

	jmp	SHORT $LN81@Insert_at
$LN80@Insert_at:

; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], r8
$LN81@Insert_at:

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

	mov	QWORD PTR [r8], rcx
$LN100@Insert_at:

; 1836 : 				{
; 1837 : 				_My_data._Rmost() = _Newnode;
; 1838 : 				}
; 1839 : 			}
; 1840 : 
; 1841 : 		for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == this->_Red; )

	mov	QWORD PTR [rcx+8], r8
$LN18@Insert_at:
	mov	rax, QWORD PTR [rdx+8]
	cmp	BYTE PTR [rax+24], 0
	je	$LL2@Insert_at
$LN3@Insert_at:

; 1887 : 					}
; 1888 : 				}
; 1889 : 			}
; 1890 : 
; 1891 : 		_My_data._Root()->_Color = this->_Black;	// root is always black

	mov	rax, QWORD PTR [r11]

; 44   : 		this->_Adopt(_Plist);

	mov	rdx, r11

; 1887 : 					}
; 1888 : 				}
; 1889 : 			}
; 1890 : 
; 1891 : 		_My_data._Root()->_Color = this->_Black;	// root is always black

	mov	rcx, QWORD PTR [rax+8]
	mov	BYTE PTR [rcx+24], 1

; 44   : 		this->_Adopt(_Plist);

	mov	rcx, rdi
	mov	QWORD PTR [rdi], rbx
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1892 : 		return (iterator(_Newnode, _STD addressof(_My_data)));

	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi

; 1893 : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN98@Insert_at:
??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
_TEXT	SEGMENT
$T28 = 48
$T21 = 48
$T17 = 48
$T32 = 56
_Where$33 = 112
this$ = 112
__$ReturnUdt$ = 120
_Leftish$dead$ = 128
$T30 = 128
$T26 = 128
$T19 = 128
_Val$ = 136
_Newnode$ = 144
??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_nohint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT

; 1733 : 		{	// try to insert node, on left if _Leftish

$LN174:
	mov	BYTE PTR [rsp+24], r8b
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H
	mov	QWORD PTR $T32[rsp], -2
	mov	QWORD PTR [rsp+120], rbx
	mov	r15, r9
	mov	rsi, rdx
	mov	r12, rcx

; 1734 : 		auto& _My_data = this->_Get_data();
; 1735 : 		_TRY_BEGIN
; 1736 : 		_Nodeptr _Wherenode = _My_data._Myhead;

	mov	r14, QWORD PTR [rcx]

; 1737 : 		_Nodeptr _Trynode = _Wherenode->_Parent;

	mov	r8, QWORD PTR [r14+8]

; 1738 : 		bool _Addleft = true;	// add to left of head if tree empty

	mov	bl, 1

; 1739 : 
; 1740 : 		while (!_Trynode->_Isnil)

	xor	edi, edi
	cmp	BYTE PTR [r8+25], dil
	jne	SHORT $LN3@Insert_noh
	mov	r9, QWORD PTR [r9]
	npad	4
$LL2@Insert_noh:

; 1741 : 			{	// look for leaf to insert before (_Addleft) or after
; 1742 : 			_Wherenode = _Trynode;

	mov	r14, r8
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	test	r9, r9
	je	SHORT $LN64@Insert_noh

; 221  :    return *this;

	mov	rax, r9
	mov	rdx, QWORD PTR [r8+32]
	sub	rdx, r9
$LL167@Insert_noh:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN169@Insert_noh
	inc	rax
	test	cl, cl
	jne	SHORT $LL167@Insert_noh
	mov	ebx, edi
	shr	ebx, 31
	jmp	SHORT $LN63@Insert_noh
$LN169@Insert_noh:
	sbb	ebx, ebx
	or	ebx, 1
	shr	ebx, 31
	jmp	SHORT $LN63@Insert_noh
$LN64@Insert_noh:

; 222  : }

	mov	eax, DWORD PTR [r8+40]
	cmp	DWORD PTR [r15+8], eax
	setl	bl
$LN63@Insert_noh:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1756 : 			_Trynode = _Addleft ? _Trynode->_Left : _Trynode->_Right;

	test	bl, bl
	je	SHORT $LN16@Insert_noh
	mov	r8, QWORD PTR [r8]
	jmp	SHORT $LN17@Insert_noh
$LN16@Insert_noh:
	mov	r8, QWORD PTR [r8+16]
$LN17@Insert_noh:

; 1739 : 
; 1740 : 		while (!_Trynode->_Isnil)

	cmp	BYTE PTR [r8+25], dil
	je	SHORT $LL2@Insert_noh
$LN3@Insert_noh:

; 42   : 		: _Ptr(_Pnode)

	mov	QWORD PTR _Where$33[rsp], r14

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, r12
	lea	rcx, QWORD PTR _Where$33[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1757 : 			}
; 1758 : 
; 1759 : #pragma warning(push)
; 1760 : #pragma warning(disable: 4127)	// conditional expression is constant
; 1761 : 		if (this->_Multi)
; 1762 : 			{
; 1763 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1764 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1765 : 			}
; 1766 : 		else
; 1767 : 			{	// insert only if unique
; 1768 : 			iterator _Where = iterator(_Wherenode, _STD addressof(_My_data));
; 1769 : 			if (!_Addleft)

	test	bl, bl
	je	$LN171@Insert_noh

; 498  : 		return (_Myhead->_Left);

	mov	rax, QWORD PTR [r12]

; 42   : 		: _Ptr(_Pnode)

	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR $T17[rsp], rcx

; 43   : 		{	// construct with node pointer _Pnode
; 44   : 		this->_Adopt(_Plist);

	mov	rdx, r12
	lea	rcx, QWORD PTR $T17[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 278  : 		return (this->_Ptr == _Right._Ptr);

	mov	rax, QWORD PTR _Where$33[rsp]
	cmp	rax, QWORD PTR $T17[rsp]

; 1770 : 				{	// need to test if insert after is okay
; 1771 : 				}
; 1772 : 			else if (_Where == begin())

	jne	SHORT $LN11@Insert_noh

; 1774 : 				return (_Pairib(_Insert_at(true, _Wherenode,

	mov	BYTE PTR $T19[rsp], 1
	mov	rax, QWORD PTR _Newnode$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	r9, r14
	mov	r8b, 1
	lea	rdx, QWORD PTR $T21[rsp]
	mov	rcx, r12
	call	??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsi], rax

; 173  : 				second(_STD forward<_Other2>(_Val2))

	lea	rcx, QWORD PTR $T19[rsp]
	call	??$forward@_N@std@@YA$$QEA_NAEA_N@Z	; std::forward<bool>
	movzx	ecx, BYTE PTR [rax]
	mov	BYTE PTR [rsi+8], cl
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1774 : 				return (_Pairib(_Insert_at(true, _Wherenode,

	mov	rax, rsi
	jmp	$LN20@Insert_noh
$LN11@Insert_noh:

; 86   : 		if (_Ptr->_Isnil)

	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LN113@Insert_noh

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Where$33[rsp], rax
	jmp	SHORT $LN116@Insert_noh
$LN113@Insert_noh:

; 89   : 			}
; 90   : 		else if (_Ptr->_Left->_Isnil)

	mov	rcx, QWORD PTR [rax]
	cmp	BYTE PTR [rcx+25], 0
	je	SHORT $LN115@Insert_noh

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

	mov	rcx, QWORD PTR [rax+8]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN112@Insert_noh
	npad	4
$LL111@Insert_noh:
	cmp	rax, QWORD PTR [rcx]
	jne	SHORT $LN112@Insert_noh

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

	mov	rax, rcx
	mov	QWORD PTR _Where$33[rsp], rcx

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

	mov	rcx, QWORD PTR [rcx+8]
	cmp	BYTE PTR [rcx+25], 0
	je	SHORT $LL111@Insert_noh
$LN112@Insert_noh:

; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)

	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN116@Insert_noh

; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head

	mov	rax, rcx
	mov	QWORD PTR _Where$33[rsp], rcx

; 101  : 				}
; 102  : 			}
; 103  : 		else

	jmp	SHORT $LN116@Insert_noh
$LN115@Insert_noh:

; 104  : 			{
; 105  : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree

	mov	rax, rcx

; 479  : 		while (!_Pnode->_Right->_Isnil)

	mov	rcx, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN121@Insert_noh
	npad	12
$LL120@Insert_noh:

; 480  : 			_Pnode = _Pnode->_Right;

	mov	rax, rcx

; 279  : 		}
; 280  : 
; 281  : 	_NODISCARD bool operator!=(const _Tree_const_iterator& _Right) const
; 282  : 		{	// test for iterator inequality
; 283  : 		return (!(*this == _Right));
; 284  : 		}
; 285  : 
; 286  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 287  : 	friend void _Verify_range(const _Tree_const_iterator& _First, const _Tree_const_iterator& _Last)
; 288  : 		{
; 289  : 		_STL_VERIFY(_First._Getcont() == _Last._Getcont(),
; 290  : 			"map/set iterators in range are from different containers");
; 291  : 		}
; 292  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 293  : 
; 294  : 	_NODISCARD _Tree_unchecked_const_iterator<_Mytree> _Unwrapped() const
; 295  : 		{
; 296  : 		return (_Tree_unchecked_const_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
; 297  : 		}
; 298  : 
; 299  : 	void _Seek_to(const _Tree_unchecked_const_iterator<_Mytree> _It)
; 300  : 		{
; 301  : 		this->_Ptr = _It._Ptr;
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : 	// CLASS TEMPLATE _Tree_iterator
; 306  : template<class _Mytree>
; 307  : 	class _Tree_iterator
; 308  : 		: public _Tree_const_iterator<_Mytree>
; 309  : 	{	// iterator for mutable tree
; 310  : public:
; 311  : 	using _Mybase = _Tree_const_iterator<_Mytree>;
; 312  : 	using iterator_category = bidirectional_iterator_tag;
; 313  : 
; 314  : 	using _Nodeptr = typename _Mytree::_Nodeptr;
; 315  : 	using value_type = typename _Mytree::value_type;
; 316  : 	using difference_type = typename _Mytree::difference_type;
; 317  : 
; 318  : 	using pointer = typename _Mytree::pointer;
; 319  : 	using reference = value_type&;
; 320  : 
; 321  : 	_Tree_iterator()
; 322  : 		{	// construct with null node
; 323  : 		}
; 324  : 
; 325  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 326  : 		: _Mybase(_Pnode, _Plist)
; 327  : 		{	// construct with node pointer _Pnode
; 328  : 		}
; 329  : 
; 330  : 	_NODISCARD reference operator*() const
; 331  : 		{	// return designated value
; 332  : 		return ((reference)**(_Mybase *)this);
; 333  : 		}
; 334  : 
; 335  : 	_NODISCARD pointer operator->() const
; 336  : 		{	// return pointer to class object
; 337  : 		return (pointer_traits<pointer>::pointer_to(**this));
; 338  : 		}
; 339  : 
; 340  : 	_Tree_iterator& operator++()
; 341  : 		{	// preincrement
; 342  : 		++static_cast<_Mybase&>(*this);
; 343  : 		return (*this);
; 344  : 		}
; 345  : 
; 346  : 	_Tree_iterator operator++(int)
; 347  : 		{	// postincrement
; 348  : 		_Tree_iterator _Tmp = *this;
; 349  : 		++*this;
; 350  : 		return (_Tmp);
; 351  : 		}
; 352  : 
; 353  : 	_Tree_iterator& operator--()
; 354  : 		{	// predecrement
; 355  : 		--static_cast<_Mybase&>(*this);
; 356  : 		return (*this);
; 357  : 		}
; 358  : 
; 359  : 	_Tree_iterator operator--(int)
; 360  : 		{	// postdecrement
; 361  : 		_Tree_iterator _Tmp = *this;
; 362  : 		--*this;
; 363  : 		return (_Tmp);
; 364  : 		}
; 365  : 
; 366  : 	_NODISCARD _Tree_unchecked_iterator<_Mytree> _Unwrapped() const
; 367  : 		{
; 368  : 		return (_Tree_unchecked_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
; 369  : 		}
; 370  : 	};
; 371  : 
; 372  : 		// tree TYPE WRAPPERS
; 373  : template<class _Value_type,
; 374  : 	class _Size_type,
; 375  : 	class _Difference_type,
; 376  : 	class _Pointer,
; 377  : 	class _Const_pointer,
; 378  : 	class _Reference,
; 379  : 	class _Const_reference,
; 380  : 	class _Nodeptr_type>
; 381  : 	struct _Tree_iter_types
; 382  : 	{	// wraps types needed by iterators
; 383  : 	using value_type = _Value_type;
; 384  : 	using size_type = _Size_type;
; 385  : 	using difference_type = _Difference_type;
; 386  : 	using pointer = _Pointer;
; 387  : 	using const_pointer = _Const_pointer;
; 388  : 	using _Nodeptr = _Nodeptr_type;
; 389  : 	};
; 390  : 
; 391  : template<class _Value_type,
; 392  : 	class _Voidptr>
; 393  : 	struct _Tree_node
; 394  : 		{	// tree node
; 395  : 		using _Nodeptr = _Rebind_pointer_t<_Voidptr, _Tree_node>;
; 396  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 397  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 398  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 399  : 		char _Color;	// _Red or _Black, _Black if head
; 400  : 		char _Isnil;	// true only if head (also nil) node
; 401  : 		_Value_type _Myval;	// the stored value, unused if head
; 402  : 
; 403  : 		_Tree_node& operator=(const _Tree_node&) = delete;
; 404  : 
; 405  : 		template<class _Alloc>
; 406  : 			static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept
; 407  : 			{
; 408  : 			using _Alnode = _Rebind_alloc_t<_Alloc, _Tree_node>;
; 409  : 			using _Alnode_traits = allocator_traits<_Alnode>;
; 410  : 			_Alnode _Node_alloc(_Al);
; 411  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Left));
; 412  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Parent));
; 413  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Right));
; 414  : 			_Alnode_traits::deallocate(_Node_alloc, _Ptr, 1);
; 415  : 			}
; 416  : 		};
; 417  : 
; 418  : template<class _Ty>
; 419  : 	struct _Tree_simple_types
; 420  : 		: public _Simple_types<_Ty>
; 421  : 	{	// wraps types needed by iterators
; 422  : 	using _Node = _Tree_node<_Ty, void *>;
; 423  : 	using _Nodeptr = _Node *;
; 424  : 	};
; 425  : 
; 426  : template<class _Ty,
; 427  : 	class _Alloc>
; 428  : 	struct _Tree_base_types
; 429  : 	{	// types needed for a container base
; 430  : 	using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
; 431  : 	using _Alty_traits = allocator_traits<_Alty>;
; 432  : 	using _Node = _Tree_node<_Ty, typename allocator_traits<_Alloc>::void_pointer>;
; 433  : 	using _Alnode = _Rebind_alloc_t<_Alloc, _Node>;
; 434  : 	using _Alnode_traits = allocator_traits<_Alnode>;
; 435  : 	using _Nodeptr = typename _Alnode_traits::pointer;
; 436  : 
; 437  : 	using _Val_types = conditional_t<_Is_simple_alloc_v<_Alnode>,
; 438  : 		_Tree_simple_types<_Ty>,
; 439  : 		_Tree_iter_types<_Ty,
; 440  : 			typename _Alty_traits::size_type,
; 441  : 			typename _Alty_traits::difference_type,
; 442  : 			typename _Alty_traits::pointer,
; 443  : 			typename _Alty_traits::const_pointer,
; 444  : 			_Ty&,
; 445  : 			const _Ty&,
; 446  : 			_Nodeptr>>;
; 447  : 	};
; 448  : 
; 449  : 		// CLASS TEMPLATE _Tree_val
; 450  : template<class _Val_types>
; 451  : 	class _Tree_val
; 452  : 		: public _Container_base
; 453  : 	{	// base class for tree to hold data
; 454  : public:
; 455  : 	using _Nodeptr = typename _Val_types::_Nodeptr;
; 456  : 
; 457  : 	using value_type = typename _Val_types::value_type;
; 458  : 	using size_type = typename _Val_types::size_type;
; 459  : 	using difference_type = typename _Val_types::difference_type;
; 460  : 	using pointer = typename _Val_types::pointer;
; 461  : 	using const_pointer = typename _Val_types::const_pointer;
; 462  : 	using reference = value_type&;
; 463  : 	using const_reference = const value_type&;
; 464  : 
; 465  : 	using const_iterator = _Tree_const_iterator<_Tree_val>;
; 466  : 
; 467  : 	_Tree_val()
; 468  : 		: _Myhead(),
; 469  : 		_Mysize(0)
; 470  : 		{	// initialize data
; 471  : 		}
; 472  : 
; 473  : 	enum _Redbl
; 474  : 		{	// colors for link to parent
; 475  : 		_Red, _Black};
; 476  : 
; 477  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 478  : 		{	// return rightmost node in subtree at _Pnode
; 479  : 		while (!_Pnode->_Right->_Isnil)

	mov	rcx, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rcx+25], 0
	je	SHORT $LL120@Insert_noh
$LN121@Insert_noh:

; 105  : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree

	mov	QWORD PTR _Where$33[rsp], rax

; 1757 : 			}
; 1758 : 
; 1759 : #pragma warning(push)
; 1760 : #pragma warning(disable: 4127)	// conditional expression is constant
; 1761 : 		if (this->_Multi)
; 1762 : 			{
; 1763 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1764 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1765 : 			}
; 1766 : 		else
; 1767 : 			{	// insert only if unique
; 1768 : 			iterator _Where = iterator(_Wherenode, _STD addressof(_My_data));
; 1769 : 			if (!_Addleft)

	jmp	SHORT $LN116@Insert_noh
$LN171@Insert_noh:
	mov	rax, QWORD PTR _Where$33[rsp]
$LN116@Insert_noh:
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN140@Insert_noh

; 221  :    return *this;

	mov	rdx, QWORD PTR [r15]
	sub	rdx, rcx
$LL164@Insert_noh:
	movzx	eax, BYTE PTR [rcx]
	cmp	al, BYTE PTR [rcx+rdx]
	jne	SHORT $LN166@Insert_noh
	inc	rcx
	test	al, al
	jne	SHORT $LL164@Insert_noh
	shr	edi, 31
	jmp	SHORT $LN139@Insert_noh
$LN166@Insert_noh:
	sbb	edi, edi
	or	edi, 1
	shr	edi, 31
	jmp	SHORT $LN139@Insert_noh
$LN140@Insert_noh:

; 222  : }

	mov	ecx, DWORD PTR [r15+8]
	cmp	DWORD PTR [rax+40], ecx
	setl	dil
$LN139@Insert_noh:
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1782 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

	test	dil, dil
	je	SHORT $LN13@Insert_noh

; 1786 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

	mov	BYTE PTR $T26[rsp], 1
	mov	rax, QWORD PTR _Newnode$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	r9, r14
	movzx	r8d, bl
	lea	rdx, QWORD PTR $T28[rsp]
	mov	rcx, r12
	call	??$_Insert_at@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsi], rax

; 173  : 				second(_STD forward<_Other2>(_Val2))

	lea	rcx, QWORD PTR $T26[rsp]
	call	??$forward@_N@std@@YA$$QEA_NAEA_N@Z	; std::forward<bool>
	movzx	ecx, BYTE PTR [rax]
	mov	BYTE PTR [rsi+8], cl
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1786 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

	mov	rax, rsi
	jmp	SHORT $LN20@Insert_noh
$LN13@Insert_noh:

; 1787 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1788 : 				}
; 1789 : 			else
; 1790 : 				{	// duplicate, don't insert
; 1791 : 				_Destroy_if_node(_Newnode);

	mov	rdx, QWORD PTR _Newnode$[rsp]
	call	?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_node

; 1792 : 				return (_Pairib(_Where, false));

	mov	BYTE PTR $T30[rsp], 0
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	rax, QWORD PTR _Where$33[rsp]
	mov	QWORD PTR [rsi], rax

; 173  : 				second(_STD forward<_Other2>(_Val2))

	lea	rcx, QWORD PTR $T30[rsp]
	call	??$forward@_N@std@@YA$$QEA_NAEA_N@Z	; std::forward<bool>
	movzx	ecx, BYTE PTR [rax]
	mov	BYTE PTR [rsi+8], cl
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 1792 : 				return (_Pairib(_Where, false));

	mov	rax, rsi
$LN20@Insert_noh:

; 1793 : 				}
; 1794 : 			}
; 1795 : #pragma warning(pop)
; 1796 : 		_CATCH_ALL
; 1797 : 		_Destroy_if_node(_Newnode);
; 1798 : 		_RERAISE;
; 1799 : 		_CATCH_END
; 1800 : 		}

	mov	rbx, QWORD PTR [rsp+120]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
	int	3
$LN172@Insert_noh:
??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_nohint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T28 = 48
$T21 = 48
$T17 = 48
$T32 = 56
_Where$33 = 112
this$ = 112
__$ReturnUdt$ = 120
_Leftish$dead$ = 128
$T30 = 128
$T26 = 128
$T19 = 128
_Val$ = 136
_Newnode$ = 144
?catch$0@?0???$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_nohint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>'::`1'::catch$0

; 1793 : 				}
; 1794 : 			}
; 1795 : #pragma warning(pop)
; 1796 : 		_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 48					; 00000030H
	mov	rbp, rdx
__catch$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z$0:

; 1793 : 				}
; 1794 : 			}
; 1795 : #pragma warning(pop)
; 1796 : 		_CATCH_ALL
; 1797 : 		_Destroy_if_node(_Newnode);

	mov	rdx, QWORD PTR _Newnode$[rbp]
	call	?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_node

; 1793 : 				}
; 1794 : 			}
; 1795 : #pragma warning(pop)
; 1796 : 		_CATCH_ALL
; 1797 : 		_Destroy_if_node(_Newnode);
; 1798 : 		_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0???$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_nohint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T28 = 48
$T21 = 48
$T17 = 48
$T32 = 56
_Where$33 = 112
this$ = 112
__$ReturnUdt$ = 120
_Leftish$dead$ = 128
$T30 = 128
$T26 = 128
$T19 = 128
_Val$ = 136
_Newnode$ = 144
?catch$0@?0???$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_nohint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>'::`1'::catch$0

; 1796 : 		_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 48					; 00000030H
	mov	rbp, rdx
__catch$??$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z$0:

; 1797 : 		_Destroy_if_node(_Newnode);

	mov	rdx, QWORD PTR _Newnode$[rbp]
	call	?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_node

; 1798 : 		_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0???$_Insert_nohint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_nohint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QEAU_One_then_variadic_args_t@0@AEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QEAU_One_then_variadic_args_t@0@AEAU10@@Z PROC ; std::forward<std::_One_then_variadic_args_t>, COMDAT

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	rax, rcx

; 1575 : 	}

	ret	0
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QEAU_One_then_variadic_args_t@0@AEAU10@@Z ENDP ; std::forward<std::_One_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
_Val1$dead$ = 24
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 469  : 		_Mysize(0)

	mov	QWORD PTR [rcx+8], rax
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

	mov	rax, rcx
	ret	0
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Val$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >, COMDAT

; 1917 : 		return (this->_Buynode(_Val));

	jmp	??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\code\libshared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__that$ = 72
??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z PROC ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>, COMDAT

; 1719 :       }

$LN15:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T1[rsp], -2
	mov	QWORD PTR [rsp+72], rbx
	mov	rbx, rdx
	mov	rdi, rcx

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rdx+8], 0
	je	SHORT $LN12@pair
	cmp	QWORD PTR [rdx], 0
	je	SHORT $LN12@pair
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+8]
	jmp	SHORT $LN8@pair
$LN12@pair:
	mov	rax, QWORD PTR [rdx]
$LN8@pair:
	mov	QWORD PTR [rdi], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN9@pair
	xor	eax, eax
	cmp	DWORD PTR [rbx+8], eax
	setne	al
	jmp	SHORT $LN10@pair
$LN9@pair:
	mov	eax, DWORD PTR [rbx+8]
$LN10@pair:
	mov	DWORD PTR [rdi+8], eax

; 1719 :       }

	lea	rdx, QWORD PTR [rbx+16]
	lea	rcx, QWORD PTR [rdi+16]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__that$ = 72
?dtor$0@?0???0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z@4HA PROC ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z@4HA ENDP ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__that$ = 72
?dtor$0@?0???0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z@4HA PROC ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z@4HA ENDP ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::max_size, COMDAT

; 1275 : 		return (_Alnode_traits::max_size(this->_Getal()));

	mov	rax, 256204778801521550			; 038e38e38e38e38eH

; 1276 : 		}

	ret	0
?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::max_size, COMDAT

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

	mov	rax, 256204778801521550			; 038e38e38e38e38eH

; 893  : 		}

	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Buy_if_not_node@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Node$ = 16
__formal$dead$ = 24
??$_Buy_if_not_node@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buy_if_not_node<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 1575 : 		return (_Node);

	mov	rax, rdx

; 1576 : 		}

	ret	0
??$_Buy_if_not_node@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buy_if_not_node<std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z
_TEXT	SEGMENT
this$ = 48
_Val1$ = 56
_Val2$ = 64
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool,0>, COMDAT

; 174  : 		{

$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	rax, QWORD PTR [rdx]

; 174  : 		{

	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	mov	rcx, r8
	call	??$forward@_N@std@@YA$$QEA_NAEA_N@Z	; std::forward<bool>
	movzx	edx, BYTE PTR [rax]

; 175  : 		}

	mov	rax, rbx
	mov	BYTE PTR [rbx+8], dl
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$?0AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z
_TEXT	SEGMENT
this$ = 48
_Val1$ = 56
_Val2$ = 64
??$?0AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &,bool,0>, COMDAT

; 174  : 		{

$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	rax, QWORD PTR [rdx]

; 174  : 		{

	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	mov	rcx, r8
	call	??$forward@_N@std@@YA$$QEA_NAEA_N@Z	; std::forward<bool>
	movzx	edx, BYTE PTR [rax]

; 175  : 		}

	mov	rax, rbx
	mov	BYTE PTR [rbx+8], dl
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$?0AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QEAA@AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QEA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &,bool,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YA$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YA$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AEAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >, COMDAT

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	rax, rcx

; 1575 : 	}

	ret	0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YA$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AEAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >
_TEXT	ENDS
END
