; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28314.0 

include listing.inc


PUBLIC	??_C@_0EC@HCHNIDLM@A?5valid?5JSON?5document?5must?5be?5e@ ; `string'
PUBLIC	??_C@_0CP@GDDNKEK@Syntax?5error?3?5value?0?5object?5or?5@ ; `string'
PUBLIC	??_C@_03FFDNHNKN@rue@				; `string'
PUBLIC	??_C@_04KCECFHEP@alse@				; `string'
PUBLIC	??_C@_03KNPGGKC@ull@				; `string'
PUBLIC	??_C@_0CF@GCCDMCPH@Missing?5?8?3?8?5after?5object?5member@ ; `string'
PUBLIC	??_C@_0CJ@NGKOAFKA@Missing?5?8?0?8?5or?5?8?$HN?8?5in?5object?5de@ ; `string'
PUBLIC	??_C@_0CC@JNCGHFHN@Missing?5?8?$HN?8?5or?5object?5member?5na@ ; `string'
PUBLIC	??_C@_0CI@DPCANLPO@Missing?5?8?0?8?5or?5?8?$FN?8?5in?5array?5dec@ ; `string'
PUBLIC	??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4@	; `string'
PUBLIC	??_C@_01GEODFPGF@?8@				; `string'
PUBLIC	??_C@_03DLDNIBIK@?$CFlf@			; `string'
PUBLIC	??_C@_0CA@DPGKPPOE@Empty?5escape?5sequence?5in?5string@ ; `string'
PUBLIC	??_C@_0BO@NDEEJNNB@Bad?5escape?5sequence?5in?5string@ ; `string'
PUBLIC	??_C@_0EE@LMPEHADE@additional?5six?5characters?5expec@ ; `string'
PUBLIC	??_C@_0FA@BGMMPLKB@expecting?5another?5?2u?5token?5to?5b@ ; `string'
PUBLIC	??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5@ ; `string'
PUBLIC	??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5@ ; `string'
PUBLIC	??_C@_0BD@LAMGIMLG@Line?5?$CFd?0?5Column?5?$CFd@ ; `string'
PUBLIC	??_C@_02KAOAMBHJ@?$CK?5@			; `string'
PUBLIC	??_C@_02KNHHEEKP@?5?5@				; `string'
PUBLIC	??_C@_0O@JBAGGIKP@?5for?5detail?4?6@		; `string'
PUBLIC	??_C@_04JBAOJHKB@See?5@				; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
EXTRN	__imp___stdio_common_vsscanf:PROC
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04JBAOJHKB@See?5@
CONST	SEGMENT
??_C@_04JBAOJHKB@See?5@ DB 'See ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JBAGGIKP@?5for?5detail?4?6@
CONST	SEGMENT
??_C@_0O@JBAGGIKP@?5for?5detail?4?6@ DB ' for detail.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KNHHEEKP@?5?5@
CONST	SEGMENT
??_C@_02KNHHEEKP@?5?5@ DB '  ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KAOAMBHJ@?$CK?5@
CONST	SEGMENT
??_C@_02KAOAMBHJ@?$CK?5@ DB '* ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LAMGIMLG@Line?5?$CFd?0?5Column?5?$CFd@
CONST	SEGMENT
??_C@_0BD@LAMGIMLG@Line?5?$CFd?0?5Column?5?$CFd@ DB 'Line %d, Column %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5@
CONST	SEGMENT
??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5@ DB 'Bad unicode '
	DB	'escape sequence in string: hexadecimal digit expected.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5@
CONST	SEGMENT
??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5@ DB 'Bad unicode '
	DB	'escape sequence in string: four digits expected.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@BGMMPLKB@expecting?5another?5?2u?5token?5to?5b@
CONST	SEGMENT
??_C@_0FA@BGMMPLKB@expecting?5another?5?2u?5token?5to?5b@ DB 'expecting a'
	DB	'nother \u token to begin the second half of a unicode surroga'
	DB	'te pair', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@LMPEHADE@additional?5six?5characters?5expec@
CONST	SEGMENT
??_C@_0EE@LMPEHADE@additional?5six?5characters?5expec@ DB 'additional six'
	DB	' characters expected to parse unicode surrogate pair.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NDEEJNNB@Bad?5escape?5sequence?5in?5string@
CONST	SEGMENT
??_C@_0BO@NDEEJNNB@Bad?5escape?5sequence?5in?5string@ DB 'Bad escape sequ'
	DB	'ence in string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DPGKPPOE@Empty?5escape?5sequence?5in?5string@
CONST	SEGMENT
??_C@_0CA@DPGKPPOE@Empty?5escape?5sequence?5in?5string@ DB 'Empty escape '
	DB	'sequence in string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DLDNIBIK@?$CFlf@
CONST	SEGMENT
??_C@_03DLDNIBIK@?$CFlf@ DB '%lf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GEODFPGF@?8@
CONST	SEGMENT
??_C@_01GEODFPGF@?8@ DB '''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4@
CONST	SEGMENT
??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4@ DB ''' is not a number.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@DPCANLPO@Missing?5?8?0?8?5or?5?8?$FN?8?5in?5array?5dec@
CONST	SEGMENT
??_C@_0CI@DPCANLPO@Missing?5?8?0?8?5or?5?8?$FN?8?5in?5array?5dec@ DB 'Mis'
	DB	'sing '','' or '']'' in array declaration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JNCGHFHN@Missing?5?8?$HN?8?5or?5object?5member?5na@
CONST	SEGMENT
??_C@_0CC@JNCGHFHN@Missing?5?8?$HN?8?5or?5object?5member?5na@ DB 'Missing'
	DB	' ''}'' or object member name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NGKOAFKA@Missing?5?8?0?8?5or?5?8?$HN?8?5in?5object?5de@
CONST	SEGMENT
??_C@_0CJ@NGKOAFKA@Missing?5?8?0?8?5or?5?8?$HN?8?5in?5object?5de@ DB 'Mis'
	DB	'sing '','' or ''}'' in object declaration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GCCDMCPH@Missing?5?8?3?8?5after?5object?5member@
CONST	SEGMENT
??_C@_0CF@GCCDMCPH@Missing?5?8?3?8?5after?5object?5member@ DB 'Missing '''
	DB	':'' after object member name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KNPGGKC@ull@
CONST	SEGMENT
??_C@_03KNPGGKC@ull@ DB 'ull', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KCECFHEP@alse@
CONST	SEGMENT
??_C@_04KCECFHEP@alse@ DB 'alse', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFDNHNKN@rue@
CONST	SEGMENT
??_C@_03FFDNHNKN@rue@ DB 'rue', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@GDDNKEK@Syntax?5error?3?5value?0?5object?5or?5@
CONST	SEGMENT
??_C@_0CP@GDDNKEK@Syntax?5error?3?5value?0?5object?5or?5@ DB 'Syntax erro'
	DB	'r: value, object or array expected.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@HCHNIDLM@A?5valid?5JSON?5document?5must?5be?5e@
CONST	SEGMENT
??_C@_0EC@HCHNIDLM@A?5valid?5JSON?5document?5must?5be?5e@ DB 'A valid JSO'
	DB	'N document must be either an array or an object value.', 00H ; `string'
PUBLIC	??$_Zero_range@PEAPEAPEAVValue@Json@@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0@Z ; std::_Zero_range<Json::Value * * *>
PUBLIC	??$_Seek_wrapped@PEAPEAVValue@Json@@@std@@YAXAEAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@@Z ; std::_Seek_wrapped<Json::Value * *>
PUBLIC	??$_Copy_memmove@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@00@Z ; std::_Copy_memmove<Json::Value * * *,Json::Value * * *>
PUBLIC	??$_Get_unwrapped_n@PEAPEAVValue@Json@@_J$0A@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@_J@Z ; std::_Get_unwrapped_n<Json::Value * *,__int64,0>
PUBLIC	??$_Get_unwrapped@PEAPEAVValue@Json@@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@@Z ; std::_Get_unwrapped<Json::Value * *>
PUBLIC	??$_Adl_verify_range@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAXAEBQEAPEAPEAVValue@Json@@0@Z ; std::_Adl_verify_range<Json::Value * * *,Json::Value * * *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??0ErrorInfo@Reader@Json@@QEAA@AEBV012@@Z	; Json::Reader::ErrorInfo::ErrorInfo
PUBLIC	??$_Destroy_range@PEAPEAPEAVValue@Json@@@std@@YAXPEAPEAPEAVValue@Json@@QEAPEAPEAV12@@Z ; std::_Destroy_range<Json::Value * * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PEAPEAPEAVValue@Json@@_K@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@_K@Z ; std::_Uninitialized_value_construct_n_unchecked1<Json::Value * * *,unsigned __int64>
PUBLIC	??$_Idl_distance@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YA_JAEBQEAPEAPEAVValue@Json@@0@Z ; std::_Idl_distance<Json::Value * * *,Json::Value * * *>
PUBLIC	??$uninitialized_copy@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0PEAPEAPEAV12@@Z ; std::uninitialized_copy<Json::Value * * *,Json::Value * * *>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$construct@PEAVValue@Json@@PEAV12@@?$_Default_allocator_traits@V?$allocator@PEAVValue@Json@@@std@@@std@@SAXAEAV?$allocator@PEAVValue@Json@@@1@QEAPEAVValue@Json@@$$QEAPEAV34@@Z ; std::_Default_allocator_traits<std::allocator<Json::Value *> >::construct<Json::Value *,Json::Value *>
PUBLIC	??$forward@PEAVValue@Json@@@std@@YA$$QEAPEAVValue@Json@@AEAPEAV12@@Z ; std::forward<Json::Value *>
PUBLIC	??$_Zero_range@PEAPEAVErrorInfo@Reader@Json@@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0@Z ; std::_Zero_range<Json::Reader::ErrorInfo * *>
PUBLIC	??$_Seek_wrapped@PEAVErrorInfo@Reader@Json@@@std@@YAXAEAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@@Z ; std::_Seek_wrapped<Json::Reader::ErrorInfo *>
PUBLIC	??$_Copy_memmove@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@00@Z ; std::_Copy_memmove<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
PUBLIC	??$_Get_unwrapped_n@PEAVErrorInfo@Reader@Json@@_J$0A@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@_J@Z ; std::_Get_unwrapped_n<Json::Reader::ErrorInfo *,__int64,0>
PUBLIC	??$_Get_unwrapped@PEAVErrorInfo@Reader@Json@@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@@Z ; std::_Get_unwrapped<Json::Reader::ErrorInfo *>
PUBLIC	??$_Adl_verify_range@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAXAEBQEAPEAVErrorInfo@Reader@Json@@0@Z ; std::_Adl_verify_range<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@VErrorInfo@Reader@Json@@AEBV123@@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@AEBV345@@Z ; std::_Default_allocator_traits<std::allocator<Json::Reader::ErrorInfo> >::construct<Json::Reader::ErrorInfo,Json::Reader::ErrorInfo const &>
PUBLIC	??$forward@AEBVErrorInfo@Reader@Json@@@std@@YAAEBVErrorInfo@Reader@Json@@AEBV123@@Z ; std::forward<Json::Reader::ErrorInfo const &>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PEAVValue@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@$00@std@@QEBAAEBV?$allocator@PEAVValue@Json@@@2@XZ ; std::_Compressed_pair<std::allocator<Json::Value *>,std::_Deque_val<std::_Deque_simple_types<Json::Value *> >,1>::_Get_first
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@PEAVValue@Json@@@std@@@std@@SA_KAEBV?$allocator@PEAVValue@Json@@@2@@Z ; std::_Default_allocator_traits<std::allocator<Json::Value *> >::max_size
PUBLIC	?_Getal@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBAAEBV?$allocator@PEAVValue@Json@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getal
PUBLIC	?allocate@?$allocator@PEAPEAVValue@Json@@@std@@QEAAPEAPEAPEAVValue@Json@@_K@Z ; std::allocator<Json::Value * *>::allocate
PUBLIC	?max_size@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEBA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::max_size
PUBLIC	?_Xlen@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBAXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Xlen
PUBLIC	??0?$allocator@PEAVValue@Json@@@std@@QEAA@XZ	; std::allocator<Json::Value *>::allocator<Json::Value *>
PUBLIC	?allocate@?$allocator@PEAVValue@Json@@@std@@QEAAPEAPEAVValue@Json@@_K@Z ; std::allocator<Json::Value *>::allocate
PUBLIC	?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap
PUBLIC	??0?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEAA@XZ ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Deque_val<std::_Deque_simple_types<Json::Value *> >
PUBLIC	??0?$allocator@VErrorInfo@Reader@Json@@@std@@QEAA@XZ ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
PUBLIC	??0?$_Deque_val@U?$_Deque_simple_types@VErrorInfo@Reader@Json@@@std@@@std@@QEAA@XZ ; std::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$addressof@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@YAPEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@0@AEAV10@@Z ; std::addressof<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >
PUBLIC	??$_Emplace_back_internal@PEAVValue@Json@@@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX$$QEAPEAVValue@Json@@@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Emplace_back_internal<Json::Value *>
PUBLIC	??$_Destroy_range@PEAPEAVErrorInfo@Reader@Json@@@std@@YAXPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@@Z ; std::_Destroy_range<Json::Reader::ErrorInfo * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PEAPEAVErrorInfo@Reader@Json@@_K@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@_K@Z ; std::_Uninitialized_value_construct_n_unchecked1<Json::Reader::ErrorInfo * *,unsigned __int64>
PUBLIC	??$_Idl_distance@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YA_JAEBQEAPEAVErrorInfo@Reader@Json@@0@Z ; std::_Idl_distance<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
PUBLIC	??$uninitialized_copy@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0PEAPEAV123@@Z ; std::uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@PEAVValue@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<Json::Value *>,std::_Deque_val<std::_Deque_simple_types<Json::Value *> >,1>::_Compressed_pair<std::allocator<Json::Value *>,std::_Deque_val<std::_Deque_simple_types<Json::Value *> >,1><>
PUBLIC	??$move@AEAPEAVValue@Json@@@std@@YA$$QEAPEAVValue@Json@@AEAPEAV12@@Z ; std::move<Json::Value * &>
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@VErrorInfo@Reader@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@VErrorInfo@Reader@Json@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<Json::Reader::ErrorInfo>,std::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >,1>::_Compressed_pair<std::allocator<Json::Reader::ErrorInfo>,std::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >,1><>
PUBLIC	??$construct@VErrorInfo@Reader@Json@@$$V@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@@Z ; std::_Default_allocator_traits<std::allocator<Json::Reader::ErrorInfo> >::construct<Json::Reader::ErrorInfo>
PUBLIC	??$_Emplace_back_internal@AEBVErrorInfo@Reader@Json@@@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAXAEBVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Emplace_back_internal<Json::Reader::ErrorInfo const &>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@VErrorInfo@Reader@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@VErrorInfo@Reader@Json@@@std@@@2@$00@std@@QEBAAEBV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::_Compressed_pair<std::allocator<Json::Reader::ErrorInfo>,std::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >,1>::_Get_first
PUBLIC	??Z?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator-=
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SA_KAEBV?$allocator@VErrorInfo@Reader@Json@@@2@@Z ; std::_Default_allocator_traits<std::allocator<Json::Reader::ErrorInfo> >::max_size
PUBLIC	?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAAEBV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
PUBLIC	??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >
PUBLIC	??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEBQEAVValue@Json@@XZ ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator*
PUBLIC	??Z?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator-=
PUBLIC	??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >
PUBLIC	?_Unchecked_end@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Unchecked_end
PUBLIC	?allocate@?$allocator@PEAVErrorInfo@Reader@Json@@@std@@QEAAPEAPEAVErrorInfo@Reader@Json@@_K@Z ; std::allocator<Json::Reader::ErrorInfo *>::allocate
PUBLIC	?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::max_size
PUBLIC	?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Xlen
PUBLIC	??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEAPEAVValue@Json@@XZ ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator*
PUBLIC	??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator-
PUBLIC	?push_back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::push_back
PUBLIC	?back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::back
PUBLIC	?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QEAAPEAVErrorInfo@Reader@Json@@_K@Z ; std::allocator<Json::Reader::ErrorInfo>::allocate
PUBLIC	?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
PUBLIC	??0?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::deque<Json::Value *,std::allocator<Json::Value *> >
PUBLIC	?empty@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEBA_NXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::empty
PUBLIC	?top@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::top
PUBLIC	?push@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push
PUBLIC	?pop@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAXXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop
PUBLIC	??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAA@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
PUBLIC	??$emplace_back@$$V@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::emplace_back<>
PUBLIC	?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize
PUBLIC	?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::size
PUBLIC	?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXAEBVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back
PUBLIC	?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::clear
PUBLIC	?getNextChar@Reader@Json@@AEAADXZ		; Json::Reader::getNextChar
PUBLIC	?currentValue@Reader@Json@@AEAAAEAVValue@2@XZ	; Json::Reader::currentValue
PUBLIC	?addErrorAndRecover@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@W4TokenType@12@@Z ; Json::Reader::addErrorAndRecover
PUBLIC	?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
PUBLIC	??0ErrorInfo@Reader@Json@@QEAA@XZ		; Json::Reader::ErrorInfo::ErrorInfo
PUBLIC	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
PUBLIC	?decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z ; Json::Reader::decodeUnicodeEscapeSequence
PUBLIC	?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z ; Json::Reader::decodeUnicodeCodePoint
PUBLIC	?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Reader::decodeString
PUBLIC	?decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::decodeString
PUBLIC	?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::decodeDouble
PUBLIC	?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::decodeNumber
PUBLIC	?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z	; Json::Reader::readArray
PUBLIC	?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z	; Json::Reader::readObject
PUBLIC	?readString@Reader@Json@@AEAA_NXZ		; Json::Reader::readString
PUBLIC	?readNumber@Reader@Json@@AEAAXXZ		; Json::Reader::readNumber
PUBLIC	?readCppStyleComment@Reader@Json@@AEAA_NXZ	; Json::Reader::readCppStyleComment
PUBLIC	?readCStyleComment@Reader@Json@@AEAA_NXZ	; Json::Reader::readCStyleComment
PUBLIC	?addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z ; Json::Reader::addComment
PUBLIC	?readComment@Reader@Json@@AEAA_NXZ		; Json::Reader::readComment
PUBLIC	?match@Reader@Json@@AEAA_NPEBDH@Z		; Json::Reader::match
PUBLIC	?skipSpaces@Reader@Json@@AEAAXXZ		; Json::Reader::skipSpaces
PUBLIC	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z	; Json::Reader::readToken
PUBLIC	?skipCommentTokens@Reader@Json@@AEAAXAEAVToken@12@@Z ; Json::Reader::skipCommentTokens
PUBLIC	?readValue@Reader@Json@@AEAA_NXZ		; Json::Reader::readValue
PUBLIC	?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z	; Json::Reader::parse
PUBLIC	??0?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
PUBLIC	?all@Features@Json@@SA?AV12@XZ			; Json::Features::all
PUBLIC	??0Features@Json@@QEAA@XZ			; Json::Features::Features
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	sscanf
PUBLIC	_vsscanf_l
PUBLIC	__local_stdio_scanf_options
PUBLIC	?parse@Reader@Json@@QEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVValue@2@_N@Z ; Json::Reader::parse
PUBLIC	??0Reader@Json@@QEAA@XZ				; Json::Reader::Reader
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Zero_range@PEAPEAPEAVValue@Json@@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0@Z DD imagerel $LN4
	DD	imagerel $LN4+31
	DD	imagerel $unwind$??$_Zero_range@PEAPEAPEAVValue@Json@@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@00@Z DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$??$_Copy_memmove@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ErrorInfo@Reader@Json@@QEAA@AEBV012@@Z DD imagerel $LN6
	DD	imagerel $LN6+67
	DD	imagerel $unwind$??0ErrorInfo@Reader@Json@@QEAA@AEBV012@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n_unchecked1@PEAPEAPEAVValue@Json@@_K@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@_K@Z DD imagerel $LN6
	DD	imagerel $LN6+46
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n_unchecked1@PEAPEAPEAVValue@Json@@_K@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$uninitialized_copy@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0PEAPEAPEAV12@@Z DD imagerel $LN8
	DD	imagerel $LN8+48
	DD	imagerel $unwind$??$uninitialized_copy@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0PEAPEAPEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@PEAVValue@Json@@PEAV12@@?$_Default_allocator_traits@V?$allocator@PEAVValue@Json@@@std@@@std@@SAXAEAV?$allocator@PEAVValue@Json@@@1@QEAPEAVValue@Json@@$$QEAPEAV34@@Z DD imagerel $LN4
	DD	imagerel $LN4+31
	DD	imagerel $unwind$??$construct@PEAVValue@Json@@PEAV12@@?$_Default_allocator_traits@V?$allocator@PEAVValue@Json@@@std@@@std@@SAXAEAV?$allocator@PEAVValue@Json@@@1@QEAPEAVValue@Json@@$$QEAPEAV34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Zero_range@PEAPEAVErrorInfo@Reader@Json@@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0@Z DD imagerel $LN4
	DD	imagerel $LN4+31
	DD	imagerel $unwind$??$_Zero_range@PEAPEAVErrorInfo@Reader@Json@@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@00@Z DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$??$_Copy_memmove@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+42
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@VErrorInfo@Reader@Json@@AEBV123@@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@AEBV345@@Z DD imagerel $LN8
	DD	imagerel $LN8+74
	DD	imagerel $unwind$??$construct@VErrorInfo@Reader@Json@@AEBV123@@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@AEBV345@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@PEAPEAVValue@Json@@@std@@QEAAPEAPEAPEAVValue@Json@@_K@Z DD imagerel $LN4
	DD	imagerel $LN4+24
	DD	imagerel $unwind$?allocate@?$allocator@PEAPEAVValue@Json@@@std@@QEAAPEAPEAPEAVValue@Json@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEBA_KXZ DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$?max_size@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBAXXZ DD imagerel $LN4
	DD	imagerel $LN4+18
	DD	imagerel $unwind$?_Xlen@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@PEAVValue@Json@@@std@@QEAAPEAPEAVValue@Json@@_K@Z DD imagerel $LN4
	DD	imagerel $LN4+26
	DD	imagerel $unwind$?allocate@?$allocator@PEAVValue@Json@@@std@@QEAAPEAPEAVValue@Json@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z DD imagerel $LN66
	DD	imagerel $LN66+159
	DD	imagerel $unwind$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z DD imagerel $LN66+159
	DD	imagerel $LN66+529
	DD	imagerel $chain$4$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z DD imagerel $LN66+529
	DD	imagerel $LN66+599
	DD	imagerel $chain$5$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z DD imagerel $LN66+599
	DD	imagerel $LN66+605
	DD	imagerel $chain$6$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back_internal@PEAVValue@Json@@@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX$$QEAPEAVValue@Json@@@Z DD imagerel $LN10
	DD	imagerel $LN10+334
	DD	imagerel $unwind$??$_Emplace_back_internal@PEAVValue@Json@@@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX$$QEAPEAVValue@Json@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n_unchecked1@PEAPEAVErrorInfo@Reader@Json@@_K@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@_K@Z DD imagerel $LN6
	DD	imagerel $LN6+46
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n_unchecked1@PEAPEAVErrorInfo@Reader@Json@@_K@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$uninitialized_copy@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0PEAPEAV123@@Z DD imagerel $LN8
	DD	imagerel $LN8+48
	DD	imagerel $unwind$??$uninitialized_copy@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0PEAPEAV123@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+67
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@VErrorInfo@Reader@Json@@$$V@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@@Z DD imagerel $LN8
	DD	imagerel $LN8+45
	DD	imagerel $unwind$??$construct@VErrorInfo@Reader@Json@@$$V@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back_internal@AEBVErrorInfo@Reader@Json@@@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAXAEBVErrorInfo@Reader@Json@@@Z DD imagerel $LN14
	DD	imagerel $LN14+324
	DD	imagerel $unwind$??$_Emplace_back_internal@AEBVErrorInfo@Reader@Json@@@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAXAEBVErrorInfo@Reader@Json@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEBQEAVValue@Json@@XZ DD imagerel $LN4
	DD	imagerel $LN4+51
	DD	imagerel $unwind$??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEBQEAVValue@Json@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unchecked_end@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@2@XZ DD imagerel $LN9
	DD	imagerel $LN9+92
	DD	imagerel $unwind$?_Unchecked_end@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@PEAVErrorInfo@Reader@Json@@@std@@QEAAPEAPEAVErrorInfo@Reader@Json@@_K@Z DD imagerel $LN4
	DD	imagerel $LN4+24
	DD	imagerel $unwind$?allocate@?$allocator@PEAVErrorInfo@Reader@Json@@@std@@QEAAPEAPEAVErrorInfo@Reader@Json@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAXXZ DD imagerel $LN4
	DD	imagerel $LN4+18
	DD	imagerel $unwind$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEAPEAVValue@Json@@XZ DD imagerel $LN6
	DD	imagerel $LN6+51
	DD	imagerel $unwind$??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEAPEAVValue@Json@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBA?AV01@_J@Z DD imagerel $LN8
	DD	imagerel $LN8+44
	DD	imagerel $unwind$??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBA?AV01@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z DD imagerel $LN12
	DD	imagerel $LN12+342
	DD	imagerel $unwind$?push_back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ DD imagerel $LN21
	DD	imagerel $LN21+113
	DD	imagerel $unwind$?back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QEAAPEAVErrorInfo@Reader@Json@@_K@Z DD imagerel $LN4
	DD	imagerel $LN4+26
	DD	imagerel $unwind$?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QEAAPEAVErrorInfo@Reader@Json@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z DD imagerel $LN66
	DD	imagerel $LN66+156
	DD	imagerel $unwind$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z DD imagerel $LN66+156
	DD	imagerel $LN66+523
	DD	imagerel $chain$4$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z DD imagerel $LN66+523
	DD	imagerel $LN66+593
	DD	imagerel $chain$5$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z DD imagerel $LN66+593
	DD	imagerel $LN66+599
	DD	imagerel $chain$6$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA@XZ DD imagerel $LN19
	DD	imagerel $LN19+132
	DD	imagerel $unwind$??0?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?top@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ DD imagerel $LN23
	DD	imagerel $LN23+113
	DD	imagerel $unwind$?top@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z DD imagerel $LN14
	DD	imagerel $LN14+342
	DD	imagerel $unwind$?push@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAA@XZ DD imagerel $LN19
	DD	imagerel $LN19+132
	DD	imagerel $unwind$??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace_back@$$V@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+304
	DD	imagerel $unwind$??$emplace_back@$$V@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z DD imagerel $LN28
	DD	imagerel $LN28+30
	DD	imagerel $unwind$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z DD imagerel $LN28+30
	DD	imagerel $LN28+340
	DD	imagerel $chain$1$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z DD imagerel $LN28+340
	DD	imagerel $LN28+385
	DD	imagerel $chain$2$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ DD imagerel $LN5
	DD	imagerel $LN5+17
	DD	imagerel $unwind$?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXAEBVErrorInfo@Reader@Json@@@Z DD imagerel $LN16
	DD	imagerel $LN16+331
	DD	imagerel $unwind$?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXAEBVErrorInfo@Reader@Json@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?currentValue@Reader@Json@@AEAAAEAVValue@2@XZ DD imagerel $LN25
	DD	imagerel $LN25+113
	DD	imagerel $unwind$?currentValue@Reader@Json@@AEAAAEAVValue@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?addErrorAndRecover@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@W4TokenType@12@@Z DD imagerel $LN4
	DD	imagerel $LN4+44
	DD	imagerel $unwind$?addErrorAndRecover@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@W4TokenType@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z DD imagerel $LN18
	DD	imagerel $LN18+124
	DD	imagerel $unwind$?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ErrorInfo@Reader@Json@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+27
	DD	imagerel $unwind$??0ErrorInfo@Reader@Json@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z DD imagerel $LN22
	DD	imagerel $LN22+413
	DD	imagerel $unwind$?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z DD imagerel $LN23
	DD	imagerel $LN23+268
	DD	imagerel $unwind$?decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z DD imagerel $LN54
	DD	imagerel $LN54+697
	DD	imagerel $unwind$?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN37
	DD	imagerel $LN37+576
	DD	imagerel $unwind$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z DD imagerel $LN74
	DD	imagerel $LN74+317
	DD	imagerel $unwind$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z DD imagerel $LN85
	DD	imagerel $LN85+698
	DD	imagerel $unwind$?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z DD imagerel $LN241
	DD	imagerel $LN241+842
	DD	imagerel $unwind$?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z DD imagerel $LN166
	DD	imagerel $LN166+936
	DD	imagerel $unwind$?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA DD imagerel ?dtor$2@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA
	DD	imagerel ?dtor$2@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA+29
	DD	imagerel $unwind$?dtor$2@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z DD imagerel $LN193
	DD	imagerel $LN193+1010
	DD	imagerel $unwind$?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA DD imagerel ?dtor$5@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA
	DD	imagerel ?dtor$5@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA+29
	DD	imagerel $unwind$?dtor$5@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z DD imagerel $LN17
	DD	imagerel $LN17+398
	DD	imagerel $unwind$?addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?readComment@Reader@Json@@AEAA_NXZ DD imagerel $LN89
	DD	imagerel $LN89+714
	DD	imagerel $unwind$?readComment@Reader@Json@@AEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?match@Reader@Json@@AEAA_NPEBDH@Z DD imagerel $LN13
	DD	imagerel $LN13+97
	DD	imagerel $unwind$?match@Reader@Json@@AEAA_NPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z DD imagerel $LN112
	DD	imagerel $LN112+906
	DD	imagerel $unwind$?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?skipCommentTokens@Reader@Json@@AEAAXAEAVToken@12@@Z DD imagerel $LN12
	DD	imagerel $LN12+74
	DD	imagerel $unwind$?skipCommentTokens@Reader@Json@@AEAAXAEAVToken@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?readValue@Reader@Json@@AEAA_NXZ DD imagerel $LN376
	DD	imagerel $LN376+1300
	DD	imagerel $unwind$?readValue@Reader@Json@@AEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0??readValue@Reader@Json@@AEAA_NXZ@4HA DD imagerel ?dtor$4@?0??readValue@Reader@Json@@AEAA_NXZ@4HA
	DD	imagerel ?dtor$4@?0??readValue@Reader@Json@@AEAA_NXZ@4HA+29
	DD	imagerel $unwind$?dtor$4@?0??readValue@Reader@Json@@AEAA_NXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z DD imagerel $LN51
	DD	imagerel $LN51+507
	DD	imagerel $unwind$?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA DD imagerel ?dtor$1@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA
	DD	imagerel ?dtor$1@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA+29
	DD	imagerel $unwind$?dtor$1@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN21
	DD	imagerel $LN21+137
	DD	imagerel $unwind$??0?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD imagerel ?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
	DD	imagerel ?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z+412
	DD	imagerel $unwind$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z@4HA DD imagerel ?dtor$0@?0??codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z@4HA
	DD	imagerel ?dtor$0@?0??codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0??codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN6
	DD	imagerel $LN6+82
	DD	imagerel $unwind$sscanf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?parse@Reader@Json@@QEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVValue@2@_N@Z DD imagerel $LN4
	DD	imagerel $LN4+116
	DD	imagerel $unwind$?parse@Reader@Json@@QEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVValue@2@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Reader@Json@@QEAA@XZ DD imagerel $LN13
	DD	imagerel $LN13+67
	DD	imagerel $unwind$??0Reader@Json@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Reader@Json@@QEAA@XZ DB 02H
	DB	'.'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Reader@Json@@QEAA@XZ DB 02H
	DB	0cH
	DD	imagerel ??1?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0Reader@Json@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0Reader@Json@@QEAA@XZ
	DD	imagerel $ip2state$??0Reader@Json@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Reader@Json@@QEAA@XZ DD 020a11H
	DD	03006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0Reader@Json@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?parse@Reader@Json@@QEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVValue@2@_N@Z DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 041601H
	DD	070125216H
	DD	030106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DB 02H
	DB	'p'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DB 028H
	DD	imagerel $stateUnwindMap$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
	DD	imagerel $ip2state$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 040f11H
	DD	09340fH
	DD	0700b520fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	09eH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ DD 081419H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z DB 0aH
	DB	0f2H
	DB	00H
	DB	0e1H, 02H
	DB	02H
	DB	'p'
	DB	00H
	DB	096H
	DB	04H
	DB	','
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$1@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA
	DB	032H
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z DB 028H
	DD	imagerel $stateUnwindMap$?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z
	DD	imagerel $ip2state$?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z DD 082119H
	DD	0f00bf212H
	DD	0c007e009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z
	DD	072H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0??readValue@Reader@Json@@AEAA_NXZ@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?readValue@Reader@Json@@AEAA_NXZ DB ' '
	DB	08eH
	DB	00H
	DB	0f1H, 02H
	DB	02H
	DB	'p'
	DB	00H
	DB	086H
	DB	02H
	DB	0aH
	DB	00H
	DB	'|'
	DB	04H
	DB	'('
	DB	00H
	DB	09cH
	DB	04H
	DB	0caH
	DB	06H
	DB	'('
	DB	08H
	DB	019H, 02H
	DB	0eH
	DB	09H, 02H
	DB	00H
	DB	0d0H
	DB	0eH
	DB	'5', 02H
	DB	00H
	DB	'('
	DB	04H
	DB	'6'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?readValue@Reader@Json@@AEAA_NXZ DB 01eH
	DB	0eH
	DD	imagerel ?dtor$4@?0??readValue@Reader@Json@@AEAA_NXZ@4HA
	DB	032H
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0b0H
	DB	032H
	DD	imagerel ??1Value@Json@@QEAA@XZ
	DB	080H
	DB	066H
	DD	imagerel __imp___std_terminate
	DB	028H
	DB	08H
	DB	0caH
	DD	imagerel ??1Value@Json@@QEAA@XZ
	DB	080H
	DB	0feH
	DD	imagerel __imp___std_terminate
	DB	028H
	DB	08H
	DB	038H
	DB	08H
	DB	081H
	DB	02H
	DB	058H
	DB	08H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?readValue@Reader@Json@@AEAA_NXZ DB 028H
	DD	imagerel $stateUnwindMap$?readValue@Reader@Json@@AEAA_NXZ
	DD	imagerel $ip2state$?readValue@Reader@Json@@AEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?readValue@Reader@Json@@AEAA_NXZ DD 0c3019H
	DD	0197422H
	DD	0186422H
	DD	0173422H
	DD	0f018f222H
	DD	0d014e016H
	DD	05010c012H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?readValue@Reader@Json@@AEAA_NXZ
	DD	07aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?skipCommentTokens@Reader@Json@@AEAAXAEAVToken@12@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?match@Reader@Json@@AEAA_NPEBDH@Z DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?readComment@Reader@Json@@AEAA_NXZ DB 0eH
	DB	091H, 02H
	DB	00H
	DB	0a9H, 03H
	DB	02H
	DB	0b4H
	DB	04H
	DB	'.'
	DB	00H
	DB	0a8H
	DB	02H
	DB	0b4H
	DB	04H
	DB	01aH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?readComment@Reader@Json@@AEAA_NXZ DB 04H
	DB	0aH
	DD	imagerel ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
	DB	070H
	DB	03aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?readComment@Reader@Json@@AEAA_NXZ DB 028H
	DD	imagerel $stateUnwindMap$?readComment@Reader@Json@@AEAA_NXZ
	DD	imagerel $ip2state$?readComment@Reader@Json@@AEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?readComment@Reader@Json@@AEAA_NXZ DD 082519H
	DD	0117417H
	DD	0106417H
	DD	0f3417H
	DD	05010b217H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?readComment@Reader@Json@@AEAA_NXZ
	DD	05aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z DB 0eH
	DB	092H
	DB	00H
	DB	'P'
	DB	02H
	DB	'p'
	DB	04H
	DB	'.'
	DB	00H
	DB	092H
	DB	02H
	DB	0b4H
	DB	04H
	DB	01aH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z DB 04H
	DB	0aH
	DD	imagerel ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
	DB	070H
	DB	03aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z DB 028H
	DD	imagerel $stateUnwindMap$?addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z
	DD	imagerel $ip2state$?addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z DD 051a19H
	DD	07005c20cH
	DD	030036004H
	DD	05002H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z
	DD	05aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 018H
	DB	098H
	DB	02H
	DB	'^'
	DB	04H
	DB	0aaH
	DB	02H
	DB	0beH
	DB	06H
	DB	084H
	DB	02H
	DB	'9', 06H
	DB	010H
	DB	'F'
	DB	02H
	DB	'X'
	DB	0eH
	DB	'F'
	DB	02H
	DB	'H'
	DB	0eH
	DB	'F'
	DB	02H
	DB	':'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 010H
	DB	0aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	081H
	DB	02H
	DB	03eH
	DD	imagerel ?dtor$5@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA
	DB	062H
	DD	imagerel ??1Value@Json@@QEAA@XZ
	DB	0c0H
	DB	096H
	DD	imagerel __imp___std_terminate
	DB	028H
	DB	08H
	DB	0caH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	01H
	DB	02H
	DB	05H
	DB	02H
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0c0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 028H
	DD	imagerel $stateUnwindMap$?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z
	DD	imagerel $ip2state$?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z DD 092819H
	DD	020641aH
	DD	01f341aH
	DD	01a011aH
	DD	0700ce00eH
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z
	DD	0c2H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 0eH
	DB	090H
	DB	00H
	DB	'j'
	DB	02H
	DB	0a4H
	DB	00H
	DB	0beH
	DB	04H
	DB	'i', 02H
	DB	00H
	DB	0bdH, 06H
	DB	0cH
	DB	'F'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 0cH
	DB	0eH
	DD	imagerel ?dtor$2@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA
	DB	032H
	DD	imagerel ??1Value@Json@@QEAA@XZ
	DB	080H
	DB	066H
	DD	imagerel __imp___std_terminate
	DB	028H
	DB	08H
	DB	09aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0c0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 028H
	DD	imagerel $stateUnwindMap$?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z
	DD	imagerel $ip2state$?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z DD 0b2e19H
	DD	0197420H
	DD	0186420H
	DD	0173420H
	DD	0120120H
	DD	0e012f014H
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z
	DD	082H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 014H
	DB	0f6H
	DB	00H
	DB	'a', 03H
	DB	0aH
	DB	'^'
	DB	00H
	DB	'P'
	DB	02H
	DB	'p'
	DB	04H
	DB	'*'
	DB	06H
	DB	'('
	DB	08H
	DB	'('
	DB	06H
	DB	'Y', 02H
	DB	0aH
	DB	0e8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 018H
	DB	0aH
	DD	imagerel ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
	DB	090H
	DB	03aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	090H
	DB	032H
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	021H
	DB	02H
	DB	03aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0d0H
	DB	0d2H
	DD	imagerel ??1Value@Json@@QEAA@XZ
	DB	090H
	DB	0dH
	DB	02H
	DD	imagerel __imp___std_terminate
	DB	030H
	DB	08H
	DB	040H
	DB	08H
	DB	050H
	DB	08H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 028H
	DD	imagerel $stateUnwindMap$?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z
	DD	imagerel $ip2state$?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z DD 072219H
	DD	01c3414H
	DD	0160114H
	DD	060077008H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z
	DD	0aaH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 014H
	DB	'q', 02H
	DB	00H
	DB	'P'
	DB	02H
	DB	'p'
	DB	00H
	DB	0b4H
	DB	02H
	DB	0b4H
	DB	04H
	DB	'*'
	DB	06H
	DB	'('
	DB	08H
	DB	'('
	DB	06H
	DB	081H, 02H
	DB	0aH
	DB	01eH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 010H
	DB	0aH
	DD	imagerel ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
	DB	021H
	DB	02H
	DB	042H
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	021H
	DB	02H
	DB	03aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0d0H
	DB	032H
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	090H
	DB	0daH
	DD	imagerel ??1Value@Json@@QEAA@XZ
	DB	021H
	DB	02H
	DB	02dH
	DB	02H
	DD	imagerel __imp___std_terminate
	DB	030H
	DB	08H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 028H
	DD	imagerel $stateUnwindMap$?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z
	DD	imagerel $ip2state$?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z DD 072219H
	DD	01c3414H
	DD	0160114H
	DD	060077008H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z
	DD	0aaH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 0aH
	DB	'n'
	DB	02H
	DB	0c2H
	DB	04H
	DB	0ceH
	DB	06H
	DB	'$'
	DB	02H
	DB	'.'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 0aH
	DB	0aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	090H
	DB	032H
	DD	imagerel ??1Value@Json@@QEAA@XZ
	DB	060H
	DB	066H
	DD	imagerel __imp___std_terminate
	DB	028H
	DB	08H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z DB 028H
	DD	imagerel $stateUnwindMap$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z
	DD	imagerel $ip2state$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z DD 061b19H
	DD	014340cH
	DD	07008d20cH
	DD	050066007H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z
	DD	06aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 0eH
	DB	'n'
	DB	00H
	DB	0bdH, 03H
	DB	02H
	DB	018H
	DB	00H
	DB	'Z'
	DB	02H
	DB	','
	DB	00H
	DB	'H'
	DB	02H
	DB	','
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 02H
	DB	0aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	080H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 028H
	DD	imagerel $stateUnwindMap$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	imagerel $ip2state$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 081f19H
	DD	0173410H
	DD	0f00cd210H
	DD	07008e00aH
	DD	050066007H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	062H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z DB 01aH
	DB	098H
	DB	00H
	DB	'('
	DB	02H
	DB	0ecH
	DB	00H
	DB	'('
	DB	04H
	DB	090H
	DB	00H
	DB	'('
	DB	04H
	DB	0a2H
	DB	00H
	DB	'('
	DB	04H
	DB	0e6H
	DB	00H
	DB	'('
	DB	02H
	DB	'|'
	DB	00H
	DB	'('
	DB	04H
	DB	'B'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z DB 04H
	DB	0aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	090H
	DB	03aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z DB 028H
	DD	imagerel $stateUnwindMap$?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z
	DD	imagerel $ip2state$?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z DD 081e19H
	DD	0f00bd20fH
	DD	0c007e009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z
	DD	06aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z DB 0aH
	DB	'z'
	DB	00H
	DB	'('
	DB	02H
	DB	0faH
	DB	00H
	DB	'('
	DB	02H
	DB	':'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z DB 02H
	DB	0aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z DB 028H
	DD	imagerel $stateUnwindMap$?decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z
	DD	imagerel $ip2state$?decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z DD 041719H
	DD	070049208H
	DD	030026003H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z
	DD	042H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z DB 04H
	DB	094H
	DB	02H
	DB	0c5H, 04H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z DB 02H
	DB	0aH
	DD	imagerel ??1ErrorInfo@Reader@Json@@QEAA@XZ
	DB	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z DB 028H
	DD	imagerel $stateUnwindMap$?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z
	DD	imagerel $ip2state$?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z DD 051819H
	DD	07005e209H
	DD	050036004H
	DD	03002H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z
	DD	062H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ErrorInfo@Reader@Json@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z DD 081401H
	DD	0c6414H
	DD	0b5414H
	DD	0a3414H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?addErrorAndRecover@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@W4TokenType@12@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?currentValue@Reader@Json@@AEAAAEAVValue@2@XZ DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXAEBVErrorInfo@Reader@Json@@@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z DD 021H
	DD	imagerel $LN28
	DD	imagerel $LN28+30
	DD	imagerel $unwind$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z DD 040a21H
	DD	07e40aH
	DD	067405H
	DD	imagerel $LN28
	DD	imagerel $LN28+30
	DD	imagerel $unwind$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z DD 040a01H
	DD	08340aH
	DD	06006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace_back@$$V@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXXZ DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAA@XZ DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z DD 0a1a01H
	DD	09e41aH
	DD	08741aH
	DD	07641aH
	DD	06341aH
	DD	0f016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?top@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA@XZ DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z DD 021H
	DD	imagerel $LN66
	DD	imagerel $LN66+156
	DD	imagerel $unwind$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z DD 020021H
	DD	05e400H
	DD	imagerel $LN66
	DD	imagerel $LN66+156
	DD	imagerel $unwind$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z DD 0a1c21H
	DD	04f41cH
	DD	05e417H
	DD	06d412H
	DD	07c40dH
	DD	0c6405H
	DD	imagerel $LN66
	DD	imagerel $LN66+156
	DD	imagerel $unwind$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z DD 040c01H
	DD	07008720cH
	DD	030065007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QEAAPEAVErrorInfo@Reader@Json@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z DD 0a1a01H
	DD	09e41aH
	DD	08741aH
	DD	07641aH
	DD	06341aH
	DD	0f016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBA?AV01@_J@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEAPEAVValue@Json@@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@PEAVErrorInfo@Reader@Json@@@std@@QEAAPEAPEAVErrorInfo@Reader@Json@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unchecked_end@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@2@XZ DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEBQEAVValue@Json@@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back_internal@AEBVErrorInfo@Reader@Json@@@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAXAEBVErrorInfo@Reader@Json@@@Z DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@VErrorInfo@Reader@Json@@$$V@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$uninitialized_copy@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0PEAPEAV123@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n_unchecked1@PEAPEAVErrorInfo@Reader@Json@@_K@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@_K@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back_internal@PEAVValue@Json@@@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX$$QEAPEAVValue@Json@@@Z DD 0a1a01H
	DD	09e41aH
	DD	08741aH
	DD	07641aH
	DD	06341aH
	DD	0f016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z DD 021H
	DD	imagerel $LN66
	DD	imagerel $LN66+159
	DD	imagerel $unwind$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z DD 020021H
	DD	05e400H
	DD	imagerel $LN66
	DD	imagerel $LN66+159
	DD	imagerel $unwind$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z DD 0a1c21H
	DD	04f41cH
	DD	05e417H
	DD	06d412H
	DD	07c40dH
	DD	0c6405H
	DD	imagerel $LN66
	DD	imagerel $LN66+159
	DD	imagerel $unwind$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z DD 040c01H
	DD	07008720cH
	DD	030065007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@PEAVValue@Json@@@std@@QEAAPEAPEAVValue@Json@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEBA_KXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@PEAPEAVValue@Json@@@std@@QEAAPEAPEAPEAVValue@Json@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@VErrorInfo@Reader@Json@@AEBV123@@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@AEBV345@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@00@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Zero_range@PEAPEAVErrorInfo@Reader@Json@@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@PEAVValue@Json@@PEAV12@@?$_Default_allocator_traits@V?$allocator@PEAVValue@Json@@@std@@@std@@SAXAEAV?$allocator@PEAVValue@Json@@@1@QEAPEAVValue@Json@@$$QEAPEAV34@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$uninitialized_copy@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0PEAPEAPEAV12@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n_unchecked1@PEAPEAPEAVValue@Json@@_K@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@_K@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ErrorInfo@Reader@Json@@QEAA@AEBV012@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@00@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Zero_range@PEAPEAPEAVValue@Json@@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ??0Reader@Json@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0Reader@Json@@QEAA@XZ PROC				; Json::Reader::Reader, COMDAT

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	call	??0?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
	npad	1
	lea	rcx, QWORD PTR [rbx+40]
	call	??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAA@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
	lea	rcx, QWORD PTR [rbx+80]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	lea	rcx, QWORD PTR [rbx+152]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

	mov	WORD PTR [rbx+184], 1

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0Reader@Json@@QEAA@XZ ENDP				; Json::Reader::Reader
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???0Reader@Json@@QEAA@XZ@4HA PROC		; `Json::Reader::Reader'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ
?dtor$0@?0???0Reader@Json@@QEAA@XZ@4HA ENDP		; `Json::Reader::Reader'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???0Reader@Json@@QEAA@XZ@4HA PROC		; `Json::Reader::Reader'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ
?dtor$0@?0???0Reader@Json@@QEAA@XZ@4HA ENDP		; `Json::Reader::Reader'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?parse@Reader@Json@@QEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVValue@2@_N@Z
_TEXT	SEGMENT
this$ = 64
document$ = 72
root$ = 80
collectComments$ = 88
?parse@Reader@Json@@QEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVValue@2@_N@Z PROC ; Json::Reader::parse, COMDAT

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H
	mov	r14, rcx
	movzx	esi, r9b

	add	rcx, 80					; 00000050H
	mov	rbp, r8
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

	lea	rcx, QWORD PTR [r14+80]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str

	lea	rcx, QWORD PTR [r14+80]
	mov	rdi, rax
	call	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length

	mov	r9, rbp
	mov	BYTE PTR [rsp+32], sil
	mov	rdx, rdi
	mov	rcx, r14
	lea	r8, QWORD PTR [rdi+rax]
	call	?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z ; Json::Reader::parse

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
?parse@Reader@Json@@QEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVValue@2@_N@Z ENDP ; Json::Reader::parse
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 83   :     static unsigned __int64 _OptionsStorage;
; 84   :     return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 85   : }

	ret	0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$dead$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2166 : {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, rdx
	mov	rsi, rcx

; 2167 :     return __stdio_common_vsscanf(

	call	__local_stdio_scanf_options
	mov	QWORD PTR [rsp+40], rbx
	mov	r9, rdi
	mov	r8, -1
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rsi
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vsscanf

; 2168 :         _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2169 :         _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2170 : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Buffer$ = 80
_Format$ = 88
sscanf	PROC						; COMDAT

; 2261 : {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx

; 2262 :     int _Result;
; 2263 :     va_list _ArgList;
; 2264 :     __crt_va_start(_ArgList, _Format);

	lea	rsi, QWORD PTR _Format$[rsp+8]
	mov	rdi, rcx

; 2167 :     return __stdio_common_vsscanf(

	call	__local_stdio_scanf_options
	mov	QWORD PTR [rsp+40], rsi
	mov	r9, rbx
	mov	r8, -1
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vsscanf

; 2265 :     _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);
; 2266 :     __crt_va_end(_ArgList);
; 2267 :     return _Result;
; 2268 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 8
_Mycont_$ = 16
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1080 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

	mov	QWORD PTR [rcx], rdx
	mov	rax, rcx
	mov	QWORD PTR [rcx+8], 0
	ret	0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1088 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

	mov	QWORD PTR [rcx], 0
	mov	rax, rcx
	ret	0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ??0Features@Json@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0Features@Json@@QEAA@XZ PROC				; Json::Features::Features, COMDAT

	mov	WORD PTR [rcx], 1

	mov	rax, rcx
	ret	0
??0Features@Json@@QEAA@XZ ENDP				; Json::Features::Features
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?all@Features@Json@@SA?AV12@XZ
_TEXT	SEGMENT
__$ReturnUdt$ = 8
?all@Features@Json@@SA?AV12@XZ PROC			; Json::Features::all, COMDAT

	mov	WORD PTR [rcx], 1

	mov	rax, rcx

	ret	0
?all@Features@Json@@SA?AV12@XZ ENDP			; Json::Features::all
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?in@Json@@YA_NDDDDD@Z
_TEXT	SEGMENT
c$ = 8
c1$dead$ = 16
c2$dead$ = 24
c3$dead$ = 32
c4$dead$ = 40
?in@Json@@YA_NDDDDD@Z PROC				; Json::in, COMDAT

	sub	cl, 43					; 0000002bH
	cmp	cl, 58					; 0000003aH
	ja	SHORT $LN5@in
	mov	rax, 288230376218820617			; 0400000004000009H
	bt	rax, rcx
	jae	SHORT $LN5@in
	mov	al, 1

	ret	0
$LN5@in:

	xor	al, al

	ret	0
?in@Json@@YA_NDDDDD@Z ENDP				; Json::in
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?in@Json@@YA_NDDDDDD@Z
_TEXT	SEGMENT
c$ = 8
c1$dead$ = 16
c2$dead$ = 24
c3$dead$ = 32
c4$dead$ = 40
c5$dead$ = 48
?in@Json@@YA_NDDDDDD@Z PROC				; Json::in, COMDAT

	sub	cl, 43					; 0000002bH
	cmp	cl, 58					; 0000003aH
	ja	SHORT $LN5@in
	mov	rax, 288230376218820621			; 040000000400000dH
	bt	rax, rcx
	jae	SHORT $LN5@in
	mov	al, 1

	ret	0
$LN5@in:

	xor	al, al

	ret	0
?in@Json@@YA_NDDDDDD@Z ENDP				; Json::in
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?containsNewLine@Json@@YA_NPEBD0@Z
_TEXT	SEGMENT
begin$ = 8
end$ = 16
?containsNewLine@Json@@YA_NPEBD0@Z PROC			; Json::containsNewLine, COMDAT

	cmp	rcx, rdx
	jae	SHORT $LN3@containsNe
$LL4@containsNe:

	movzx	eax, BYTE PTR [rcx]
	cmp	al, 10
	je	SHORT $LN9@containsNe
	cmp	al, 13
	je	SHORT $LN9@containsNe

	inc	rcx
	cmp	rcx, rdx
	jb	SHORT $LL4@containsNe
$LN3@containsNe:

	xor	al, al

	ret	0
$LN9@containsNe:

	mov	al, 1

	ret	0
?containsNewLine@Json@@YA_NPEBD0@Z ENDP			; Json::containsNewLine
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
cp$ = 72
?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; Json::codePointToUTF8, COMDAT

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	ebx, edx
	mov	rdi, rcx
	mov	DWORD PTR $T1[rsp], 0

	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

	mov	DWORD PTR $T1[rsp], 1

	cmp	ebx, 127				; 0000007fH
	ja	SHORT $LN2@codePointT

	xor	r8d, r8d
	lea	edx, QWORD PTR [r8+1]
	mov	rcx, rdi
	call	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

	xor	edx, edx
	mov	rcx, rdi
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]

	mov	BYTE PTR [rax], bl
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN2@codePointT:

	cmp	ebx, 2047				; 000007ffH
	ja	SHORT $LN4@codePointT

	xor	r8d, r8d
	lea	edx, QWORD PTR [r8+2]
	mov	rcx, rdi
	call	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

	mov	edx, 1
	mov	rcx, rdi
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	movzx	ecx, bl
	and	cl, 63					; 0000003fH
	or	cl, -128				; ffffffffffffff80H
	mov	BYTE PTR [rax], cl

	xor	edx, edx
	mov	rcx, rdi
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	shr	ebx, 6
	and	bl, 31
	or	bl, -64					; ffffffffffffffc0H

	mov	BYTE PTR [rax], bl
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN4@codePointT:

	cmp	ebx, 65535				; 0000ffffH
	ja	SHORT $LN6@codePointT

	xor	r8d, r8d
	lea	edx, QWORD PTR [r8+3]
	mov	rcx, rdi
	call	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

	mov	edx, 2
	mov	rcx, rdi
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	movzx	ecx, bl
	and	cl, 63					; 0000003fH
	or	cl, -128				; ffffffffffffff80H
	mov	BYTE PTR [rax], cl

	mov	edx, 1
	mov	rcx, rdi
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	mov	ecx, ebx
	shr	ecx, 6
	and	cl, 63					; 0000003fH
	or	cl, -128				; ffffffffffffff80H
	mov	BYTE PTR [rax], cl

	xor	edx, edx
	mov	rcx, rdi
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	shr	ebx, 12
	and	bl, 15
	or	bl, -32					; ffffffffffffffe0H

	mov	BYTE PTR [rax], bl
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN6@codePointT:

	cmp	ebx, 1114111				; 0010ffffH
	ja	SHORT $LN12@codePointT

	xor	r8d, r8d
	lea	edx, QWORD PTR [r8+4]
	mov	rcx, rdi
	call	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

	mov	edx, 3
	mov	rcx, rdi
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	movzx	ecx, bl
	and	cl, 63					; 0000003fH
	or	cl, -128				; ffffffffffffff80H
	mov	BYTE PTR [rax], cl

	mov	edx, 2
	mov	rcx, rdi
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	mov	ecx, ebx
	shr	ecx, 6
	and	cl, 63					; 0000003fH
	or	cl, -128				; ffffffffffffff80H
	mov	BYTE PTR [rax], cl

	mov	edx, 1
	mov	rcx, rdi
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	mov	ecx, ebx
	shr	ecx, 12
	and	cl, 63					; 0000003fH
	or	cl, -128				; ffffffffffffff80H
	mov	BYTE PTR [rax], cl

	xor	edx, edx
	mov	rcx, rdi
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	shr	ebx, 18
	and	bl, 7
	or	bl, -16

	mov	BYTE PTR [rax], bl
$LN12@codePointT:
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
	int	3
?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; Json::codePointToUTF8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
cp$ = 72
?dtor$0@?0??codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z@4HA PROC ; `Json::codePointToUTF8'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	eax, DWORD PTR $T1[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN11@dtor$0
	and	DWORD PTR $T1[rbp], -2
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN11@dtor$0:
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z@4HA ENDP ; `Json::codePointToUTF8'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
cp$ = 72
?dtor$0@?0??codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z@4HA PROC ; `Json::codePointToUTF8'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	eax, DWORD PTR $T1[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN11@dtor$0
	and	DWORD PTR $T1[rbp], -2
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN11@dtor$0:
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z@4HA ENDP ; `Json::codePointToUTF8'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ??0?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
this$ = 48
??0?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >, COMDAT

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1088 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

	xor	ebp, ebp
	mov	QWORD PTR [rcx], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 543  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

	mov	QWORD PTR [rcx+8], rbp
	mov	QWORD PTR [rcx+16], rbp
	mov	QWORD PTR [rcx+24], rbp
	mov	QWORD PTR [rcx+32], rbp

; 596  :         _Get_data()._Alloc_proxy(static_cast<_Alproxy_ty>(_Getal()));

	call	?_Getal@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$allocator@PEAVValue@Json@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getal
	npad	1
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0PEAVValue@Json@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@PEAVValue@Json@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Json::Value *>
	npad	1
	mov	rcx, rsi
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	npad	1
	mov	rdi, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	lea	ecx, QWORD PTR [rbp+16]
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	npad	1
	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	lea	ecx, QWORD PTR [rbp+16]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	npad	1

; 1080 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

	mov	QWORD PTR [rax], rdi
	mov	QWORD PTR [rax+8], rbp

; 1100 :         _Myproxy            = _New_proxy;

	mov	QWORD PTR [rdi], rbx

; 1101 :         _New_proxy->_Mycont = this;

	mov	QWORD PTR [rbx], rdi
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	rax, rsi
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z
_TEXT	SEGMENT
$T3 = 48
$T2 = 48
token$ = 56
$T5 = 80
__$ArrayPad$ = 112
this$ = 192
beginDoc$ = 200
endDoc$ = 208
root$ = 216
collectComments$ = 224
?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z PROC	; Json::Reader::parse, COMDAT

$LN51:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rsi, r9
	mov	r12, r8
	mov	r15, rdx
	mov	rbx, rcx

	mov	QWORD PTR [rcx+112], rdx

	mov	QWORD PTR [rcx+120], r8

	xor	ecx, ecx
	movzx	eax, BYTE PTR collectComments$[rsp]
	cmp	BYTE PTR [rbx+184], cl
	cmovne	ecx, eax

	mov	BYTE PTR [rbx+186], cl

	mov	QWORD PTR [rbx+128], rdx

	mov	QWORD PTR [rbx+136], 0

	mov	QWORD PTR [rbx+144], 0

	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	lea	rcx, QWORD PTR [rbx+152]
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

	lea	rcx, QWORD PTR [rbx+40]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1326 :         _Tidy();

	call	?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack

; 61   :         return c.empty();

	mov	rcx, rbx
	call	?empty@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEBA_NXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	test	al, al
	jne	SHORT $LN3@parse
$LL2@parse:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack

; 94   :         c.pop_back();

	mov	rcx, rbx
	call	?pop_back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back

; 61   :         return c.empty();

	mov	rcx, rbx
	call	?empty@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEBA_NXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	test	al, al
	je	SHORT $LL2@parse
$LN3@parse:

	mov	QWORD PTR $T2[rsp], rsi
	lea	rdx, QWORD PTR $T2[rsp]
	mov	rcx, rbx
	call	?push@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push

	mov	rcx, rbx
	call	?readValue@Reader@Json@@AEAA_NXZ	; Json::Reader::readValue
	movzx	r14d, al

	cmp	BYTE PTR [rbx+184], 0
	je	SHORT $LN20@parse
	npad	2
$LL19@parse:

	lea	rdx, QWORD PTR token$[rsp]
	mov	rcx, rbx
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken

	cmp	DWORD PTR token$[rsp], 12
	je	SHORT $LL19@parse

	jmp	SHORT $LN21@parse
$LN20@parse:

	lea	rdx, QWORD PTR token$[rsp]
	mov	rcx, rbx
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken
$LN21@parse:

	cmp	BYTE PTR [rbx+186], 0
	je	SHORT $LN5@parse
	lea	rcx, QWORD PTR [rbx+152]
	call	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
	test	al, al
	jne	SHORT $LN5@parse
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1340 : }

	lea	rcx, QWORD PTR [rbx+152]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rbp, rax

; 1330 : }

	mov	rdi, QWORD PTR [rsi+16]
	test	rdi, rdi
	jne	SHORT $LN26@parse

; 1331 : 

	lea	ecx, QWORD PTR [rdi+32]
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T3[rsp], rax
	test	rax, rax
	je	SHORT $LN28@parse
	mov	QWORD PTR [rax], 3
	lea	rdi, QWORD PTR [rax+8]
	lea	rax, OFFSET FLAT:??1CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::~CommentInfo
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:??0CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::CommentInfo
	mov	edx, 8
	lea	r8d, QWORD PTR [rdx-5]
	mov	rcx, rdi
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	jmp	SHORT $LN29@parse
$LN28@parse:
	xor	edi, edi
$LN29@parse:
	mov	QWORD PTR [rsi+16], rdi
$LN26@parse:

; 1332 : 

	lea	rcx, QWORD PTR [rdi+16]
	mov	rdx, rbp
	call	?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z ; Json::Value::CommentInfo::setComment
$LN5@parse:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	cmp	BYTE PTR [rbx+185], 0
	je	SHORT $LN7@parse
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1315 :    return type_ == stringValue;

	movzx	eax, BYTE PTR [rsi+8]
	test	al, al
	je	SHORT $LN7@parse
	sub	al, 6
	cmp	al, 1
	jbe	SHORT $LN7@parse
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	DWORD PTR token$[rsp], 13

	mov	QWORD PTR token$[rsp+8], r15

	mov	QWORD PTR token$[rsp+16], r12

	lea	rdx, OFFSET FLAT:??_C@_0EC@HCHNIDLM@A?5valid?5JSON?5document?5must?5be?5e@
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	xor	r9d, r9d
	lea	r8, QWORD PTR token$[rsp]
	lea	rdx, QWORD PTR $T5[rsp]
	mov	rcx, rbx
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	npad	1
	lea	rcx, QWORD PTR $T5[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

	xor	al, al
	jmp	SHORT $LN1@parse
$LN7@parse:

	movzx	eax, r14b
$LN1@parse:

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z ENDP	; Json::Reader::parse
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T3 = 48
$T2 = 48
token$ = 56
$T5 = 80
__$ArrayPad$ = 112
this$ = 192
beginDoc$ = 200
endDoc$ = 208
root$ = 216
collectComments$ = 224
?dtor$1@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA PROC ; `Json::Reader::parse'::`1'::dtor$1
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T3[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$1@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA ENDP ; `Json::Reader::parse'::`1'::dtor$1
$T3 = 48
$T2 = 48
token$ = 56
$T5 = 80
__$ArrayPad$ = 112
this$ = 192
beginDoc$ = 200
endDoc$ = 208
root$ = 216
collectComments$ = 224
?dtor$0@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA PROC ; `Json::Reader::parse'::`1'::dtor$0
	lea	rcx, QWORD PTR $T5[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA ENDP ; `Json::Reader::parse'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 48
$T2 = 48
token$ = 56
$T5 = 80
__$ArrayPad$ = 112
this$ = 192
beginDoc$ = 200
endDoc$ = 208
root$ = 216
collectComments$ = 224
?dtor$1@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA PROC ; `Json::Reader::parse'::`1'::dtor$1
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T3[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$1@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA ENDP ; `Json::Reader::parse'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 48
$T2 = 48
token$ = 56
$T5 = 80
__$ArrayPad$ = 112
this$ = 192
beginDoc$ = 200
endDoc$ = 208
root$ = 216
collectComments$ = 224
?dtor$0@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA PROC ; `Json::Reader::parse'::`1'::dtor$0
	lea	rcx, QWORD PTR $T5[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??parse@Reader@Json@@QEAA_NPEBD0AEAVValue@2@_N@Z@4HA ENDP ; `Json::Reader::parse'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?readValue@Reader@Json@@AEAA_NXZ
_TEXT	SEGMENT
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?readValue@Reader@Json@@AEAA_NXZ PROC			; Json::Reader::readValue, COMDAT

$LN376:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-128], rax
	mov	r14, rcx

	cmp	BYTE PTR [rcx+184], 0
	je	SHORT $LN23@readValue
	npad	4
$LL22@readValue:

	lea	rdx, QWORD PTR token$[rbp-128]
	mov	rcx, r14
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken

	mov	esi, DWORD PTR token$[rbp-128]
	cmp	esi, 12
	je	SHORT $LL22@readValue

	jmp	SHORT $LN24@readValue
$LN23@readValue:

	lea	rdx, QWORD PTR token$[rbp-128]
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken
	mov	esi, DWORD PTR token$[rbp-128]
$LN24@readValue:

	mov	r15b, 1

	xor	ebx, ebx
	cmp	BYTE PTR [r14+186], bl
	je	$LN4@readValue
	lea	rcx, QWORD PTR [r14+152]
	call	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
	test	al, al
	jne	$LN4@readValue
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, r14
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, r14
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, r14
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rbx]
	add	rcx, QWORD PTR [rax]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T1[rbp-128], rdi
	mov	QWORD PTR $T1[rbp-120], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T1[rbp-128]
	movdqa	XMMWORD PTR _Tmp$74[rbp-128], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$74[rbp-128]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, 1

; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	rdi, QWORD PTR [rax+rdi*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1340 : }

	lea	rcx, QWORD PTR [r14+152]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	r13, rax

; 1330 : }

	mov	rbx, QWORD PTR [rdi+16]
	test	rbx, rbx
	jne	SHORT $LN51@readValue

; 1331 : 

	lea	ecx, QWORD PTR [rbx+32]
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T7[rbp-128], rax
	test	rax, rax
	je	SHORT $LN53@readValue
	mov	QWORD PTR [rax], 3
	lea	rbx, QWORD PTR [rax+8]
	lea	rax, OFFSET FLAT:??1CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::~CommentInfo
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:??0CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::CommentInfo
	mov	edx, 8
	lea	r8d, QWORD PTR [rdx-5]
	mov	rcx, rbx
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	jmp	SHORT $LN54@readValue
$LN53@readValue:
	xor	ebx, ebx
$LN54@readValue:
	mov	QWORD PTR [rdi+16], rbx
$LN51@readValue:

; 1332 : 

	mov	rdx, r13
	mov	rcx, rbx
	call	?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z ; Json::Value::CommentInfo::setComment
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	lea	rcx, QWORD PTR [r14+152]
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
	xor	ebx, ebx
$LN4@readValue:

	dec	esi
	cmp	esi, 8
	ja	$LN12@readValue
	movsxd	rax, esi
	lea	rdx, OFFSET FLAT:__ImageBase
	mov	ecx, DWORD PTR $LN373@readValue[rdx+rax*4]
	add	rcx, rdx
	jmp	rcx
$LN5@readValue:

	mov	rcx, r14
	call	?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readObject
	movzx	r15d, al

	jmp	$LN2@readValue
$LN6@readValue:

	mov	rcx, r14
	call	?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readArray
	movzx	r15d, al

	jmp	$LN2@readValue
$LN7@readValue:

	lea	rdx, QWORD PTR token$[rbp-128]
	mov	rcx, r14
	call	?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::decodeNumber
	movzx	r15d, al

	jmp	$LN2@readValue
$LN8@readValue:

	lea	rcx, QWORD PTR decoded$75[rbp-128]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

	lea	r8, QWORD PTR decoded$75[rbp-128]
	lea	rdx, QWORD PTR token$[rbp-128]
	mov	rcx, r14
	call	?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Reader::decodeString
	test	al, al
	jne	SHORT $LN57@readValue

	xor	r15b, r15b

	lea	rcx, QWORD PTR decoded$75[rbp-128]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	jmp	$LN2@readValue
$LN57@readValue:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 370  : {

	mov	eax, DWORD PTR $T10[rbp-120]
	and	eax, -252				; ffffffffffffff04H

; 371  :    value_.string_ = valueAllocator()->duplicateStringValue( beginValue, 

	or	eax, 260				; 00000104H
	mov	DWORD PTR $T10[rbp-120], eax

; 372  :                                                             UInt(endValue - beginValue) );

	mov	QWORD PTR $T10[rbp-112], rbx

; 373  : }
; 374  : 
; 375  : 
; 376  : Value::Value( const std::string &value )
; 377  :    : type_( stringValue )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rdi, QWORD PTR [rax]
	mov	rsi, QWORD PTR [rdi]
	lea	rcx, QWORD PTR decoded$75[rbp-128]
	call	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
	mov	rbx, rax
	lea	rcx, QWORD PTR decoded$75[rbp-128]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rdx, rax
	mov	r8d, ebx
	mov	rcx, rdi
	call	QWORD PTR [rsi+24]
	mov	rsi, rax
	mov	QWORD PTR $T10[rbp-128], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, r14
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, r14
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, r14
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rax]
	add	rcx, QWORD PTR [rbx]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T11[rbp-128], rdi
	mov	QWORD PTR $T11[rbp-120], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T11[rbp-128]
	movdqa	XMMWORD PTR _Tmp$73[rbp-128], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$73[rbp-128]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, 1

; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T10[rbp-128]
	mov	rcx, QWORD PTR [rax+rdi*8]
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 484  :    case intValue:

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, rsi
	call	QWORD PTR [rax+32]
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	r15b, 1

	lea	rcx, QWORD PTR decoded$75[rbp-128]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	jmp	$LN2@readValue
$LN9@readValue:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 408  : #endif

	mov	eax, DWORD PTR $T22[rbp-120]
	and	eax, -251				; ffffffffffffff05H
	or	eax, 5
	mov	DWORD PTR $T22[rbp-120], eax

; 409  : {

	mov	QWORD PTR $T22[rbp-112], rbx

; 410  :    value_.string_ = valueAllocator()->duplicateStringValue( value, value.length() );
; 411  : }
; 412  : # endif
; 413  : 
; 414  : Value::Value( bool value )

	mov	BYTE PTR $T22[rbp-128], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, r14
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, r14
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, r14
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rax]
	add	rcx, QWORD PTR [rbx]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T23[rbp-128], rdi
	mov	QWORD PTR $T23[rbp-120], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T23[rbp-128]
	movdqa	XMMWORD PTR _Tmp$72[rbp-128], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$72[rbp-128]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, 1

; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T22[rbp-128]
	mov	rcx, QWORD PTR [rax+rdi*8]
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1

	jmp	$LN2@readValue
$LN10@readValue:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 408  : #endif

	mov	eax, DWORD PTR $T33[rbp-120]
	and	eax, -251				; ffffffffffffff05H
	or	eax, 5
	mov	DWORD PTR $T33[rbp-120], eax

; 409  : {

	mov	QWORD PTR $T33[rbp-112], rbx

; 410  :    value_.string_ = valueAllocator()->duplicateStringValue( value, value.length() );
; 411  : }
; 412  : # endif
; 413  : 
; 414  : Value::Value( bool value )

	mov	BYTE PTR $T33[rbp-128], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, r14
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, r14
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, r14
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rax]
	add	rcx, QWORD PTR [rbx]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T34[rbp-128], rdi
	mov	QWORD PTR $T34[rbp-120], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T34[rbp-128]
	movdqa	XMMWORD PTR _Tmp$71[rbp-128], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$71[rbp-128]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, 1

; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T33[rbp-128]
	mov	rcx, QWORD PTR [rax+rdi*8]
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1

	jmp	SHORT $LN2@readValue
$LN11@readValue:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 270  : 

	and	DWORD PTR $T44[rbp-120], -512		; fffffffffffffe00H

; 271  : /*! \internal Default constructor initialization must be equivalent to:

	mov	QWORD PTR $T44[rbp-112], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, r14
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, r14
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, r14
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rbx]
	add	rcx, QWORD PTR [rax]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T51[rbp-128], rdi
	mov	QWORD PTR $T51[rbp-120], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T51[rbp-128]
	movdqa	XMMWORD PTR _Tmp$70[rbp-128], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$70[rbp-128]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, 1

; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T44[rbp-128]
	mov	rcx, QWORD PTR [rax+rdi*8]
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1
$LN2@readValue:

	cmp	BYTE PTR [r14+186], 0
	je	SHORT $LN13@readValue

	mov	rax, QWORD PTR [r14+128]
	mov	QWORD PTR [r14+136], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, r14
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	QWORD PTR $T63[rbp-128], rax
	mov	rcx, r14
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, r14
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rax]
	add	rcx, QWORD PTR [rbx]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T63[rbp-120], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T63[rbp-128]
	movdqa	XMMWORD PTR _Tmp$69[rbp-128], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$69[rbp-128]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	mov	rcx, rax
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	rax, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 57   :         return _Mycont->_Map[_Block][_Off];

	and	edi, 1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR [rax+rdi*8]
	mov	QWORD PTR [r14+144], rcx
$LN13@readValue:

	movzx	eax, r15b
	jmp	SHORT $LN1@readValue
$LN12@readValue:

	lea	rdx, OFFSET FLAT:??_C@_0CP@GDDNKEK@Syntax?5error?3?5value?0?5object?5or?5@
	lea	rcx, QWORD PTR $T61[rbp-128]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	xor	r9d, r9d
	lea	r8, QWORD PTR token$[rbp-128]
	lea	rdx, QWORD PTR $T61[rbp-128]
	mov	rcx, r14
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	movzx	ebx, al
	lea	rcx, QWORD PTR $T61[rbp-128]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	movzx	eax, bl
$LN1@readValue:

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-128]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+56]
	mov	rsi, QWORD PTR [r11+64]
	mov	rdi, QWORD PTR [r11+72]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
	npad	2
$LN373@readValue:
	DD	$LN5@readValue
	DD	$LN12@readValue
	DD	$LN6@readValue
	DD	$LN12@readValue
	DD	$LN8@readValue
	DD	$LN7@readValue
	DD	$LN9@readValue
	DD	$LN10@readValue
	DD	$LN11@readValue
?readValue@Reader@Json@@AEAA_NXZ ENDP			; Json::Reader::readValue
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$4@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$4
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T7[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$4@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$4
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$5@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$5
	lea	rcx, QWORD PTR decoded$75[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$5@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$5
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$6@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$6
	lea	rcx, QWORD PTR $T10[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$6@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$6
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$0@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$0
	lea	rcx, QWORD PTR $T22[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$0@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$0
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$1@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$1
	lea	rcx, QWORD PTR $T33[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$1@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$1
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$2@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$2
	lea	rcx, QWORD PTR $T44[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$2@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$2
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$3@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$3
	lea	rcx, QWORD PTR $T61[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$3@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$4@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$4
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T7[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$4@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$5@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$5
	lea	rcx, QWORD PTR decoded$75[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$5@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$6@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$6
	lea	rcx, QWORD PTR $T10[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$6@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$0@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$0
	lea	rcx, QWORD PTR $T22[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$0@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$1@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$1
	lea	rcx, QWORD PTR $T33[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$1@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$2@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$2
	lea	rcx, QWORD PTR $T44[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$2@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Tmp$69 = 48
$T63 = 48
_Tmp$70 = 48
$T51 = 48
_Tmp$71 = 48
$T34 = 48
_Tmp$72 = 48
$T23 = 48
_Tmp$73 = 48
$T11 = 48
$T7 = 48
_Tmp$74 = 48
$T1 = 48
$T10 = 64
$T44 = 64
$T33 = 64
$T22 = 64
token$ = 64
decoded$75 = 88
$T61 = 88
__$ArrayPad$ = 120
this$ = 176
?dtor$3@?0??readValue@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readValue'::`1'::dtor$3
	lea	rcx, QWORD PTR $T61[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$3@?0??readValue@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readValue'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?skipCommentTokens@Reader@Json@@AEAAXAEAVToken@12@@Z
_TEXT	SEGMENT
this$ = 48
token$ = 56
?skipCommentTokens@Reader@Json@@AEAAXAEAVToken@12@@Z PROC ; Json::Reader::skipCommentTokens, COMDAT

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

	cmp	BYTE PTR [rcx+184], 0
	mov	rbx, rdx
	mov	rdi, rcx
	je	SHORT $LN5@skipCommen
	npad	7
$LL4@skipCommen:

	mov	rdx, rbx
	mov	rcx, rdi
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken

	cmp	DWORD PTR [rbx], 12
	je	SHORT $LL4@skipCommen

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN5@skipCommen:
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

	jmp	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken
?skipCommentTokens@Reader@Json@@AEAAXAEAVToken@12@@Z ENDP ; Json::Reader::skipCommentTokens
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z
_TEXT	SEGMENT
this$ = 48
token$ = 56
?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z PROC	; Json::Reader::readToken, COMDAT

$LN112:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rdi, rdx

	mov	rcx, QWORD PTR [rcx+128]
	mov	r9, QWORD PTR [rbx+120]
	cmp	rcx, r9
	je	SHORT $LN107@readToken
	mov	r8, rcx
	mov	r10, 4294976000				; 0000000100002200H
	npad	3
$LL21@readToken:

	movsx	rdx, BYTE PTR [r8]

	cmp	dl, 32					; 00000020H
	ja	SHORT $LN101@readToken
	bt	r10, rdx
	jb	SHORT $LN25@readToken
$LN101@readToken:
	cmp	dl, 10
	jne	SHORT $LN107@readToken
$LN25@readToken:

	lea	rcx, QWORD PTR [r8+1]
	mov	QWORD PTR [rbx+128], rcx
	mov	r8, rcx
	cmp	rcx, r9
	jne	SHORT $LL21@readToken
$LN107@readToken:

	mov	QWORD PTR [rdi+8], rcx

	mov	rax, QWORD PTR [rbx+128]
	cmp	rax, QWORD PTR [rbx+120]
	jne	SHORT $LN28@readToken

	xor	cl, cl
	jmp	SHORT $LN27@readToken
$LN28@readToken:

	movzx	ecx, BYTE PTR [rax]
	inc	rax
	mov	QWORD PTR [rbx+128], rax
$LN27@readToken:

	movsx	rax, cl
	cmp	eax, 125				; 0000007dH
	ja	$LN98@readToken
	lea	r10, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN105@readToken[r10+rax]
	mov	ecx, DWORD PTR $LN106@readToken[r10+rax*4]
	add	rcx, r10
	jmp	rcx
$LN4@readToken:

	mov	DWORD PTR [rdi], 1

	jmp	$LN18@readToken
$LN5@readToken:

	mov	DWORD PTR [rdi], 2

	jmp	SHORT $LN18@readToken
$LN6@readToken:

	mov	edx, 3
	mov	DWORD PTR [rdi], edx

	jmp	SHORT $LN18@readToken
$LN7@readToken:

	mov	edx, 4
	mov	DWORD PTR [rdi], edx

	jmp	SHORT $LN18@readToken
$LN8@readToken:

	mov	DWORD PTR [rdi], 5

	xor	cl, cl

	mov	rax, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+120]
	cmp	rax, rdx
	je	SHORT $LN108@readToken
$LL31@readToken:

	movzx	ecx, BYTE PTR [rax]
	inc	rax
	mov	QWORD PTR [rbx+128], rax

	cmp	cl, 92					; 0000005cH
	jne	SHORT $LN33@readToken

	cmp	rax, rdx
	je	SHORT $LN108@readToken

	inc	rax
	mov	QWORD PTR [rbx+128], rax

	jmp	SHORT $LN35@readToken
$LN33@readToken:

	cmp	cl, 34					; 00000022H
	je	SHORT $LN110@readToken
$LN35@readToken:

	cmp	rax, rdx
	jne	SHORT $LL31@readToken
$LN108@readToken:

	cmp	cl, 34					; 00000022H
$LN110@readToken:
	sete	al

	jmp	SHORT $LN2@readToken
$LN9@readToken:

	mov	rcx, rbx
	mov	DWORD PTR [rdi], 12
	call	?readComment@Reader@Json@@AEAA_NXZ	; Json::Reader::readComment
$LN2@readToken:

	test	al, al
	jne	SHORT $LN18@readToken
$LN98@readToken:

	mov	DWORD PTR [rdi], 13
$LN18@readToken:

	mov	rax, QWORD PTR [rbx+128]

	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rdi+16], rax
	mov	al, 1
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN10@readToken:

	mov	DWORD PTR [rdi], 6

	mov	rcx, QWORD PTR [rbx+128]
	mov	r8, QWORD PTR [rbx+120]
	cmp	rcx, r8
	je	SHORT $LN18@readToken
	mov	r9, 288230376218820621			; 040000000400000dH
$LL44@readToken:

	movzx	edx, BYTE PTR [rcx]
	lea	eax, DWORD PTR [rdx-48]
	cmp	al, 9
	jbe	SHORT $LN51@readToken

	sub	dl, 43					; 0000002bH
	cmp	dl, 58					; 0000003aH
	ja	SHORT $LN18@readToken
	bt	r9, rdx
	jae	SHORT $LN18@readToken
$LN51@readToken:

	inc	rcx
	mov	QWORD PTR [rbx+128], rcx
	cmp	rcx, r8
	jne	SHORT $LL44@readToken

	jmp	SHORT $LN18@readToken
$LN11@readToken:

	mov	DWORD PTR [rdi], 7

	mov	r8, QWORD PTR [rbx+128]
	mov	rax, QWORD PTR [rbx+120]
	sub	rax, r8
	cmp	rax, 3
	jl	$LN98@readToken

	lea	rcx, OFFSET FLAT:??_C@_03FFDNHNKN@rue@+3
	mov	r9, r8
	sub	r9, rcx
	mov	edx, 3
	npad	2
$LL54@readToken:

	dec	rdx

	lea	rcx, QWORD PTR ??_C@_03FFDNHNKN@rue@[r10]
	add	rcx, rdx
	movzx	eax, BYTE PTR [rcx]
	cmp	BYTE PTR [r9+rcx+3], al
	jne	$LN98@readToken

	test	rdx, rdx
	jne	SHORT $LL54@readToken

	lea	rax, QWORD PTR [r8+3]
	mov	QWORD PTR [rbx+128], rax

	jmp	$LN18@readToken
$LN12@readToken:

	mov	DWORD PTR [rdi], 8

	mov	r8, QWORD PTR [rbx+128]
	mov	rax, QWORD PTR [rbx+120]
	sub	rax, r8
	cmp	rax, 4
	jl	$LN98@readToken

	lea	rcx, OFFSET FLAT:??_C@_04KCECFHEP@alse@+4
	mov	r9, r8
	sub	r9, rcx
	mov	edx, 4
$LL60@readToken:

	dec	rdx

	lea	rcx, QWORD PTR ??_C@_04KCECFHEP@alse@[r10]
	add	rcx, rdx
	movzx	eax, BYTE PTR [rcx]
	cmp	BYTE PTR [r9+rcx+4], al
	jne	$LN98@readToken

	test	rdx, rdx
	jne	SHORT $LL60@readToken

	lea	rax, QWORD PTR [r8+4]
	mov	QWORD PTR [rbx+128], rax

	jmp	$LN18@readToken
$LN13@readToken:

	mov	DWORD PTR [rdi], 9

	mov	r8, QWORD PTR [rbx+128]
	mov	rax, QWORD PTR [rbx+120]
	sub	rax, r8
	cmp	rax, 3
	jl	$LN98@readToken

	lea	rcx, OFFSET FLAT:??_C@_03KNPGGKC@ull@+3
	mov	r9, r8
	sub	r9, rcx
	mov	edx, 3
$LL66@readToken:

	dec	rdx

	lea	rcx, QWORD PTR ??_C@_03KNPGGKC@ull@[r10]
	add	rcx, rdx
	movzx	eax, BYTE PTR [rcx]
	cmp	BYTE PTR [r9+rcx+3], al
	jne	$LN98@readToken

	test	rdx, rdx
	jne	SHORT $LL66@readToken

	lea	rax, QWORD PTR [r8+3]
	mov	QWORD PTR [rbx+128], rax

	jmp	$LN18@readToken
$LN14@readToken:

	mov	DWORD PTR [rdi], 10

	jmp	$LN18@readToken
$LN15@readToken:

	mov	DWORD PTR [rdi], 11

	jmp	$LN18@readToken
$LN16@readToken:

	mov	DWORD PTR [rdi], 0

	jmp	$LN18@readToken
	npad	3
$LN106@readToken:

	DD	$LN16@readToken
	DD	$LN8@readToken
	DD	$LN14@readToken
	DD	$LN10@readToken
	DD	$LN9@readToken
	DD	$LN15@readToken
	DD	$LN6@readToken
	DD	$LN7@readToken
	DD	$LN12@readToken
	DD	$LN13@readToken
	DD	$LN11@readToken
	DD	$LN4@readToken
	DD	$LN5@readToken
	DD	$LN98@readToken
$LN105@readToken:
	DB	0
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	1
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	2
	DB	3
	DB	13
	DB	4
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	5
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	6
	DB	13
	DB	7
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	8
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	9
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	10
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	11
	DB	13
	DB	12
?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ENDP	; Json::Reader::readToken
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?skipSpaces@Reader@Json@@AEAAXXZ
_TEXT	SEGMENT
this$ = 8
?skipSpaces@Reader@Json@@AEAAXXZ PROC			; Json::Reader::skipSpaces, COMDAT

	mov	rax, QWORD PTR [rcx+128]
	mov	r9, QWORD PTR [rcx+120]
	cmp	rax, r9
	je	SHORT $LN4@skipSpaces
	mov	r10, 4294977024				; 0000000100002600H
	npad	6
$LL2@skipSpaces:

	movsx	rdx, BYTE PTR [rax]

	cmp	dl, 32					; 00000020H
	ja	SHORT $LN4@skipSpaces
	bt	r10, rdx
	jae	SHORT $LN4@skipSpaces

	inc	rax
	mov	QWORD PTR [rcx+128], rax
	cmp	rax, r9
	jne	SHORT $LL2@skipSpaces
$LN4@skipSpaces:

	ret	0
?skipSpaces@Reader@Json@@AEAAXXZ ENDP			; Json::Reader::skipSpaces
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?match@Reader@Json@@AEAA_NPEBDH@Z
_TEXT	SEGMENT
this$ = 8
pattern$ = 16
patternLength$ = 24
?match@Reader@Json@@AEAA_NPEBDH@Z PROC			; Json::Reader::match, COMDAT

$LN13:
	mov	QWORD PTR [rsp+8], rbx

	mov	r10, QWORD PTR [rcx+128]
	mov	r9, rdx
	mov	rax, QWORD PTR [rcx+120]
	mov	rbx, rcx
	sub	rax, r10
	movsxd	r11, r8d
	cmp	rax, r11
	jl	SHORT $LN8@match

	test	r8d, r8d
	je	SHORT $LN9@match

	add	rdx, r11
	mov	r8, r10
	sub	r8, r9
	npad	1
$LL2@match:
	movzx	eax, BYTE PTR [rdx-1]
	mov	rcx, rdx
	dec	rdx
	cmp	BYTE PTR [rcx+r8-1], al
	jne	SHORT $LN8@match

	cmp	rdx, r9
	jne	SHORT $LL2@match
$LN9@match:

	lea	rax, QWORD PTR [r11+r10]
	mov	QWORD PTR [rbx+128], rax

	mov	al, 1

	mov	rbx, QWORD PTR [rsp+8]
	ret	0
$LN8@match:
	mov	rbx, QWORD PTR [rsp+8]
	xor	al, al
	ret	0
?match@Reader@Json@@AEAA_NPEBDH@Z ENDP			; Json::Reader::match
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?readComment@Reader@Json@@AEAA_NXZ
_TEXT	SEGMENT
$T11 = 32
$T9 = 32
$T7 = 32
$S11$12 = 32
$T8 = 32
_Proxy$13 = 33
_Proxy$14 = 33
$S11$15 = 34
$T5 = 34
$T4 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T10 = 56
$T6 = 56
__$ArrayPad$ = 88
this$ = 112
?readComment@Reader@Json@@AEAA_NXZ PROC			; Json::Reader::readComment, COMDAT

$LN89:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	mov	rbp, rsp
	sub	rsp, 96					; 00000060H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-96], rax
	mov	rdi, rcx

	mov	rax, QWORD PTR [rcx+128]
	lea	rbx, QWORD PTR [rax-1]

	mov	rdx, QWORD PTR [rcx+120]
	cmp	rax, rdx
	je	SHORT $LN79@readCommen

	movzx	r8d, BYTE PTR [rax]
	inc	rax
	mov	QWORD PTR [rcx+128], rax

	cmp	r8b, 42					; 0000002aH
	jne	SHORT $LN2@readCommen

	cmp	rax, rdx
	je	SHORT $LN83@readCommen
	npad	11
$LL15@readCommen:

	movzx	ecx, BYTE PTR [rax]
	inc	rax
	mov	QWORD PTR [rdi+128], rax

	cmp	cl, 42					; 0000002aH
	jne	SHORT $LN17@readCommen
	cmp	BYTE PTR [rax], 47			; 0000002fH
	je	SHORT $LN65@readCommen
$LN17@readCommen:

	cmp	rax, rdx
	jne	SHORT $LL15@readCommen

	xor	cl, cl
	jmp	SHORT $LN22@readCommen
$LN65@readCommen:

	cmp	rax, rdx
	jne	SHORT $LN23@readCommen
$LN83@readCommen:

	xor	cl, cl
	jmp	SHORT $LN22@readCommen
$LN23@readCommen:

	movzx	ecx, BYTE PTR [rax]
	inc	rax
	mov	QWORD PTR [rdi+128], rax
$LN22@readCommen:

	cmp	cl, 47					; 0000002fH
	je	SHORT $LN5@readCommen
$LN79@readCommen:

	xor	al, al
$LN1@readCommen:

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-96]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+96]
	mov	rbx, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	rbp
	ret	0
$LN2@readCommen:

	cmp	r8b, 47					; 0000002fH
	jne	SHORT $LN79@readCommen

	cmp	rax, rdx
	je	SHORT $LN5@readCommen
	npad	6
$LL26@readCommen:

	movzx	ecx, BYTE PTR [rax]
	inc	rax
	mov	QWORD PTR [rdi+128], rax

	cmp	cl, 13
	je	SHORT $LN5@readCommen
	cmp	cl, 10
	je	SHORT $LN5@readCommen

	cmp	rax, rdx
	jne	SHORT $LL26@readCommen
$LN5@readCommen:

	cmp	BYTE PTR [rdi+186], 0
	je	$LN50@readCommen

	xor	r9d, r9d

	mov	rax, QWORD PTR [rdi+136]
	test	rax, rax
	je	SHORT $LN8@readCommen

	cmp	rax, rbx
	jae	SHORT $LN36@readCommen
	npad	3
$LL37@readCommen:

	movzx	ecx, BYTE PTR [rax]
	cmp	cl, 10
	je	SHORT $LN8@readCommen
	cmp	cl, 13
	je	SHORT $LN8@readCommen

	inc	rax
	cmp	rax, rbx
	jb	SHORT $LL37@readCommen
$LN36@readCommen:

	cmp	r8b, 42					; 0000002aH
	jne	SHORT $LN43@readCommen
	mov	rax, rbx

	mov	rdx, QWORD PTR [rdi+128]
	cmp	rbx, rdx
	jae	SHORT $LN43@readCommen
	npad	6
$LL44@readCommen:

	movzx	ecx, BYTE PTR [rax]
	cmp	cl, 10
	je	SHORT $LN8@readCommen
	cmp	cl, 13
	je	SHORT $LN8@readCommen

	inc	rax
	cmp	rax, rdx
	jb	SHORT $LL44@readCommen
$LN43@readCommen:

	mov	r9d, 1
$LN8@readCommen:

	mov	rsi, QWORD PTR [rdi+128]

	cmp	r9d, 1
	jne	$LN49@readCommen

	lea	rcx, QWORD PTR $T4[rbp-96]
	call	??0?$allocator@D@std@@QEAA@XZ		; std::allocator<char>::allocator<char>
	mov	QWORD PTR _Last$[rbp-96], rsi
	mov	QWORD PTR _First$[rbp-96], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring

; 2374 :     basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc()) : _Mypair(_One_then_variadic_args_t(), _Al) {

	mov	r8, rax
	movzx	edx, BYTE PTR $T5[rbp-96]
	lea	rcx, QWORD PTR $T6[rbp-96]
	call	??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
	npad	1

; 2375 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2376 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

	lea	r8, QWORD PTR $T6[rbp-96]
	lea	rdx, QWORD PTR $S11$12[rbp-96]
	lea	rcx, QWORD PTR _Proxy$14[rbp-96]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2377 :         _Tidy_init();

	lea	rcx, QWORD PTR $T6[rbp-96]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2378 :         _Adl_verify_range(_First, _Last);

	lea	rdx, QWORD PTR _Last$[rbp-96]
	lea	rcx, QWORD PTR _First$[rbp-96]
	call	??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ; std::_Adl_verify_range<char const *,char const *>

; 2379 :         _Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>());

	mov	rcx, QWORD PTR _Last$[rbp-96]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rbx, rax
	mov	rcx, QWORD PTR _First$[rbp-96]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rdx, rax
	movzx	r9d, BYTE PTR $T7[rbp-96]
	mov	r8, rbx
	lea	rcx, QWORD PTR $T6[rbp-96]
	call	?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXQEBD0Urandom_access_iterator_tag@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct

; 2380 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$14[rbp-96]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	r8d, 1
	lea	rdx, QWORD PTR $T6[rbp-96]
	mov	rcx, QWORD PTR [rdi+144]
	call	?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::setComment
	npad	1

	lea	rcx, QWORD PTR $T10[rbp-96]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	al, 1
	jmp	$LN1@readCommen
$LN49@readCommen:

	add	rdi, 152				; 00000098H
	mov	rcx, rdi
	call	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
	test	al, al
	jne	SHORT $LN51@readCommen

	lea	rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6@
	mov	rcx, rdi
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
$LN51@readCommen:

	lea	rcx, QWORD PTR $T8[rbp-96]
	call	??0?$allocator@D@std@@QEAA@XZ		; std::allocator<char>::allocator<char>
	mov	QWORD PTR _Last$[rbp-96], rsi
	mov	QWORD PTR _First$[rbp-96], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring

; 2374 :     basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc()) : _Mypair(_One_then_variadic_args_t(), _Al) {

	mov	r8, rax
	movzx	edx, BYTE PTR $T9[rbp-96]
	lea	rcx, QWORD PTR $T10[rbp-96]
	call	??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
	npad	1

; 2375 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2376 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

	lea	r8, QWORD PTR $T10[rbp-96]
	lea	rdx, QWORD PTR $S11$15[rbp-96]
	lea	rcx, QWORD PTR _Proxy$13[rbp-96]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2377 :         _Tidy_init();

	lea	rcx, QWORD PTR $T10[rbp-96]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2378 :         _Adl_verify_range(_First, _Last);

	lea	rdx, QWORD PTR _Last$[rbp-96]
	lea	rcx, QWORD PTR _First$[rbp-96]
	call	??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ; std::_Adl_verify_range<char const *,char const *>

; 2379 :         _Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>());

	mov	rcx, QWORD PTR _Last$[rbp-96]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rbx, rax
	mov	rcx, QWORD PTR _First$[rbp-96]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rdx, rax
	movzx	r9d, BYTE PTR $T11[rbp-96]
	mov	r8, rbx
	lea	rcx, QWORD PTR $T10[rbp-96]
	call	?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXQEBD0Urandom_access_iterator_tag@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct

; 2380 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$13[rbp-96]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T10[rbp-96]
	mov	rcx, rdi
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
	npad	1

	lea	rcx, QWORD PTR $T10[rbp-96]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN50@readCommen:
	mov	al, 1
	jmp	$LN1@readCommen
?readComment@Reader@Json@@AEAA_NXZ ENDP			; Json::Reader::readComment
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T11 = 32
$T9 = 32
$T7 = 32
$S11$12 = 32
$T8 = 32
_Proxy$13 = 33
_Proxy$14 = 33
$S11$15 = 34
$T5 = 34
$T4 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T10 = 56
$T6 = 56
__$ArrayPad$ = 88
this$ = 112
?dtor$2@?0??readComment@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readComment'::`1'::dtor$2
	lea	rcx, QWORD PTR $T6[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$2@?0??readComment@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readComment'::`1'::dtor$2
$T11 = 32
$T9 = 32
$T7 = 32
$S11$12 = 32
$T8 = 32
_Proxy$13 = 33
_Proxy$14 = 33
$S11$15 = 34
$T5 = 34
$T4 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T10 = 56
$T6 = 56
__$ArrayPad$ = 88
this$ = 112
?dtor$0@?0??readComment@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readComment'::`1'::dtor$0
	lea	rcx, QWORD PTR $T6[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??readComment@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readComment'::`1'::dtor$0
$T11 = 32
$T9 = 32
$T7 = 32
$S11$12 = 32
$T8 = 32
_Proxy$13 = 33
_Proxy$14 = 33
$S11$15 = 34
$T5 = 34
$T4 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T10 = 56
$T6 = 56
__$ArrayPad$ = 88
this$ = 112
?dtor$3@?0??readComment@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readComment'::`1'::dtor$3
	lea	rcx, QWORD PTR $T10[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$3@?0??readComment@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readComment'::`1'::dtor$3
$T11 = 32
$T9 = 32
$T7 = 32
$S11$12 = 32
$T8 = 32
_Proxy$13 = 33
_Proxy$14 = 33
$S11$15 = 34
$T5 = 34
$T4 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T10 = 56
$T6 = 56
__$ArrayPad$ = 88
this$ = 112
?dtor$1@?0??readComment@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readComment'::`1'::dtor$1
	lea	rcx, QWORD PTR $T10[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??readComment@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readComment'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T11 = 32
$T9 = 32
$T7 = 32
$S11$12 = 32
$T8 = 32
_Proxy$13 = 33
_Proxy$14 = 33
$S11$15 = 34
$T5 = 34
$T4 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T10 = 56
$T6 = 56
__$ArrayPad$ = 88
this$ = 112
?dtor$2@?0??readComment@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readComment'::`1'::dtor$2
	lea	rcx, QWORD PTR $T6[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$2@?0??readComment@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readComment'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T11 = 32
$T9 = 32
$T7 = 32
$S11$12 = 32
$T8 = 32
_Proxy$13 = 33
_Proxy$14 = 33
$S11$15 = 34
$T5 = 34
$T4 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T10 = 56
$T6 = 56
__$ArrayPad$ = 88
this$ = 112
?dtor$0@?0??readComment@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readComment'::`1'::dtor$0
	lea	rcx, QWORD PTR $T6[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??readComment@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readComment'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T11 = 32
$T9 = 32
$T7 = 32
$S11$12 = 32
$T8 = 32
_Proxy$13 = 33
_Proxy$14 = 33
$S11$15 = 34
$T5 = 34
$T4 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T10 = 56
$T6 = 56
__$ArrayPad$ = 88
this$ = 112
?dtor$3@?0??readComment@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readComment'::`1'::dtor$3
	lea	rcx, QWORD PTR $T10[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$3@?0??readComment@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readComment'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T11 = 32
$T9 = 32
$T7 = 32
$S11$12 = 32
$T8 = 32
_Proxy$13 = 33
_Proxy$14 = 33
$S11$15 = 34
$T5 = 34
$T4 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T10 = 56
$T6 = 56
__$ArrayPad$ = 88
this$ = 112
?dtor$1@?0??readComment@Reader@Json@@AEAA_NXZ@4HA PROC	; `Json::Reader::readComment'::`1'::dtor$1
	lea	rcx, QWORD PTR $T10[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??readComment@Reader@Json@@AEAA_NXZ@4HA ENDP	; `Json::Reader::readComment'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z
_TEXT	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$9 = 32
$T5 = 32
_Proxy$10 = 33
_Proxy$11 = 33
$S11$12 = 34
$T2 = 34
$T1 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T7 = 56
$T3 = 56
__$ArrayPad$ = 88
this$ = 144
begin$ = 152
end$ = 160
placement$ = 168
?addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z PROC ; Json::Reader::addComment, COMDAT

$LN17:
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	mov	rbp, rsp
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-104], rax
	mov	rsi, r8
	mov	rbx, rdx
	mov	rdi, rcx

	cmp	r9d, 1
	jne	$LN2@addComment

	lea	rcx, QWORD PTR $T1[rbp-104]
	call	??0?$allocator@D@std@@QEAA@XZ		; std::allocator<char>::allocator<char>
	mov	QWORD PTR _Last$[rbp-104], rsi
	mov	QWORD PTR _First$[rbp-104], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring

; 2374 :     basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc()) : _Mypair(_One_then_variadic_args_t(), _Al) {

	mov	r8, rax
	movzx	edx, BYTE PTR $T2[rbp-104]
	lea	rcx, QWORD PTR $T3[rbp-104]
	call	??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
	npad	1

; 2375 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2376 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

	lea	r8, QWORD PTR $T3[rbp-104]
	lea	rdx, QWORD PTR $S11$9[rbp-104]
	lea	rcx, QWORD PTR _Proxy$11[rbp-104]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2377 :         _Tidy_init();

	lea	rcx, QWORD PTR $T3[rbp-104]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2378 :         _Adl_verify_range(_First, _Last);

	lea	rdx, QWORD PTR _Last$[rbp-104]
	lea	rcx, QWORD PTR _First$[rbp-104]
	call	??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ; std::_Adl_verify_range<char const *,char const *>

; 2379 :         _Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>());

	mov	rcx, QWORD PTR _Last$[rbp-104]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rbx, rax
	mov	rcx, QWORD PTR _First$[rbp-104]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rdx, rax
	movzx	r9d, BYTE PTR $T4[rbp-104]
	mov	r8, rbx
	lea	rcx, QWORD PTR $T3[rbp-104]
	call	?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXQEBD0Urandom_access_iterator_tag@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct

; 2380 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$11[rbp-104]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	r8d, 1
	lea	rdx, QWORD PTR $T3[rbp-104]
	mov	rcx, QWORD PTR [rdi+144]
	call	?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::setComment
	npad	1

	jmp	$LN14@addComment
$LN2@addComment:

	add	rdi, 152				; 00000098H
	mov	rcx, rdi
	call	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
	test	al, al
	jne	SHORT $LN4@addComment

	lea	rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6@
	mov	rcx, rdi
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
$LN4@addComment:

	lea	rcx, QWORD PTR $T5[rbp-104]
	call	??0?$allocator@D@std@@QEAA@XZ		; std::allocator<char>::allocator<char>
	mov	QWORD PTR _Last$[rbp-104], rsi
	mov	QWORD PTR _First$[rbp-104], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring

; 2374 :     basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc()) : _Mypair(_One_then_variadic_args_t(), _Al) {

	mov	r8, rax
	movzx	edx, BYTE PTR $T6[rbp-104]
	lea	rcx, QWORD PTR $T7[rbp-104]
	call	??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
	npad	1

; 2375 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2376 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

	lea	r8, QWORD PTR $T7[rbp-104]
	lea	rdx, QWORD PTR $S11$12[rbp-104]
	lea	rcx, QWORD PTR _Proxy$10[rbp-104]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2377 :         _Tidy_init();

	lea	rcx, QWORD PTR $T7[rbp-104]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2378 :         _Adl_verify_range(_First, _Last);

	lea	rdx, QWORD PTR _Last$[rbp-104]
	lea	rcx, QWORD PTR _First$[rbp-104]
	call	??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ; std::_Adl_verify_range<char const *,char const *>

; 2379 :         _Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>());

	mov	rcx, QWORD PTR _Last$[rbp-104]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rbx, rax
	mov	rcx, QWORD PTR _First$[rbp-104]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rdx, rax
	movzx	r9d, BYTE PTR $T8[rbp-104]
	mov	r8, rbx
	lea	rcx, QWORD PTR $T7[rbp-104]
	call	?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXQEBD0Urandom_access_iterator_tag@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct

; 2380 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$10[rbp-104]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T7[rbp-104]
	mov	rcx, rdi
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
	npad	1
$LN14@addComment:

	lea	rcx, QWORD PTR $T7[rbp-104]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rcx, QWORD PTR __$ArrayPad$[rbp-104]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
?addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z ENDP ; Json::Reader::addComment
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$9 = 32
$T5 = 32
_Proxy$10 = 33
_Proxy$11 = 33
$S11$12 = 34
$T2 = 34
$T1 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T7 = 56
$T3 = 56
__$ArrayPad$ = 88
this$ = 144
begin$ = 152
end$ = 160
placement$ = 168
?dtor$2@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA PROC ; `Json::Reader::addComment'::`1'::dtor$2
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$2@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA ENDP ; `Json::Reader::addComment'::`1'::dtor$2
$T8 = 32
$T6 = 32
$T4 = 32
$S11$9 = 32
$T5 = 32
_Proxy$10 = 33
_Proxy$11 = 33
$S11$12 = 34
$T2 = 34
$T1 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T7 = 56
$T3 = 56
__$ArrayPad$ = 88
this$ = 144
begin$ = 152
end$ = 160
placement$ = 168
?dtor$0@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA PROC ; `Json::Reader::addComment'::`1'::dtor$0
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA ENDP ; `Json::Reader::addComment'::`1'::dtor$0
$T8 = 32
$T6 = 32
$T4 = 32
$S11$9 = 32
$T5 = 32
_Proxy$10 = 33
_Proxy$11 = 33
$S11$12 = 34
$T2 = 34
$T1 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T7 = 56
$T3 = 56
__$ArrayPad$ = 88
this$ = 144
begin$ = 152
end$ = 160
placement$ = 168
?dtor$3@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA PROC ; `Json::Reader::addComment'::`1'::dtor$3
	lea	rcx, QWORD PTR $T7[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$3@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA ENDP ; `Json::Reader::addComment'::`1'::dtor$3
$T8 = 32
$T6 = 32
$T4 = 32
$S11$9 = 32
$T5 = 32
_Proxy$10 = 33
_Proxy$11 = 33
$S11$12 = 34
$T2 = 34
$T1 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T7 = 56
$T3 = 56
__$ArrayPad$ = 88
this$ = 144
begin$ = 152
end$ = 160
placement$ = 168
?dtor$1@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA PROC ; `Json::Reader::addComment'::`1'::dtor$1
	lea	rcx, QWORD PTR $T7[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA ENDP ; `Json::Reader::addComment'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$9 = 32
$T5 = 32
_Proxy$10 = 33
_Proxy$11 = 33
$S11$12 = 34
$T2 = 34
$T1 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T7 = 56
$T3 = 56
__$ArrayPad$ = 88
this$ = 144
begin$ = 152
end$ = 160
placement$ = 168
?dtor$2@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA PROC ; `Json::Reader::addComment'::`1'::dtor$2
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$2@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA ENDP ; `Json::Reader::addComment'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$9 = 32
$T5 = 32
_Proxy$10 = 33
_Proxy$11 = 33
$S11$12 = 34
$T2 = 34
$T1 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T7 = 56
$T3 = 56
__$ArrayPad$ = 88
this$ = 144
begin$ = 152
end$ = 160
placement$ = 168
?dtor$0@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA PROC ; `Json::Reader::addComment'::`1'::dtor$0
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA ENDP ; `Json::Reader::addComment'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$9 = 32
$T5 = 32
_Proxy$10 = 33
_Proxy$11 = 33
$S11$12 = 34
$T2 = 34
$T1 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T7 = 56
$T3 = 56
__$ArrayPad$ = 88
this$ = 144
begin$ = 152
end$ = 160
placement$ = 168
?dtor$3@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA PROC ; `Json::Reader::addComment'::`1'::dtor$3
	lea	rcx, QWORD PTR $T7[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$3@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA ENDP ; `Json::Reader::addComment'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$9 = 32
$T5 = 32
_Proxy$10 = 33
_Proxy$11 = 33
$S11$12 = 34
$T2 = 34
$T1 = 34
_First$ = 40
_Last$ = 40
_Last$ = 48
_First$ = 48
$T7 = 56
$T3 = 56
__$ArrayPad$ = 88
this$ = 144
begin$ = 152
end$ = 160
placement$ = 168
?dtor$1@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA PROC ; `Json::Reader::addComment'::`1'::dtor$1
	lea	rcx, QWORD PTR $T7[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??addComment@Reader@Json@@AEAAXPEBD0W4CommentPlacement@2@@Z@4HA ENDP ; `Json::Reader::addComment'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?readCStyleComment@Reader@Json@@AEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?readCStyleComment@Reader@Json@@AEAA_NXZ PROC		; Json::Reader::readCStyleComment, COMDAT

	mov	rax, QWORD PTR [rcx+128]
	mov	r8, QWORD PTR [rcx+120]
	cmp	rax, r8
	je	SHORT $LN16@readCStyle
$LL2@readCStyle:

	movzx	edx, BYTE PTR [rax]
	inc	rax
	mov	QWORD PTR [rcx+128], rax

	cmp	dl, 42					; 0000002aH
	jne	SHORT $LN4@readCStyle
	cmp	BYTE PTR [rax], 47			; 0000002fH
	je	SHORT $LN13@readCStyle
$LN4@readCStyle:

	cmp	rax, r8
	jne	SHORT $LL2@readCStyle

	xor	dl, dl

	cmp	dl, 47					; 0000002fH
	sete	al

	ret	0
$LN13@readCStyle:

	cmp	rax, r8
	jne	SHORT $LN10@readCStyle
$LN16@readCStyle:

	xor	dl, dl

	cmp	dl, 47					; 0000002fH
	sete	al

	ret	0
$LN10@readCStyle:

	movzx	edx, BYTE PTR [rax]
	inc	rax

	cmp	dl, 47					; 0000002fH

	mov	QWORD PTR [rcx+128], rax

	sete	al

	ret	0
?readCStyleComment@Reader@Json@@AEAA_NXZ ENDP		; Json::Reader::readCStyleComment
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?readCppStyleComment@Reader@Json@@AEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?readCppStyleComment@Reader@Json@@AEAA_NXZ PROC		; Json::Reader::readCppStyleComment, COMDAT

	mov	rax, QWORD PTR [rcx+128]
	mov	r8, QWORD PTR [rcx+120]
	cmp	rax, r8
	je	SHORT $LN18@readCppSty
$LL2@readCppSty:

	movzx	edx, BYTE PTR [rax]
	inc	rax
	mov	QWORD PTR [rcx+128], rax

	cmp	dl, 13
	je	SHORT $LN18@readCppSty
	cmp	dl, 10
	je	SHORT $LN18@readCppSty

	cmp	rax, r8
	jne	SHORT $LL2@readCppSty
$LN18@readCppSty:

	mov	al, 1
	ret	0
?readCppStyleComment@Reader@Json@@AEAA_NXZ ENDP		; Json::Reader::readCppStyleComment
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?readNumber@Reader@Json@@AEAAXXZ
_TEXT	SEGMENT
this$ = 8
?readNumber@Reader@Json@@AEAAXXZ PROC			; Json::Reader::readNumber, COMDAT

	mov	rax, QWORD PTR [rcx+128]
	mov	r9, rcx
	mov	r10, QWORD PTR [rcx+120]
	cmp	rax, r10
	je	SHORT $LN16@readNumber
	mov	r11, 288230376218820621			; 040000000400000dH
	npad	3
$LL2@readNumber:

	movzx	r8d, BYTE PTR [rax]
	lea	edx, DWORD PTR [r8-48]
	cmp	dl, 9
	jbe	SHORT $LN9@readNumber

	sub	r8b, 43					; 0000002bH
	cmp	r8b, 58					; 0000003aH
	ja	SHORT $LN16@readNumber
	bt	r11, r8
	jae	SHORT $LN16@readNumber
$LN9@readNumber:

	inc	rax
	mov	QWORD PTR [r9+128], rax
	cmp	rax, r10
	jne	SHORT $LL2@readNumber
$LN16@readNumber:

	ret	0
?readNumber@Reader@Json@@AEAAXXZ ENDP			; Json::Reader::readNumber
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?readString@Reader@Json@@AEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?readString@Reader@Json@@AEAA_NXZ PROC			; Json::Reader::readString, COMDAT

	mov	rax, QWORD PTR [rcx+128]
	xor	dl, dl
	mov	r8, QWORD PTR [rcx+120]
	cmp	rax, r8
	je	SHORT $LN15@readString
	npad	14
$LL2@readString:

	movzx	edx, BYTE PTR [rax]
	inc	rax
	mov	QWORD PTR [rcx+128], rax

	cmp	dl, 92					; 0000005cH
	jne	SHORT $LN4@readString

	cmp	rax, r8
	je	SHORT $LN15@readString

	inc	rax
	mov	QWORD PTR [rcx+128], rax

	jmp	SHORT $LN6@readString
$LN4@readString:

	cmp	dl, 34					; 00000022H
	je	SHORT $LN20@readString
$LN6@readString:

	cmp	rax, r8
	jne	SHORT $LL2@readString
$LN15@readString:

	cmp	dl, 34					; 00000022H
$LN20@readString:
	sete	al

	ret	0
?readString@Reader@Json@@AEAA_NXZ ENDP			; Json::Reader::readString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z
_TEXT	SEGMENT
_Proxy$35 = 32
$T3 = 33
$S10$36 = 34
_Tmp$37 = 48
$T8 = 48
$T2 = 48
$T29 = 48
colon$38 = 48
_Tmp$39 = 80
$T23 = 80
$T31 = 96
tokenName$ = 96
$T1 = 96
$T34 = 128
comma$40 = 128
$T21 = 128
name$ = 160
__$ArrayPad$ = 192
this$ = 240
tokenStart$dead$ = 248
?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z PROC	; Json::Reader::readObject, COMDAT

$LN193:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rbp
	push	rdi
	push	r14
	lea	rbp, QWORD PTR [rsp-71]
	sub	rsp, 208				; 000000d0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-137], rax
	mov	r14, rcx

	lea	rcx, QWORD PTR name$[rbp-137]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 269  : // //////////////////////////////////////////////////////////////////

	mov	eax, DWORD PTR $T1[rbp-129]
	and	eax, -505				; fffffffffffffe07H

; 270  : 

	or	eax, 7
	mov	DWORD PTR $T1[rbp-129], eax

; 271  : /*! \internal Default constructor initialization must be equivalent to:

	xor	ebx, ebx
	mov	QWORD PTR $T1[rbp-121], rbx

; 293  :       break;

	lea	ecx, QWORD PTR [rbx+16]
	call	??2@YAPEAX_K@Z				; operator new
	mov	rsi, rax
	mov	QWORD PTR $T2[rbp-137], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1333 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	lea	rcx, QWORD PTR $T3[rbp-137]
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	QWORD PTR [rsi], rbx
	mov	QWORD PTR [rsi+8], rbx

; 2023 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	mov	r8, rsi
	lea	rdx, QWORD PTR $S10$36[rbp-137]
	lea	rcx, QWORD PTR _Proxy$35[rbp-137]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	lea	ecx, QWORD PTR [rbx+1]
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	rdx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	rdx, QWORD PTR [rbx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 347  :         _Pnode->_Color = _Black;

	mov	WORD PTR [rbx+24], 257			; 00000101H

; 2024 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	QWORD PTR [rsi], rbx

; 2025 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$35[rbp-137]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 293  :       break;

	mov	QWORD PTR $T1[rbp-137], rsi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, r14
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, r14
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, r14
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rbx]
	add	rcx, QWORD PTR [rax]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T8[rbp-137], rdi
	mov	QWORD PTR $T8[rbp-129], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T8[rbp-137]
	movdqa	XMMWORD PTR _Tmp$39[rbp-137], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$39[rbp-137]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, 1

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;
; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T1[rbp-137]
	mov	rcx, QWORD PTR [rax+rdi*8]
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 751  :         this->_Orphan_all();

	mov	rcx, rsi
	call	?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	r8, QWORD PTR [rsi]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, rsi
	mov	rcx, rsi
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, QWORD PTR [rsi]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	mov	edx, 16
	mov	rcx, rsi
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1
$LN187@readObject:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR tokenName$[rbp-137]
	mov	rcx, r14
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken
	test	al, al
	je	$LN3@readObject
	mov	cl, 1

	mov	eax, DWORD PTR tokenName$[rbp-137]
	cmp	eax, 12
	jne	SHORT $LN181@readObject
$LL4@readObject:
	test	cl, cl
	je	$LN3@readObject

	lea	rdx, QWORD PTR tokenName$[rbp-137]
	mov	rcx, r14
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken
	movzx	ecx, al

	mov	eax, DWORD PTR tokenName$[rbp-137]
	cmp	eax, 12
	je	SHORT $LL4@readObject

	test	cl, cl
	je	$LN3@readObject
$LN181@readObject:

	cmp	eax, 2
	je	$LN182@readObject

	cmp	eax, 5
	jne	$LN3@readObject

	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	lea	rcx, QWORD PTR name$[rbp-137]
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

	lea	r8, QWORD PTR name$[rbp-137]
	lea	rdx, QWORD PTR tokenName$[rbp-137]
	mov	rcx, r14
	call	?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Reader::decodeString
	mov	rcx, r14
	test	al, al
	je	$LN170@readObject

	lea	rdx, QWORD PTR colon$38[rbp-137]
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken
	test	al, al
	je	$LN13@readObject
	cmp	DWORD PTR colon$38[rbp-137], 11
	jne	$LN13@readObject
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, r14
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, r14
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, r14
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rax]
	add	rcx, QWORD PTR [rbx]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T23[rbp-137], rdi
	mov	QWORD PTR $T23[rbp-129], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T23[rbp-137]
	movdqa	XMMWORD PTR _Tmp$37[rbp-137], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$37[rbp-137]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, 1

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;
; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	rbx, QWORD PTR [rax+rdi*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1084 : #endif

	lea	rcx, QWORD PTR name$[rbp-137]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str

; 1017 : #endif

	mov	rdx, rax
	mov	rcx, rbx
	call	?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z ; Json::Value::resolveReference
	mov	QWORD PTR $T29[rbp-137], rax
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T29[rbp-137]
	mov	rcx, r14
	call	?push@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push

	mov	rcx, r14
	call	?readValue@Reader@Json@@AEAA_NXZ	; Json::Reader::readValue
	movzx	ebx, al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack

; 94   :         c.pop_back();

	mov	rcx, r14
	call	?pop_back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	rcx, r14
	test	bl, bl
	je	$LN170@readObject

	lea	rdx, QWORD PTR comma$40[rbp-137]
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken
	test	al, al
	je	SHORT $LN16@readObject
	mov	ecx, DWORD PTR comma$40[rbp-137]
	lea	eax, DWORD PTR [rcx-2]
	test	eax, -11				; fffffff5H
	jne	SHORT $LN16@readObject
	cmp	ecx, 4
	je	SHORT $LN16@readObject

	mov	al, 1

	cmp	ecx, 12
	jne	SHORT $LN7@readObject
$LL6@readObject:
	test	al, al
	je	SHORT $LN7@readObject

	lea	rdx, QWORD PTR comma$40[rbp-137]
	mov	rcx, r14
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken

	mov	ecx, DWORD PTR comma$40[rbp-137]
	cmp	ecx, 12
	je	SHORT $LL6@readObject
$LN7@readObject:

	cmp	ecx, 2
	jne	$LN187@readObject
$LN190@readObject:

	mov	bl, 1
	jmp	$LN29@readObject
$LN16@readObject:

	lea	rdx, OFFSET FLAT:??_C@_0CJ@NGKOAFKA@Missing?5?8?0?8?5or?5?8?$HN?8?5in?5object?5de@
	lea	rcx, QWORD PTR $T31[rbp-137]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

	xor	r9d, r9d
	lea	r8, QWORD PTR comma$40[rbp-137]
	lea	rdx, QWORD PTR $T31[rbp-137]
	mov	rcx, r14
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError

	mov	edx, 2
	mov	rcx, r14
	call	?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
	movzx	ebx, al

	lea	rcx, QWORD PTR $T31[rbp-137]
	jmp	$LN188@readObject
$LN170@readObject:

	mov	edx, 2
	call	?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
	movzx	ebx, al
	jmp	$LN29@readObject
$LN13@readObject:

	lea	rdx, OFFSET FLAT:??_C@_0CF@GCCDMCPH@Missing?5?8?3?8?5after?5object?5member@
	lea	rcx, QWORD PTR $T21[rbp-137]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

	xor	r9d, r9d
	lea	r8, QWORD PTR colon$38[rbp-137]
	lea	rdx, QWORD PTR $T21[rbp-137]
	mov	rcx, r14
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError

	mov	edx, 2
	mov	rcx, r14
	call	?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
	movzx	ebx, al

	jmp	SHORT $LN189@readObject
$LN182@readObject:

	lea	rcx, QWORD PTR name$[rbp-137]
	call	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
	test	al, al
	jne	$LN190@readObject
$LN3@readObject:

	lea	rdx, OFFSET FLAT:??_C@_0CC@JNCGHFHN@Missing?5?8?$HN?8?5or?5object?5member?5na@
	lea	rcx, QWORD PTR $T34[rbp-137]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

	xor	r9d, r9d
	lea	r8, QWORD PTR tokenName$[rbp-137]
	lea	rdx, QWORD PTR $T34[rbp-137]
	mov	rcx, r14
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError

	mov	edx, 2
	mov	rcx, r14
	call	?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
	movzx	ebx, al
$LN189@readObject:

	lea	rcx, QWORD PTR $T34[rbp-137]
$LN188@readObject:
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
$LN29@readObject:
	lea	rcx, QWORD PTR name$[rbp-137]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	movzx	eax, bl

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-137]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+208]
	mov	rbx, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rsp, r11
	pop	r14
	pop	rdi
	pop	rbp
	ret	0
?readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z ENDP	; Json::Reader::readObject
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Proxy$35 = 32
$T3 = 33
$S10$36 = 34
_Tmp$37 = 48
$T8 = 48
$T2 = 48
$T29 = 48
colon$38 = 48
_Tmp$39 = 80
$T23 = 80
$T31 = 96
tokenName$ = 96
$T1 = 96
$T34 = 128
comma$40 = 128
$T21 = 128
name$ = 160
__$ArrayPad$ = 192
this$ = 240
tokenStart$dead$ = 248
?dtor$0@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readObject'::`1'::dtor$0
	lea	rcx, QWORD PTR name$[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readObject'::`1'::dtor$0
_Proxy$35 = 32
$T3 = 33
$S10$36 = 34
_Tmp$37 = 48
$T8 = 48
$T2 = 48
$T29 = 48
colon$38 = 48
_Tmp$39 = 80
$T23 = 80
$T31 = 96
tokenName$ = 96
$T1 = 96
$T34 = 128
comma$40 = 128
$T21 = 128
name$ = 160
__$ArrayPad$ = 192
this$ = 240
tokenStart$dead$ = 248
?dtor$5@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readObject'::`1'::dtor$5
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$5@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readObject'::`1'::dtor$5
_Proxy$35 = 32
$T3 = 33
$S10$36 = 34
_Tmp$37 = 48
$T8 = 48
$T2 = 48
$T29 = 48
colon$38 = 48
_Tmp$39 = 80
$T23 = 80
$T31 = 96
tokenName$ = 96
$T1 = 96
$T34 = 128
comma$40 = 128
$T21 = 128
name$ = 160
__$ArrayPad$ = 192
this$ = 240
tokenStart$dead$ = 248
?dtor$1@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readObject'::`1'::dtor$1
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$1@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readObject'::`1'::dtor$1
_Proxy$35 = 32
$T3 = 33
$S10$36 = 34
_Tmp$37 = 48
$T8 = 48
$T2 = 48
$T29 = 48
colon$38 = 48
_Tmp$39 = 80
$T23 = 80
$T31 = 96
tokenName$ = 96
$T1 = 96
$T34 = 128
comma$40 = 128
$T21 = 128
name$ = 160
__$ArrayPad$ = 192
this$ = 240
tokenStart$dead$ = 248
?dtor$2@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readObject'::`1'::dtor$2
	lea	rcx, QWORD PTR $T21[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readObject'::`1'::dtor$2
_Proxy$35 = 32
$T3 = 33
$S10$36 = 34
_Tmp$37 = 48
$T8 = 48
$T2 = 48
$T29 = 48
colon$38 = 48
_Tmp$39 = 80
$T23 = 80
$T31 = 96
tokenName$ = 96
$T1 = 96
$T34 = 128
comma$40 = 128
$T21 = 128
name$ = 160
__$ArrayPad$ = 192
this$ = 240
tokenStart$dead$ = 248
?dtor$3@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readObject'::`1'::dtor$3
	lea	rcx, QWORD PTR $T31[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$3@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readObject'::`1'::dtor$3
_Proxy$35 = 32
$T3 = 33
$S10$36 = 34
_Tmp$37 = 48
$T8 = 48
$T2 = 48
$T29 = 48
colon$38 = 48
_Tmp$39 = 80
$T23 = 80
$T31 = 96
tokenName$ = 96
$T1 = 96
$T34 = 128
comma$40 = 128
$T21 = 128
name$ = 160
__$ArrayPad$ = 192
this$ = 240
tokenStart$dead$ = 248
?dtor$4@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readObject'::`1'::dtor$4
	lea	rcx, QWORD PTR $T34[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$4@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readObject'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$35 = 32
$T3 = 33
$S10$36 = 34
_Tmp$37 = 48
$T8 = 48
$T2 = 48
$T29 = 48
colon$38 = 48
_Tmp$39 = 80
$T23 = 80
$T31 = 96
tokenName$ = 96
$T1 = 96
$T34 = 128
comma$40 = 128
$T21 = 128
name$ = 160
__$ArrayPad$ = 192
this$ = 240
tokenStart$dead$ = 248
?dtor$0@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readObject'::`1'::dtor$0
	lea	rcx, QWORD PTR name$[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readObject'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$35 = 32
$T3 = 33
$S10$36 = 34
_Tmp$37 = 48
$T8 = 48
$T2 = 48
$T29 = 48
colon$38 = 48
_Tmp$39 = 80
$T23 = 80
$T31 = 96
tokenName$ = 96
$T1 = 96
$T34 = 128
comma$40 = 128
$T21 = 128
name$ = 160
__$ArrayPad$ = 192
this$ = 240
tokenStart$dead$ = 248
?dtor$5@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readObject'::`1'::dtor$5
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$5@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readObject'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$35 = 32
$T3 = 33
$S10$36 = 34
_Tmp$37 = 48
$T8 = 48
$T2 = 48
$T29 = 48
colon$38 = 48
_Tmp$39 = 80
$T23 = 80
$T31 = 96
tokenName$ = 96
$T1 = 96
$T34 = 128
comma$40 = 128
$T21 = 128
name$ = 160
__$ArrayPad$ = 192
this$ = 240
tokenStart$dead$ = 248
?dtor$1@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readObject'::`1'::dtor$1
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$1@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readObject'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$35 = 32
$T3 = 33
$S10$36 = 34
_Tmp$37 = 48
$T8 = 48
$T2 = 48
$T29 = 48
colon$38 = 48
_Tmp$39 = 80
$T23 = 80
$T31 = 96
tokenName$ = 96
$T1 = 96
$T34 = 128
comma$40 = 128
$T21 = 128
name$ = 160
__$ArrayPad$ = 192
this$ = 240
tokenStart$dead$ = 248
?dtor$2@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readObject'::`1'::dtor$2
	lea	rcx, QWORD PTR $T21[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readObject'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$35 = 32
$T3 = 33
$S10$36 = 34
_Tmp$37 = 48
$T8 = 48
$T2 = 48
$T29 = 48
colon$38 = 48
_Tmp$39 = 80
$T23 = 80
$T31 = 96
tokenName$ = 96
$T1 = 96
$T34 = 128
comma$40 = 128
$T21 = 128
name$ = 160
__$ArrayPad$ = 192
this$ = 240
tokenStart$dead$ = 248
?dtor$3@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readObject'::`1'::dtor$3
	lea	rcx, QWORD PTR $T31[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$3@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readObject'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$35 = 32
$T3 = 33
$S10$36 = 34
_Tmp$37 = 48
$T8 = 48
$T2 = 48
$T29 = 48
colon$38 = 48
_Tmp$39 = 80
$T23 = 80
$T31 = 96
tokenName$ = 96
$T1 = 96
$T34 = 128
comma$40 = 128
$T21 = 128
name$ = 160
__$ArrayPad$ = 192
this$ = 240
tokenStart$dead$ = 248
?dtor$4@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readObject'::`1'::dtor$4
	lea	rcx, QWORD PTR $T34[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$4@?0??readObject@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readObject'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z
_TEXT	SEGMENT
_Proxy$27 = 32
$T3 = 33
$S10$28 = 34
_Tmp$29 = 48
$T2 = 48
$T24 = 48
token$30 = 64
endArray$31 = 64
$T1 = 64
$T18 = 96
_Tmp$32 = 96
$T8 = 96
$T25 = 96
__$ArrayPad$ = 128
this$ = 176
tokenStart$dead$ = 184
?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z PROC	; Json::Reader::readArray, COMDAT

$LN166:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-71]
	sub	rsp, 144				; 00000090H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-73], rax
	mov	r14, rcx
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 269  : // //////////////////////////////////////////////////////////////////

	mov	eax, DWORD PTR $T1[rbp-65]
	and	eax, -506				; fffffffffffffe06H

; 270  : 

	or	eax, 6
	mov	DWORD PTR $T1[rbp-65], eax

; 271  : /*! \internal Default constructor initialization must be equivalent to:

	xor	ebx, ebx
	mov	QWORD PTR $T1[rbp-57], rbx

; 293  :       break;

	lea	ecx, QWORD PTR [rbx+16]
	call	??2@YAPEAX_K@Z				; operator new
	mov	rsi, rax
	mov	QWORD PTR $T2[rbp-73], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1333 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	lea	rcx, QWORD PTR $T3[rbp-73]
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	QWORD PTR [rsi], rbx
	mov	QWORD PTR [rsi+8], rbx

; 2023 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	mov	r8, rsi
	lea	rdx, QWORD PTR $S10$28[rbp-73]
	lea	rcx, QWORD PTR _Proxy$27[rbp-73]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	r15d, 1
	mov	ecx, r15d
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	lea	ecx, QWORD PTR [r15+7]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	rdx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	lea	ecx, QWORD PTR [r15+7]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	rdx, QWORD PTR [rbx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	lea	ecx, QWORD PTR [r15+7]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 347  :         _Pnode->_Color = _Black;

	mov	WORD PTR [rbx+24], 257			; 00000101H

; 2024 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	QWORD PTR [rsi], rbx

; 2025 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$27[rbp-73]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 293  :       break;

	mov	QWORD PTR $T1[rbp-73], rsi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, r14
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, r14
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, r14
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rax]
	add	rcx, QWORD PTR [rbx]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T8[rbp-73], rdi
	mov	QWORD PTR $T8[rbp-65], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T8[rbp-73]
	movdqa	XMMWORD PTR _Tmp$32[rbp-73], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$32[rbp-73]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, r15d

; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T1[rbp-73]
	mov	rcx, QWORD PTR [rax+rdi*8]
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 751  :         this->_Orphan_all();

	mov	rcx, rsi
	call	?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	r8, QWORD PTR [rsi]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, rsi
	mov	rcx, rsi
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	lea	edx, QWORD PTR [r15+71]
	mov	rcx, QWORD PTR [rsi]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	lea	edx, QWORD PTR [r15+15]
	mov	rcx, rsi
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	rcx, QWORD PTR [r14+128]
	mov	r9, QWORD PTR [r14+120]
	cmp	rcx, r9
	je	SHORT $LN117@readArray
	mov	rdx, rcx
	mov	r10, 4294976000				; 0000000100002200H
	npad	12
$LL115@readArray:

	mov	rcx, rdx
	movsx	r8, BYTE PTR [rdx]

	cmp	r8b, 32					; 00000020H
	ja	SHORT $LN161@readArray
	bt	r10, r8
	jb	SHORT $LN119@readArray
$LN161@readArray:
	cmp	r8b, 10
	jne	SHORT $LN117@readArray
$LN119@readArray:

	lea	rcx, QWORD PTR [rdx+1]
	mov	QWORD PTR [r14+128], rcx
	mov	rdx, rcx

	cmp	rcx, r9
	jne	SHORT $LL115@readArray
$LN117@readArray:

	cmp	BYTE PTR [rcx], 93			; 0000005dH
	mov	rcx, r14
	jne	SHORT $LN6@readArray

	lea	rdx, QWORD PTR endArray$31[rbp-73]
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken
$LN152@readArray:

	mov	al, 1
	jmp	$LN1@readArray
$LN6@readArray:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, r14
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, r14
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rbx]
	add	rcx, QWORD PTR [rax]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T18[rbp-73], rdi
	mov	QWORD PTR $T18[rbp-65], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T18[rbp-73]
	movdqa	XMMWORD PTR _Tmp$29[rbp-73], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$29[rbp-73]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, 1

; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	xor	edx, edx
	mov	rcx, QWORD PTR [rax+rdi*8]
	call	??AValue@Json@@QEAAAEAV01@I@Z		; Json::Value::operator[]
	mov	QWORD PTR $T24[rbp-73], rax

	lea	rdx, QWORD PTR $T24[rbp-73]
	mov	rcx, r14
	call	?push@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push

	mov	rcx, r14
	call	?readValue@Reader@Json@@AEAA_NXZ	; Json::Reader::readValue
	movzx	ebx, al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack

; 94   :         c.pop_back();

	mov	rcx, r14
	call	?pop_back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	test	bl, bl
	je	$LN150@readArray
	npad	6
$LL2@readArray:

	lea	rdx, QWORD PTR token$30[rbp-73]
	mov	rcx, r14
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken

	mov	ecx, DWORD PTR token$30[rbp-73]
	cmp	ecx, 12
	jne	SHORT $LN5@readArray
$LL4@readArray:
	test	al, al
	je	$LN9@readArray

	lea	rdx, QWORD PTR token$30[rbp-73]
	mov	rcx, r14
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken

	mov	ecx, DWORD PTR token$30[rbp-73]
	cmp	ecx, 12
	je	SHORT $LL4@readArray
$LN5@readArray:

	test	al, al
	je	$LN9@readArray

	cmp	ecx, 4
	je	$LN152@readArray

	mov	esi, r15d
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, r14
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	QWORD PTR $T18[rbp-73], rax
	mov	rcx, r14
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, r14
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rbx]
	add	rcx, QWORD PTR [rax]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T18[rbp-65], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T18[rbp-73]
	movdqa	XMMWORD PTR _Tmp$29[rbp-73], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$29[rbp-73]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	mov	rcx, rax
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	rax, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 57   :         return _Mycont->_Map[_Block][_Off];

	and	edi, 1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	rax, QWORD PTR [rax+rcx*8]

	inc	r15d
	mov	edx, esi
	mov	rcx, QWORD PTR [rax+rdi*8]
	call	??AValue@Json@@QEAAAEAV01@I@Z		; Json::Value::operator[]
	mov	QWORD PTR $T24[rbp-73], rax

	lea	rdx, QWORD PTR $T24[rbp-73]
	mov	rcx, r14
	call	?push@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push

	mov	rcx, r14
	call	?readValue@Reader@Json@@AEAA_NXZ	; Json::Reader::readValue
	movzx	ebx, al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack

; 94   :         c.pop_back();

	mov	rcx, r14
	call	?pop_back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	test	bl, bl
	jne	$LL2@readArray
$LN150@readArray:

	mov	edx, 4
	mov	rcx, r14
	call	?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
$LN1@readArray:

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-73]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+144]
	mov	rbx, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rdi, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rbp
	ret	0
$LN9@readArray:

	lea	rdx, OFFSET FLAT:??_C@_0CI@DPCANLPO@Missing?5?8?0?8?5or?5?8?$FN?8?5in?5array?5dec@
	lea	rcx, QWORD PTR $T25[rbp-73]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

	xor	r9d, r9d
	lea	r8, QWORD PTR token$30[rbp-73]
	lea	rdx, QWORD PTR $T25[rbp-73]
	mov	rcx, r14
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError

	mov	edx, 4
	mov	rcx, r14
	call	?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
	movzx	ebx, al

	lea	rcx, QWORD PTR $T25[rbp-73]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	movzx	eax, bl
	jmp	SHORT $LN1@readArray
?readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z ENDP	; Json::Reader::readArray
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Proxy$27 = 32
$T3 = 33
$S10$28 = 34
_Tmp$29 = 48
$T2 = 48
$T24 = 48
token$30 = 64
endArray$31 = 64
$T1 = 64
$T18 = 96
_Tmp$32 = 96
$T8 = 96
$T25 = 96
__$ArrayPad$ = 128
this$ = 176
tokenStart$dead$ = 184
?dtor$2@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readArray'::`1'::dtor$2
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$2@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readArray'::`1'::dtor$2
_Proxy$27 = 32
$T3 = 33
$S10$28 = 34
_Tmp$29 = 48
$T2 = 48
$T24 = 48
token$30 = 64
endArray$31 = 64
$T1 = 64
$T18 = 96
_Tmp$32 = 96
$T8 = 96
$T25 = 96
__$ArrayPad$ = 128
this$ = 176
tokenStart$dead$ = 184
?dtor$0@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readArray'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$0@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readArray'::`1'::dtor$0
_Proxy$27 = 32
$T3 = 33
$S10$28 = 34
_Tmp$29 = 48
$T2 = 48
$T24 = 48
token$30 = 64
endArray$31 = 64
$T1 = 64
$T18 = 96
_Tmp$32 = 96
$T8 = 96
$T25 = 96
__$ArrayPad$ = 128
this$ = 176
tokenStart$dead$ = 184
?dtor$1@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readArray'::`1'::dtor$1
	lea	rcx, QWORD PTR $T25[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readArray'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$27 = 32
$T3 = 33
$S10$28 = 34
_Tmp$29 = 48
$T2 = 48
$T24 = 48
token$30 = 64
endArray$31 = 64
$T1 = 64
$T18 = 96
_Tmp$32 = 96
$T8 = 96
$T25 = 96
__$ArrayPad$ = 128
this$ = 176
tokenStart$dead$ = 184
?dtor$2@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readArray'::`1'::dtor$2
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$2@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readArray'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$27 = 32
$T3 = 33
$S10$28 = 34
_Tmp$29 = 48
$T2 = 48
$T24 = 48
token$30 = 64
endArray$31 = 64
$T1 = 64
$T18 = 96
_Tmp$32 = 96
$T8 = 96
$T25 = 96
__$ArrayPad$ = 128
this$ = 176
tokenStart$dead$ = 184
?dtor$0@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readArray'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$0@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readArray'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$27 = 32
$T3 = 33
$S10$28 = 34
_Tmp$29 = 48
$T2 = 48
$T24 = 48
token$30 = 64
endArray$31 = 64
$T1 = 64
$T18 = 96
_Tmp$32 = 96
$T8 = 96
$T25 = 96
__$ArrayPad$ = 128
this$ = 176
tokenStart$dead$ = 184
?dtor$1@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::readArray'::`1'::dtor$1
	lea	rcx, QWORD PTR $T25[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??readArray@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::readArray'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z
_TEXT	SEGMENT
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z PROC	; Json::Reader::decodeNumber, COMDAT

$LN241:
	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	rsi
	push	rdi
	lea	rbp, QWORD PTR [rsp-71]
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-105], rax
	mov	rdi, rdx
	mov	rsi, rcx

	xor	cl, cl

	mov	r8, QWORD PTR [rdx+8]
	mov	r9, QWORD PTR [rdx+16]

	mov	rax, r8

	cmp	r8, r9
	je	SHORT $LN235@decodeNumb
	mov	r10, 288230376218820617			; 0400000004000009H
$LL4@decodeNumb:

	test	cl, cl
	jne	SHORT $LN17@decodeNumb
	movzx	edx, BYTE PTR [rax]

	lea	ecx, DWORD PTR [rdx-43]
	cmp	cl, 58					; 0000003aH
	ja	SHORT $LN236@decodeNumb
	bt	r10, rcx
	jb	SHORT $LN17@decodeNumb
$LN236@decodeNumb:

	cmp	dl, 45					; 0000002dH
	jne	SHORT $LN18@decodeNumb
	cmp	rax, r8
	jne	SHORT $LN17@decodeNumb
$LN18@decodeNumb:
	xor	cl, cl
	jmp	SHORT $LN19@decodeNumb
$LN17@decodeNumb:
	mov	cl, 1
$LN19@decodeNumb:

	inc	rax
	cmp	rax, r9
	jne	SHORT $LL4@decodeNumb

	test	cl, cl
	je	SHORT $LN235@decodeNumb
$LN227@decodeNumb:

	mov	rdx, rdi
	mov	rcx, rsi
	call	?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::decodeDouble
	jmp	$LN1@decodeNumb
$LN235@decodeNumb:

	movzx	r11d, BYTE PTR [r8]

	lea	rdx, QWORD PTR [r8+1]
	cmp	r11b, 45				; 0000002dH
	cmovne	rdx, r8
	mov	eax, 429496729				; 19999999H
	mov	r10d, 214748364				; 0cccccccH
	cmovne	r10d, eax

	xor	ebx, ebx
	mov	ecx, ebx

	cmp	rdx, r9
	jae	SHORT $LN6@decodeNumb
	npad	3
$LL5@decodeNumb:

	movsx	r8d, BYTE PTR [rdx]
	inc	rdx

	lea	eax, DWORD PTR [r8-48]
	cmp	al, 9
	ja	$LN10@decodeNumb

	cmp	ecx, r10d
	jae	SHORT $LN227@decodeNumb

	lea	ecx, DWORD PTR [rcx+rcx*4]
	lea	ecx, DWORD PTR [rcx-24]
	lea	ecx, DWORD PTR [r8+rcx*2]

	cmp	rdx, r9
	jb	SHORT $LL5@decodeNumb
$LN6@decodeNumb:

	mov	eax, DWORD PTR $T8[rbp-97]
	mov	QWORD PTR $T8[rbp-89], rbx
	cmp	r11b, 45				; 0000002dH
	jne	$LN12@decodeNumb
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 313  :    default:

	and	eax, -255				; ffffffffffffff01H
	or	eax, 1
	mov	DWORD PTR $T8[rbp-97], eax
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	neg	ecx
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 319  : Value::Value( Int value )

	mov	DWORD PTR $T8[rbp-105], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, rsi
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, rsi
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rbx]
	add	rcx, QWORD PTR [rax]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T9[rbp-105], rdi
	mov	QWORD PTR $T9[rbp-97], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T9[rbp-105]
	movdqa	XMMWORD PTR _Tmp$45[rbp-105], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$45[rbp-105]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, 1

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;
; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T8[rbp-105]
	mov	rcx, QWORD PTR [rax+rdi*8]
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1
	jmp	$LN194@decodeNumb
$LN10@decodeNumb:

	lea	rcx, QWORD PTR $T1[rbp-105]
	call	??0?$allocator@D@std@@QEAA@XZ		; std::allocator<char>::allocator<char>
	mov	rcx, QWORD PTR [rdi+16]
	mov	QWORD PTR _Last$[rbp-105], rcx
	mov	rcx, QWORD PTR [rdi+8]
	mov	QWORD PTR _First$[rbp-105], rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring

; 2374 :     basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc()) : _Mypair(_One_then_variadic_args_t(), _Al) {

	mov	r8, rax
	movzx	edx, BYTE PTR $T2[rbp-105]
	lea	rcx, QWORD PTR $T3[rbp-105]
	call	??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
	npad	1

; 2375 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2376 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

	lea	r8, QWORD PTR $T3[rbp-105]
	lea	rdx, QWORD PTR $S11$42[rbp-105]
	lea	rcx, QWORD PTR _Proxy$41[rbp-105]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2377 :         _Tidy_init();

	lea	rcx, QWORD PTR $T3[rbp-105]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2378 :         _Adl_verify_range(_First, _Last);

	lea	rdx, QWORD PTR _Last$[rbp-105]
	lea	rcx, QWORD PTR _First$[rbp-105]
	call	??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ; std::_Adl_verify_range<char const *,char const *>

; 2379 :         _Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>());

	mov	rcx, QWORD PTR _Last$[rbp-105]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rbx, rax
	mov	rcx, QWORD PTR _First$[rbp-105]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rdx, rax
	movzx	r9d, BYTE PTR $T4[rbp-105]
	mov	r8, rbx
	lea	rcx, QWORD PTR $T3[rbp-105]
	call	?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXQEBD0Urandom_access_iterator_tag@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct

; 2380 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$41[rbp-105]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	r8, QWORD PTR $T3[rbp-105]
	lea	rdx, OFFSET FLAT:??_C@_01GEODFPGF@?8@
	lea	rcx, QWORD PTR $T5[rbp-105]
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD$$QEAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	r8, OFFSET FLAT:??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4@
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rbp-105]
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QEAV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	xor	r9d, r9d
	mov	r8, rdi
	mov	rdx, rax
	mov	rcx, rsi
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	movzx	ebx, al
	lea	rcx, QWORD PTR $T6[rbp-105]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	rcx, QWORD PTR $T5[rbp-105]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	rcx, QWORD PTR $T3[rbp-105]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	movzx	eax, bl
	jmp	$LN1@decodeNumb
$LN12@decodeNumb:

	mov	DWORD PTR $T19[rbp-105], ecx
	cmp	ecx, 2147483647				; 7fffffffH
	ja	SHORT $LN14@decodeNumb
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 313  :    default:

	and	eax, -255				; ffffffffffffff01H
	or	eax, 1
	mov	DWORD PTR $T19[rbp-97], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, rsi
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, rsi
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rbx]
	add	rcx, QWORD PTR [rax]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T20[rbp-105], rdi
	mov	QWORD PTR $T20[rbp-97], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T20[rbp-105]
	movdqa	XMMWORD PTR _Tmp$44[rbp-105], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$44[rbp-105]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, 1

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;
; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T19[rbp-105]
	mov	rcx, QWORD PTR [rax+rdi*8]
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1
	jmp	SHORT $LN194@decodeNumb
$LN14@decodeNumb:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 324  : #endif

	and	eax, -254				; ffffffffffffff02H
	or	eax, 2
	mov	DWORD PTR $T30[rbp-97], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, rsi
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, rsi
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, QWORD PTR [rbx]
	add	rcx, QWORD PTR [rax]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T31[rbp-105], rdi
	mov	QWORD PTR $T31[rbp-97], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T31[rbp-105]
	movdqa	XMMWORD PTR _Tmp$43[rbp-105], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$43[rbp-105]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, 1

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;
; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T30[rbp-105]
	mov	rcx, QWORD PTR [rax+rdi*8]
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1
$LN194@decodeNumb:

	mov	al, 1
$LN1@decodeNumb:

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-105]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rbx, QWORD PTR [rsp+224]
	add	rsp, 176				; 000000b0H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z ENDP	; Json::Reader::decodeNumber
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$6@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$6
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$6@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$6
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$0@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$0
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$0
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$1@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$1
	lea	rcx, QWORD PTR $T5[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$1
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$2@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$2
	lea	rcx, QWORD PTR $T6[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$2
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$3@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$3
	lea	rcx, QWORD PTR $T8[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$3@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$3
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$4@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$4
	lea	rcx, QWORD PTR $T19[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$4@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$4
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$5@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$5
	lea	rcx, QWORD PTR $T30[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$5@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$6@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$6
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$6@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$0@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$0
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$1@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$1
	lea	rcx, QWORD PTR $T5[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$2@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$2
	lea	rcx, QWORD PTR $T6[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$3@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$3
	lea	rcx, QWORD PTR $T8[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$3@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$4@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$4
	lea	rcx, QWORD PTR $T19[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$4@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$41 = 32
$T2 = 33
$T1 = 33
$T4 = 34
$S11$42 = 34
_Tmp$43 = 48
$T31 = 48
_Tmp$44 = 48
$T20 = 48
_Tmp$45 = 48
$T9 = 48
_First$ = 48
_Last$ = 64
$T30 = 72
$T19 = 72
$T8 = 72
$T3 = 72
$T6 = 104
$T5 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$5@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeNumber'::`1'::dtor$5
	lea	rcx, QWORD PTR $T30[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$5@?0??decodeNumber@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeNumber'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z
_TEXT	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$23 = 32
$T5 = 32
_Proxy$24 = 33
_Proxy$25 = 33
$S11$26 = 34
$T3 = 34
$T2 = 34
_First$ = 40
_Last$ = 40
_Tmp$27 = 48
$T13 = 48
_Last$ = 48
_First$ = 48
value$ = 64
$T10 = 72
$T9 = 104
$T12 = 136
$T7 = 136
buffer$28 = 136
buffer$29 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z PROC	; Json::Reader::decodeDouble, COMDAT

$LN85:
	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	rsi
	push	rdi
	lea	rbp, QWORD PTR [rsp-71]
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-105], rax
	mov	rdi, rdx
	mov	rsi, rcx
	xorps	xmm0, xmm0

	movsd	QWORD PTR value$[rbp-105], xmm0

	mov	eax, DWORD PTR [rdx+16]
	sub	eax, DWORD PTR [rdx+8]

	cmp	eax, 32					; 00000020H
	jg	SHORT $LN2@decodeDoub

	movsxd	rbx, eax
	mov	r8, rbx
	mov	rdx, QWORD PTR [rdx+8]
	lea	rcx, QWORD PTR buffer$29[rbp-105]
	call	memcpy

	cmp	rbx, 32					; 00000020H
	jae	$LN6@decodeDoub
	mov	BYTE PTR buffer$29[rbp+rbx-105], 0

	lea	r8, QWORD PTR value$[rbp-105]
	lea	rdx, OFFSET FLAT:??_C@_03DLDNIBIK@?$CFlf@
	lea	rcx, QWORD PTR buffer$29[rbp-105]
	call	sscanf
	mov	ebx, eax

	jmp	$LN3@decodeDoub
$LN2@decodeDoub:

	lea	rcx, QWORD PTR $T2[rbp-105]
	call	??0?$allocator@D@std@@QEAA@XZ		; std::allocator<char>::allocator<char>
	mov	rcx, QWORD PTR [rdi+16]
	mov	QWORD PTR _Last$[rbp-105], rcx
	mov	rcx, QWORD PTR [rdi+8]
	mov	QWORD PTR _First$[rbp-105], rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring

; 2374 :     basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc()) : _Mypair(_One_then_variadic_args_t(), _Al) {

	mov	r8, rax
	movzx	edx, BYTE PTR $T3[rbp-105]
	lea	rcx, QWORD PTR buffer$28[rbp-105]
	call	??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
	npad	1

; 2375 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2376 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

	lea	r8, QWORD PTR buffer$28[rbp-105]
	lea	rdx, QWORD PTR $S11$23[rbp-105]
	lea	rcx, QWORD PTR _Proxy$25[rbp-105]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2377 :         _Tidy_init();

	lea	rcx, QWORD PTR buffer$28[rbp-105]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2378 :         _Adl_verify_range(_First, _Last);

	lea	rdx, QWORD PTR _Last$[rbp-105]
	lea	rcx, QWORD PTR _First$[rbp-105]
	call	??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ; std::_Adl_verify_range<char const *,char const *>

; 2379 :         _Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>());

	mov	rcx, QWORD PTR _Last$[rbp-105]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rbx, rax
	mov	rcx, QWORD PTR _First$[rbp-105]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rdx, rax
	movzx	r9d, BYTE PTR $T4[rbp-105]
	mov	r8, rbx
	lea	rcx, QWORD PTR buffer$28[rbp-105]
	call	?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXQEBD0Urandom_access_iterator_tag@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct

; 2380 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$25[rbp-105]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rcx, QWORD PTR buffer$28[rbp-105]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rcx, rax
	lea	r8, QWORD PTR value$[rbp-105]
	lea	rdx, OFFSET FLAT:??_C@_03DLDNIBIK@?$CFlf@
	call	sscanf
	mov	ebx, eax

	lea	rcx, QWORD PTR buffer$28[rbp-105]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN3@decodeDoub:

	cmp	ebx, 1
	je	$LN4@decodeDoub

	lea	rcx, QWORD PTR $T5[rbp-105]
	call	??0?$allocator@D@std@@QEAA@XZ		; std::allocator<char>::allocator<char>
	mov	rcx, QWORD PTR [rdi+16]
	mov	QWORD PTR _Last$[rbp-105], rcx
	mov	rcx, QWORD PTR [rdi+8]
	mov	QWORD PTR _First$[rbp-105], rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring

; 2374 :     basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc()) : _Mypair(_One_then_variadic_args_t(), _Al) {

	mov	r8, rax
	movzx	edx, BYTE PTR $T6[rbp-105]
	lea	rcx, QWORD PTR $T7[rbp-105]
	call	??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
	npad	1

; 2375 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2376 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

	lea	r8, QWORD PTR $T7[rbp-105]
	lea	rdx, QWORD PTR $S11$26[rbp-105]
	lea	rcx, QWORD PTR _Proxy$24[rbp-105]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2377 :         _Tidy_init();

	lea	rcx, QWORD PTR $T7[rbp-105]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2378 :         _Adl_verify_range(_First, _Last);

	lea	rdx, QWORD PTR _Last$[rbp-105]
	lea	rcx, QWORD PTR _First$[rbp-105]
	call	??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ; std::_Adl_verify_range<char const *,char const *>

; 2379 :         _Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>());

	mov	rcx, QWORD PTR _Last$[rbp-105]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rbx, rax
	mov	rcx, QWORD PTR _First$[rbp-105]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rdx, rax
	movzx	r9d, BYTE PTR $T8[rbp-105]
	mov	r8, rbx
	lea	rcx, QWORD PTR $T7[rbp-105]
	call	?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXQEBD0Urandom_access_iterator_tag@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct

; 2380 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$24[rbp-105]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	r8, QWORD PTR $T7[rbp-105]
	lea	rdx, OFFSET FLAT:??_C@_01GEODFPGF@?8@
	lea	rcx, QWORD PTR $T9[rbp-105]
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD$$QEAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	r8, OFFSET FLAT:??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4@
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rbp-105]
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QEAV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	xor	r9d, r9d
	mov	r8, rdi
	mov	rdx, rax
	mov	rcx, rsi
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	movzx	ebx, al
	lea	rcx, QWORD PTR $T10[rbp-105]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	rcx, QWORD PTR $T9[rbp-105]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	rcx, QWORD PTR $T7[rbp-105]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	movzx	eax, bl
	jmp	$LN1@decodeDoub
$LN4@decodeDoub:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 334  :    , itemIsUsed_( 0 )

	mov	eax, DWORD PTR $T12[rbp-97]
	and	eax, -253				; ffffffffffffff03H
	or	eax, 3
	mov	DWORD PTR $T12[rbp-97], eax

; 335  : #endif

	mov	QWORD PTR $T12[rbp-89], 0

; 336  : {
; 337  :    value_.uint_ = value;
; 338  : }
; 339  : 
; 340  : Value::Value( double value )

	movsd	xmm0, QWORD PTR value$[rbp-105]
	movsd	QWORD PTR $T12[rbp-105], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, rsi
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, rsi
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rcx, QWORD PTR [rax]
	add	rcx, QWORD PTR [rbx]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T13[rbp-105], rdi
	mov	QWORD PTR $T13[rbp-97], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T13[rbp-105]
	movdqa	XMMWORD PTR _Tmp$27[rbp-105], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$27[rbp-105]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, 1

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;
; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T12[rbp-105]
	mov	rcx, QWORD PTR [rax+rdi*8]
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1

	mov	al, 1
$LN1@decodeDoub:

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-105]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rbx, QWORD PTR [rsp+224]
	add	rsp, 176				; 000000b0H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN6@decodeDoub:

	call	__report_rangecheckfailure
	int	3
$LN82@decodeDoub:
?decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z ENDP	; Json::Reader::decodeDouble
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$23 = 32
$T5 = 32
_Proxy$24 = 33
_Proxy$25 = 33
$S11$26 = 34
$T3 = 34
$T2 = 34
_First$ = 40
_Last$ = 40
_Tmp$27 = 48
$T13 = 48
_Last$ = 48
_First$ = 48
value$ = 64
$T10 = 72
$T9 = 104
$T12 = 136
$T7 = 136
buffer$28 = 136
buffer$29 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$5@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeDouble'::`1'::dtor$5
	lea	rcx, QWORD PTR buffer$28[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$5@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeDouble'::`1'::dtor$5
$T8 = 32
$T6 = 32
$T4 = 32
$S11$23 = 32
$T5 = 32
_Proxy$24 = 33
_Proxy$25 = 33
$S11$26 = 34
$T3 = 34
$T2 = 34
_First$ = 40
_Last$ = 40
_Tmp$27 = 48
$T13 = 48
_Last$ = 48
_First$ = 48
value$ = 64
$T10 = 72
$T9 = 104
$T12 = 136
$T7 = 136
buffer$28 = 136
buffer$29 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$6@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeDouble'::`1'::dtor$6
	lea	rcx, QWORD PTR $T7[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$6@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeDouble'::`1'::dtor$6
$T8 = 32
$T6 = 32
$T4 = 32
$S11$23 = 32
$T5 = 32
_Proxy$24 = 33
_Proxy$25 = 33
$S11$26 = 34
$T3 = 34
$T2 = 34
_First$ = 40
_Last$ = 40
_Tmp$27 = 48
$T13 = 48
_Last$ = 48
_First$ = 48
value$ = 64
$T10 = 72
$T9 = 104
$T12 = 136
$T7 = 136
buffer$28 = 136
buffer$29 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$1@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeDouble'::`1'::dtor$1
	lea	rcx, QWORD PTR $T7[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeDouble'::`1'::dtor$1
$T8 = 32
$T6 = 32
$T4 = 32
$S11$23 = 32
$T5 = 32
_Proxy$24 = 33
_Proxy$25 = 33
$S11$26 = 34
$T3 = 34
$T2 = 34
_First$ = 40
_Last$ = 40
_Tmp$27 = 48
$T13 = 48
_Last$ = 48
_First$ = 48
value$ = 64
$T10 = 72
$T9 = 104
$T12 = 136
$T7 = 136
buffer$28 = 136
buffer$29 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$2@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeDouble'::`1'::dtor$2
	lea	rcx, QWORD PTR $T9[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeDouble'::`1'::dtor$2
$T8 = 32
$T6 = 32
$T4 = 32
$S11$23 = 32
$T5 = 32
_Proxy$24 = 33
_Proxy$25 = 33
$S11$26 = 34
$T3 = 34
$T2 = 34
_First$ = 40
_Last$ = 40
_Tmp$27 = 48
$T13 = 48
_Last$ = 48
_First$ = 48
value$ = 64
$T10 = 72
$T9 = 104
$T12 = 136
$T7 = 136
buffer$28 = 136
buffer$29 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$3@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeDouble'::`1'::dtor$3
	lea	rcx, QWORD PTR $T10[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$3@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeDouble'::`1'::dtor$3
$T8 = 32
$T6 = 32
$T4 = 32
$S11$23 = 32
$T5 = 32
_Proxy$24 = 33
_Proxy$25 = 33
$S11$26 = 34
$T3 = 34
$T2 = 34
_First$ = 40
_Last$ = 40
_Tmp$27 = 48
$T13 = 48
_Last$ = 48
_First$ = 48
value$ = 64
$T10 = 72
$T9 = 104
$T12 = 136
$T7 = 136
buffer$28 = 136
buffer$29 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$4@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeDouble'::`1'::dtor$4
	lea	rcx, QWORD PTR $T12[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$4@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeDouble'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$23 = 32
$T5 = 32
_Proxy$24 = 33
_Proxy$25 = 33
$S11$26 = 34
$T3 = 34
$T2 = 34
_First$ = 40
_Last$ = 40
_Tmp$27 = 48
$T13 = 48
_Last$ = 48
_First$ = 48
value$ = 64
$T10 = 72
$T9 = 104
$T12 = 136
$T7 = 136
buffer$28 = 136
buffer$29 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$5@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeDouble'::`1'::dtor$5
	lea	rcx, QWORD PTR buffer$28[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$5@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeDouble'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$23 = 32
$T5 = 32
_Proxy$24 = 33
_Proxy$25 = 33
$S11$26 = 34
$T3 = 34
$T2 = 34
_First$ = 40
_Last$ = 40
_Tmp$27 = 48
$T13 = 48
_Last$ = 48
_First$ = 48
value$ = 64
$T10 = 72
$T9 = 104
$T12 = 136
$T7 = 136
buffer$28 = 136
buffer$29 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$6@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeDouble'::`1'::dtor$6
	lea	rcx, QWORD PTR $T7[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$6@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeDouble'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$23 = 32
$T5 = 32
_Proxy$24 = 33
_Proxy$25 = 33
$S11$26 = 34
$T3 = 34
$T2 = 34
_First$ = 40
_Last$ = 40
_Tmp$27 = 48
$T13 = 48
_Last$ = 48
_First$ = 48
value$ = 64
$T10 = 72
$T9 = 104
$T12 = 136
$T7 = 136
buffer$28 = 136
buffer$29 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$1@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeDouble'::`1'::dtor$1
	lea	rcx, QWORD PTR $T7[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeDouble'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$23 = 32
$T5 = 32
_Proxy$24 = 33
_Proxy$25 = 33
$S11$26 = 34
$T3 = 34
$T2 = 34
_First$ = 40
_Last$ = 40
_Tmp$27 = 48
$T13 = 48
_Last$ = 48
_First$ = 48
value$ = 64
$T10 = 72
$T9 = 104
$T12 = 136
$T7 = 136
buffer$28 = 136
buffer$29 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$2@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeDouble'::`1'::dtor$2
	lea	rcx, QWORD PTR $T9[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeDouble'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$23 = 32
$T5 = 32
_Proxy$24 = 33
_Proxy$25 = 33
$S11$26 = 34
$T3 = 34
$T2 = 34
_First$ = 40
_Last$ = 40
_Tmp$27 = 48
$T13 = 48
_Last$ = 48
_First$ = 48
value$ = 64
$T10 = 72
$T9 = 104
$T12 = 136
$T7 = 136
buffer$28 = 136
buffer$29 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$3@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeDouble'::`1'::dtor$3
	lea	rcx, QWORD PTR $T10[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$3@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeDouble'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 32
$T6 = 32
$T4 = 32
$S11$23 = 32
$T5 = 32
_Proxy$24 = 33
_Proxy$25 = 33
$S11$26 = 34
$T3 = 34
$T2 = 34
_First$ = 40
_Last$ = 40
_Tmp$27 = 48
$T13 = 48
_Last$ = 48
_First$ = 48
value$ = 64
$T10 = 72
$T9 = 104
$T12 = 136
$T7 = 136
buffer$28 = 136
buffer$29 = 136
__$ArrayPad$ = 168
this$ = 208
token$ = 216
?dtor$4@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeDouble'::`1'::dtor$4
	lea	rcx, QWORD PTR $T12[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$4@?0??decodeDouble@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeDouble'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z
_TEXT	SEGMENT
_Tmp$14 = 32
$T4 = 32
$T3 = 48
decoded$ = 72
__$ArrayPad$ = 104
this$ = 144
token$ = 152
?decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z PROC	; Json::Reader::decodeString, COMDAT

$LN74:
	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 112				; 00000070H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, rdx
	mov	rbp, rcx

	lea	rcx, QWORD PTR decoded$[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

	lea	r8, QWORD PTR decoded$[rsp]
	mov	rdx, rbx
	mov	rcx, rbp
	call	?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Reader::decodeString
	test	al, al
	jne	SHORT $LN2@decodeStri
	xor	bl, bl
	jmp	$LN6@decodeStri
$LN2@decodeStri:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 370  : {

	mov	eax, DWORD PTR $T3[rsp+8]
	and	eax, -252				; ffffffffffffff04H

; 371  :    value_.string_ = valueAllocator()->duplicateStringValue( beginValue, 

	or	eax, 260				; 00000104H
	mov	DWORD PTR $T3[rsp+8], eax

; 372  :                                                             UInt(endValue - beginValue) );

	mov	QWORD PTR $T3[rsp+16], 0

; 373  : }
; 374  : 
; 375  : 
; 376  : Value::Value( const std::string &value )
; 377  :    : type_( stringValue )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rdi, QWORD PTR [rax]
	mov	rsi, QWORD PTR [rdi]
	lea	rcx, QWORD PTR decoded$[rsp]
	call	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
	mov	rbx, rax
	lea	rcx, QWORD PTR decoded$[rsp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rdx, rax
	mov	r8d, ebx
	mov	rcx, rdi
	call	QWORD PTR [rsi+24]
	mov	rsi, rax
	mov	QWORD PTR $T3[rsp], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	mov	rcx, rbp
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rdi, rax
	mov	rcx, rbp
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rbx, rax
	mov	rcx, rbp
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rcx, QWORD PTR [rbx]
	add	rcx, QWORD PTR [rax]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T4[rsp], rdi
	mov	QWORD PTR $T4[rsp+8], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T4[rsp]
	movdqa	XMMWORD PTR _Tmp$14[rsp], xmm0

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, rdi
	mov	rbx, QWORD PTR _Tmp$14[rsp]
	mov	rcx, rbx
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	and	edi, 1

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;
; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rdx, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR [rax+rdi*8]
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 484  :    case intValue:

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, rsi
	call	QWORD PTR [rax+32]
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	bl, 1
$LN6@decodeStri:
	lea	rcx, QWORD PTR decoded$[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	movzx	eax, bl

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rbx, QWORD PTR [rsp+160]
	add	rsp, 112				; 00000070H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z ENDP	; Json::Reader::decodeString
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Tmp$14 = 32
$T4 = 32
$T3 = 48
decoded$ = 72
__$ArrayPad$ = 104
this$ = 144
token$ = 152
?dtor$0@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeString'::`1'::dtor$0
	lea	rcx, QWORD PTR decoded$[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeString'::`1'::dtor$0
_Tmp$14 = 32
$T4 = 32
$T3 = 48
decoded$ = 72
__$ArrayPad$ = 104
this$ = 144
token$ = 152
?dtor$1@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeString'::`1'::dtor$1
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$1@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeString'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Tmp$14 = 32
$T4 = 32
$T3 = 48
decoded$ = 72
__$ArrayPad$ = 104
this$ = 144
token$ = 152
?dtor$0@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeString'::`1'::dtor$0
	lea	rcx, QWORD PTR decoded$[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeString'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Tmp$14 = 32
$T4 = 32
$T3 = 48
decoded$ = 72
__$ArrayPad$ = 104
this$ = 144
token$ = 152
?dtor$1@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA PROC ; `Json::Reader::decodeString'::`1'::dtor$1
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$1@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@@Z@4HA ENDP ; `Json::Reader::decodeString'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
unicode$6 = 48
current$ = 56
$T4 = 64
$T3 = 64
$T1 = 64
__$ArrayPad$ = 96
this$ = 160
token$ = 168
decoded$ = 176
?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Reader::decodeString, COMDAT

$LN37:
	mov	QWORD PTR [rsp+32], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 112				; 00000070H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rdi, r8
	mov	rbp, rdx
	mov	r14, rcx

	mov	rdx, QWORD PTR [rdx+16]
	sub	rdx, QWORD PTR [rbp+8]
	sub	rdx, 2
	mov	rcx, r8
	call	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve

	mov	rbx, QWORD PTR [rbp+8]
	inc	rbx

	mov	rsi, QWORD PTR [rbp+16]
	dec	rsi
	cmp	rbx, rsi

	je	SHORT $LN32@decodeStri
	lea	r15, OFFSET FLAT:__ImageBase
	npad	10
$LL2@decodeStri:

	movzx	edx, BYTE PTR [rbx]
	inc	rbx

	cmp	dl, 34					; 00000022H
	je	SHORT $LN32@decodeStri

	cmp	dl, 92					; 0000005cH
	jne	SHORT $LN8@decodeStri

	cmp	rbx, rsi
	je	$LN28@decodeStri

	movsx	eax, BYTE PTR [rbx]
	inc	rbx
	mov	QWORD PTR current$[rsp], rbx

	add	eax, -34				; ffffffffffffffdeH
	cmp	eax, 83					; 00000053H
	ja	$LN21@decodeStri
	cdqe
	movzx	eax, BYTE PTR $LN33@decodeStri[r15+rax]
	mov	ecx, DWORD PTR $LN34@decodeStri[r15+rax*4]
	add	rcx, r15
	jmp	rcx
$LN11@decodeStri:

	mov	dl, 34					; 00000022H
$LN8@decodeStri:

	mov	rcx, rdi
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
$LN9@decodeStri:
	cmp	rbx, rsi
	jne	SHORT $LL2@decodeStri
$LN32@decodeStri:

	mov	al, 1
$LN1@decodeStri:

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rbx, QWORD PTR [rsp+184]
	add	rsp, 112				; 00000070H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN12@decodeStri:

	mov	dl, 47					; 0000002fH
	jmp	SHORT $LN8@decodeStri
$LN13@decodeStri:

	mov	dl, 92					; 0000005cH
	jmp	SHORT $LN8@decodeStri
$LN14@decodeStri:

	mov	dl, 8
	jmp	SHORT $LN8@decodeStri
$LN15@decodeStri:

	mov	dl, 12
	jmp	SHORT $LN8@decodeStri
$LN16@decodeStri:

	mov	dl, 10
	jmp	SHORT $LN8@decodeStri
$LN17@decodeStri:

	mov	dl, 13
	jmp	SHORT $LN8@decodeStri
$LN18@decodeStri:

	mov	dl, 9
	jmp	SHORT $LN8@decodeStri
$LN19@decodeStri:

	lea	rax, QWORD PTR unicode$6[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, rsi
	lea	r8, QWORD PTR current$[rsp]
	mov	rdx, rbp
	mov	rcx, r14
	call	?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z ; Json::Reader::decodeUnicodeCodePoint
	test	al, al
	je	SHORT $LN29@decodeStri

	mov	edx, DWORD PTR unicode$6[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; Json::codePointToUTF8
	npad	1
	mov	rdx, rax
	mov	rcx, rdi
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
	npad	1
	lea	rcx, QWORD PTR $T3[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

	mov	rbx, QWORD PTR current$[rsp]
	jmp	$LN9@decodeStri
$LN29@decodeStri:

	xor	al, al
	jmp	$LN1@decodeStri
$LN21@decodeStri:

	lea	rdx, OFFSET FLAT:??_C@_0BO@NDEEJNNB@Bad?5escape?5sequence?5in?5string@
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	r9, rbx
	mov	r8, rbp
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, r14
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	movzx	ebx, al
	lea	rcx, QWORD PTR $T4[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	movzx	eax, bl
	jmp	$LN1@decodeStri
$LN28@decodeStri:

	lea	rdx, OFFSET FLAT:??_C@_0CA@DPGKPPOE@Empty?5escape?5sequence?5in?5string@
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	r9, rbx
	mov	r8, rbp
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, r14
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	movzx	ebx, al
	lea	rcx, QWORD PTR $T1[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	movzx	eax, bl
	jmp	$LN1@decodeStri
	npad	3
$LN34@decodeStri:

	DD	$LN11@decodeStri
	DD	$LN12@decodeStri
	DD	$LN13@decodeStri
	DD	$LN14@decodeStri
	DD	$LN15@decodeStri
	DD	$LN16@decodeStri
	DD	$LN17@decodeStri
	DD	$LN18@decodeStri
	DD	$LN19@decodeStri
	DD	$LN21@decodeStri
$LN33@decodeStri:
	DB	0
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	1
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	2
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	3
	DB	9
	DB	9
	DB	9
	DB	4
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	5
	DB	9
	DB	9
	DB	9
	DB	6
	DB	9
	DB	7
	DB	8
?decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Reader::decodeString
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
unicode$6 = 48
current$ = 56
$T4 = 64
$T3 = 64
$T1 = 64
__$ArrayPad$ = 96
this$ = 160
token$ = 168
decoded$ = 176
?dtor$0@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Json::Reader::decodeString'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Json::Reader::decodeString'::`1'::dtor$0
unicode$6 = 48
current$ = 56
$T4 = 64
$T3 = 64
$T1 = 64
__$ArrayPad$ = 96
this$ = 160
token$ = 168
decoded$ = 176
?dtor$1@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Json::Reader::decodeString'::`1'::dtor$1
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Json::Reader::decodeString'::`1'::dtor$1
unicode$6 = 48
current$ = 56
$T4 = 64
$T3 = 64
$T1 = 64
__$ArrayPad$ = 96
this$ = 160
token$ = 168
decoded$ = 176
?dtor$2@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Json::Reader::decodeString'::`1'::dtor$2
	lea	rcx, QWORD PTR $T4[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Json::Reader::decodeString'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
unicode$6 = 48
current$ = 56
$T4 = 64
$T3 = 64
$T1 = 64
__$ArrayPad$ = 96
this$ = 160
token$ = 168
decoded$ = 176
?dtor$0@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Json::Reader::decodeString'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Json::Reader::decodeString'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
unicode$6 = 48
current$ = 56
$T4 = 64
$T3 = 64
$T1 = 64
__$ArrayPad$ = 96
this$ = 160
token$ = 168
decoded$ = 176
?dtor$1@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Json::Reader::decodeString'::`1'::dtor$1
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Json::Reader::decodeString'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
unicode$6 = 48
current$ = 56
$T4 = 64
$T3 = 64
$T1 = 64
__$ArrayPad$ = 96
this$ = 160
token$ = 168
decoded$ = 176
?dtor$2@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Json::Reader::decodeString'::`1'::dtor$2
	lea	rcx, QWORD PTR $T4[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??decodeString@Reader@Json@@AEAA_NAEAVToken@12@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Json::Reader::decodeString'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z
_TEXT	SEGMENT
surrogatePair$15 = 32
$T8 = 40
$T4 = 40
$T13 = 40
$T6 = 40
$T11 = 72
$T1 = 72
__$ArrayPad$ = 104
this$ = 176
token$ = 184
current$ = 192
end$ = 200
unicode$ = 208
?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z PROC ; Json::Reader::decodeUnicodeCodePoint, COMDAT

$LN54:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 112				; 00000070H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	r14, r9
	mov	rdi, r8
	mov	r12, rdx
	mov	r15, rcx
	mov	rsi, QWORD PTR unicode$[rsp]

	mov	rax, r9
	sub	rax, QWORD PTR [r8]
	xor	ebx, ebx
	cmp	rax, 4
	jge	SHORT $LN16@decodeUnic

	lea	rdx, OFFSET FLAT:??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5@
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	r9, QWORD PTR [rdi]
	mov	r8, r12
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, r15
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	movzx	ebp, al
	lea	rcx, QWORD PTR $T1[rsp]
	jmp	$LN49@decodeUnic
$LN16@decodeUnic:

	mov	DWORD PTR [rsi], ebx

	mov	r8d, ebx
	npad	9
$LL15@decodeUnic:

	mov	rax, QWORD PTR [rdi]
	movsx	ecx, BYTE PTR [rax]
	inc	rax
	mov	QWORD PTR [rdi], rax

	mov	edx, DWORD PTR [rsi]
	shl	edx, 4
	mov	DWORD PTR [rsi], edx

	lea	eax, DWORD PTR [rcx-48]
	cmp	al, 9
	ja	SHORT $LN17@decodeUnic

	mov	eax, ecx
	lea	ecx, DWORD PTR [rdx-48]
	jmp	SHORT $LN50@decodeUnic
$LN17@decodeUnic:

	lea	eax, DWORD PTR [rcx-97]
	cmp	al, 5
	ja	SHORT $LN19@decodeUnic

	mov	eax, ecx
	lea	ecx, DWORD PTR [rdx-87]
	jmp	SHORT $LN50@decodeUnic
$LN19@decodeUnic:

	lea	eax, DWORD PTR [rcx-65]
	cmp	al, 5
	ja	SHORT $LN21@decodeUnic

	mov	eax, ecx
	lea	ecx, DWORD PTR [rdx-55]
$LN50@decodeUnic:

	add	ecx, eax
	mov	DWORD PTR [rsi], ecx
	inc	r8d
	cmp	r8d, 4
	jl	SHORT $LL15@decodeUnic
	jmp	SHORT $LN2@decodeUnic
$LN21@decodeUnic:

	lea	rdx, OFFSET FLAT:??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5@
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	r9, QWORD PTR [rdi]
	mov	r8, r12
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, r15
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	movzx	ebp, al
	lea	rcx, QWORD PTR $T4[rsp]
$LN49@decodeUnic:

	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	test	bpl, bpl
	je	$LN7@decodeUnic
$LN2@decodeUnic:

	mov	eax, DWORD PTR [rsi]
	sub	eax, 55296				; 0000d800H
	cmp	eax, 1023				; 000003ffH
	ja	$LN6@decodeUnic

	mov	rdx, QWORD PTR [rdi]
	mov	rax, r14
	sub	rax, rdx
	cmp	rax, 6
	jge	SHORT $LN4@decodeUnic

	lea	rdx, OFFSET FLAT:??_C@_0EE@LMPEHADE@additional?5six?5characters?5expec@
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	r9, QWORD PTR [rdi]
	mov	r8, r12
	lea	rdx, QWORD PTR $T6[rsp]
	mov	rcx, r15
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	movzx	ebx, al
	lea	rcx, QWORD PTR $T6[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	movzx	eax, bl
	jmp	$LN1@decodeUnic
$LN4@decodeUnic:

	movzx	eax, BYTE PTR [rdx]
	inc	rdx
	mov	QWORD PTR [rdi], rdx
	cmp	al, 92					; 0000005cH
	jne	$LN5@decodeUnic
	movzx	eax, BYTE PTR [rdx]
	inc	rdx
	mov	QWORD PTR [rdi], rdx
	cmp	al, 117					; 00000075H
	jne	$LN5@decodeUnic

	sub	r14, rdx
	cmp	r14, 4
	jge	SHORT $LN30@decodeUnic

	lea	rdx, OFFSET FLAT:??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5@
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	r9, QWORD PTR [rdi]
	mov	r8, r12
	lea	rdx, QWORD PTR $T8[rsp]
	mov	rcx, r15
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	movzx	edi, al
	lea	rcx, QWORD PTR $T8[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ebx, DWORD PTR surrogatePair$15[rsp]
	jmp	$LN26@decodeUnic
$LN30@decodeUnic:

	mov	edx, ebx
	npad	8
$LL29@decodeUnic:

	mov	rax, QWORD PTR [rdi]
	movsx	ecx, BYTE PTR [rax]
	inc	rax
	mov	QWORD PTR [rdi], rax

	shl	ebx, 4

	lea	eax, DWORD PTR [rcx-48]
	cmp	al, 9
	ja	SHORT $LN31@decodeUnic

	mov	eax, ecx
	add	eax, -48				; ffffffd0H
	jmp	SHORT $LN51@decodeUnic
$LN31@decodeUnic:

	lea	eax, DWORD PTR [rcx-97]
	cmp	al, 5
	ja	SHORT $LN33@decodeUnic

	mov	eax, ecx
	add	eax, -87				; ffffffa9H
	jmp	SHORT $LN51@decodeUnic
$LN33@decodeUnic:

	lea	eax, DWORD PTR [rcx-65]
	cmp	al, 5
	ja	SHORT $LN35@decodeUnic

	mov	eax, ecx
	add	eax, -55				; ffffffc9H
$LN51@decodeUnic:

	add	ebx, eax
	inc	edx
	cmp	edx, 4
	jl	SHORT $LL29@decodeUnic
	jmp	SHORT $LN48@decodeUnic
$LN35@decodeUnic:

	lea	rdx, OFFSET FLAT:??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5@
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	r9, QWORD PTR [rdi]
	mov	r8, r12
	lea	rdx, QWORD PTR $T11[rsp]
	mov	rcx, r15
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	movzx	edi, al
	lea	rcx, QWORD PTR $T11[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN26@decodeUnic:

	test	dil, dil
	je	SHORT $LN7@decodeUnic
$LN48@decodeUnic:

	mov	eax, DWORD PTR [rsi]
	and	eax, 1023				; 000003ffH
	add	eax, 64					; 00000040H
	shl	eax, 10
	and	ebx, 1023				; 000003ffH
	add	eax, ebx
	mov	DWORD PTR [rsi], eax
$LN6@decodeUnic:

	mov	al, 1
	jmp	SHORT $LN1@decodeUnic
$LN5@decodeUnic:

	lea	rdx, OFFSET FLAT:??_C@_0FA@BGMMPLKB@expecting?5another?5?2u?5token?5to?5b@
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	r9, QWORD PTR [rdi]
	mov	r8, r12
	lea	rdx, QWORD PTR $T13[rsp]
	mov	rcx, r15
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	movzx	ebx, al
	lea	rcx, QWORD PTR $T13[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	movzx	eax, bl
	jmp	SHORT $LN1@decodeUnic
$LN7@decodeUnic:

	xor	al, al
$LN1@decodeUnic:

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 112				; 00000070H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z ENDP ; Json::Reader::decodeUnicodeCodePoint
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
surrogatePair$15 = 32
$T8 = 40
$T4 = 40
$T13 = 40
$T6 = 40
$T11 = 72
$T1 = 72
__$ArrayPad$ = 104
this$ = 176
token$ = 184
current$ = 192
end$ = 200
unicode$ = 208
?dtor$2@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$2
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$2
surrogatePair$15 = 32
$T8 = 40
$T4 = 40
$T13 = 40
$T6 = 40
$T11 = 72
$T1 = 72
__$ArrayPad$ = 104
this$ = 176
token$ = 184
current$ = 192
end$ = 200
unicode$ = 208
?dtor$3@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$3
	lea	rcx, QWORD PTR $T4[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$3@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$3
surrogatePair$15 = 32
$T8 = 40
$T4 = 40
$T13 = 40
$T6 = 40
$T11 = 72
$T1 = 72
__$ArrayPad$ = 104
this$ = 176
token$ = 184
current$ = 192
end$ = 200
unicode$ = 208
?dtor$0@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$0
	lea	rcx, QWORD PTR $T6[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$0
surrogatePair$15 = 32
$T8 = 40
$T4 = 40
$T13 = 40
$T6 = 40
$T11 = 72
$T1 = 72
__$ArrayPad$ = 104
this$ = 176
token$ = 184
current$ = 192
end$ = 200
unicode$ = 208
?dtor$4@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$4
	lea	rcx, QWORD PTR $T8[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$4@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$4
surrogatePair$15 = 32
$T8 = 40
$T4 = 40
$T13 = 40
$T6 = 40
$T11 = 72
$T1 = 72
__$ArrayPad$ = 104
this$ = 176
token$ = 184
current$ = 192
end$ = 200
unicode$ = 208
?dtor$5@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$5
	lea	rcx, QWORD PTR $T11[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$5@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$5
surrogatePair$15 = 32
$T8 = 40
$T4 = 40
$T13 = 40
$T6 = 40
$T11 = 72
$T1 = 72
__$ArrayPad$ = 104
this$ = 176
token$ = 184
current$ = 192
end$ = 200
unicode$ = 208
?dtor$1@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$1
	lea	rcx, QWORD PTR $T13[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
surrogatePair$15 = 32
$T8 = 40
$T4 = 40
$T13 = 40
$T6 = 40
$T11 = 72
$T1 = 72
__$ArrayPad$ = 104
this$ = 176
token$ = 184
current$ = 192
end$ = 200
unicode$ = 208
?dtor$2@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$2
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
surrogatePair$15 = 32
$T8 = 40
$T4 = 40
$T13 = 40
$T6 = 40
$T11 = 72
$T1 = 72
__$ArrayPad$ = 104
this$ = 176
token$ = 184
current$ = 192
end$ = 200
unicode$ = 208
?dtor$3@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$3
	lea	rcx, QWORD PTR $T4[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$3@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
surrogatePair$15 = 32
$T8 = 40
$T4 = 40
$T13 = 40
$T6 = 40
$T11 = 72
$T1 = 72
__$ArrayPad$ = 104
this$ = 176
token$ = 184
current$ = 192
end$ = 200
unicode$ = 208
?dtor$0@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$0
	lea	rcx, QWORD PTR $T6[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
surrogatePair$15 = 32
$T8 = 40
$T4 = 40
$T13 = 40
$T6 = 40
$T11 = 72
$T1 = 72
__$ArrayPad$ = 104
this$ = 176
token$ = 184
current$ = 192
end$ = 200
unicode$ = 208
?dtor$4@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$4
	lea	rcx, QWORD PTR $T8[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$4@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
surrogatePair$15 = 32
$T8 = 40
$T4 = 40
$T13 = 40
$T6 = 40
$T11 = 72
$T1 = 72
__$ArrayPad$ = 104
this$ = 176
token$ = 184
current$ = 192
end$ = 200
unicode$ = 208
?dtor$5@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$5
	lea	rcx, QWORD PTR $T11[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$5@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
surrogatePair$15 = 32
$T8 = 40
$T4 = 40
$T13 = 40
$T6 = 40
$T11 = 72
$T1 = 72
__$ArrayPad$ = 104
this$ = 176
token$ = 184
current$ = 192
end$ = 200
unicode$ = 208
?dtor$1@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$1
	lea	rcx, QWORD PTR $T13[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??decodeUnicodeCodePoint@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeCodePoint'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z
_TEXT	SEGMENT
$T3 = 32
$T1 = 32
__$ArrayPad$ = 64
this$ = 112
token$ = 120
current$ = 128
end$ = 136
unicode$ = 144
?decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z PROC ; Json::Reader::decodeUnicodeEscapeSequence, COMDAT

$LN23:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, r8
	mov	rsi, rdx
	mov	rdi, rcx
	mov	r10, QWORD PTR unicode$[rsp]

	sub	r9, QWORD PTR [r8]
	cmp	r9, 4
	jge	SHORT $LN5@decodeUnic

	lea	rdx, OFFSET FLAT:??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5@
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	r9, QWORD PTR [rbx]
	mov	r8, rsi
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, rdi
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	movzx	ebx, al
	jmp	$LN19@decodeUnic
$LN5@decodeUnic:

	xor	r8d, r8d
	mov	DWORD PTR [r10], r8d
	npad	12
$LL4@decodeUnic:

	mov	rcx, QWORD PTR [rbx]
	movsx	eax, BYTE PTR [rcx]
	inc	rcx
	mov	QWORD PTR [rbx], rcx

	mov	edx, DWORD PTR [r10]
	shl	edx, 4
	mov	DWORD PTR [r10], edx

	lea	ecx, DWORD PTR [rax-48]
	cmp	cl, 9
	ja	SHORT $LN6@decodeUnic

	mov	ecx, eax
	lea	eax, DWORD PTR [rdx-48]
	jmp	SHORT $LN20@decodeUnic
$LN6@decodeUnic:

	lea	ecx, DWORD PTR [rax-97]
	cmp	cl, 5
	ja	SHORT $LN8@decodeUnic

	mov	ecx, eax
	lea	eax, DWORD PTR [rdx-87]
	jmp	SHORT $LN20@decodeUnic
$LN8@decodeUnic:

	lea	ecx, DWORD PTR [rax-65]
	cmp	cl, 5
	ja	SHORT $LN10@decodeUnic

	mov	ecx, eax
	lea	eax, DWORD PTR [rdx-55]
$LN20@decodeUnic:

	add	eax, ecx
	mov	DWORD PTR [r10], eax
	inc	r8d
	cmp	r8d, 4
	jl	SHORT $LL4@decodeUnic

	mov	al, 1
	jmp	SHORT $LN1@decodeUnic
$LN10@decodeUnic:

	lea	rdx, OFFSET FLAT:??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5@
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	r9, QWORD PTR [rbx]
	mov	r8, rsi
	lea	rdx, QWORD PTR $T3[rsp]
	mov	rcx, rdi
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError
	movzx	ebx, al
$LN19@decodeUnic:

	lea	rcx, QWORD PTR $T3[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	movzx	eax, bl
$LN1@decodeUnic:
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 80					; 00000050H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z ENDP ; Json::Reader::decodeUnicodeEscapeSequence
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T3 = 32
$T1 = 32
__$ArrayPad$ = 64
this$ = 112
token$ = 120
current$ = 128
end$ = 136
unicode$ = 144
?dtor$0@?0??decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeEscapeSequence'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeEscapeSequence'::`1'::dtor$0
$T3 = 32
$T1 = 32
__$ArrayPad$ = 64
this$ = 112
token$ = 120
current$ = 128
end$ = 136
unicode$ = 144
?dtor$1@?0??decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeEscapeSequence'::`1'::dtor$1
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeEscapeSequence'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 32
$T1 = 32
__$ArrayPad$ = 64
this$ = 112
token$ = 120
current$ = 128
end$ = 136
unicode$ = 144
?dtor$0@?0??decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeEscapeSequence'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeEscapeSequence'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 32
$T1 = 32
__$ArrayPad$ = 64
this$ = 112
token$ = 120
current$ = 128
end$ = 136
unicode$ = 144
?dtor$1@?0??decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA PROC ; `Json::Reader::decodeUnicodeEscapeSequence'::`1'::dtor$1
	lea	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??decodeUnicodeEscapeSequence@Reader@Json@@AEAA_NAEAVToken@12@AEAPEBDPEBDAEAI@Z@4HA ENDP ; `Json::Reader::decodeUnicodeEscapeSequence'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z
_TEXT	SEGMENT
info$ = 32
__$ArrayPad$ = 96
this$ = 160
message$ = 168
token$ = 176
extra$ = 184
?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z PROC ; Json::Reader::addError, COMDAT

$LN22:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbp, r9
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx
	lea	rcx, QWORD PTR info$[rsp+24]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

	movups	xmm0, XMMWORD PTR [rbx]
	movaps	XMMWORD PTR info$[rsp], xmm0
	movsd	xmm1, QWORD PTR [rbx+16]
	movsd	QWORD PTR info$[rsp+16], xmm1

	mov	rdx, rdi
	lea	rcx, QWORD PTR info$[rsp+24]
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

	mov	QWORD PTR info$[rsp+56], rbp

	add	rsi, 40					; 00000028H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1122 :         _Orphan_all();

	mov	rcx, rsi
	call	?_Orphan_all@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Orphan_all

; 1115 :         _PUSH_BACK_BEGIN;

	mov	rcx, rsi
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rcx, rsi
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rcx, rsi
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rbx, QWORD PTR [rax]
	mov	rcx, rsi
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	lea	rcx, QWORD PTR [rbx+1]
	cmp	QWORD PTR [rax], rcx
	ja	SHORT $LN10@addError
	mov	rcx, rsi
	call	?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
$LN10@addError:
	mov	rcx, rsi
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	mov	rcx, QWORD PTR [rax]
	dec	rcx
	and	QWORD PTR [rbx], rcx
	mov	rcx, rsi
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rdx, QWORD PTR [rax]
	add	rdx, QWORD PTR [rbx]
	mov	rcx, rsi
	call	?_Getblock@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBA_K_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getblock
	lea	rdi, QWORD PTR [rax*8]
	mov	rcx, rsi
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR [rdi+rax], 0
	jne	SHORT $LN11@addError
	mov	rcx, rsi
	call	?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z	; std::_Get_size_of_n<64>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	rbx, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1115 :         _PUSH_BACK_BEGIN;

	mov	rcx, rsi
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rdx, QWORD PTR [rax]
	mov	QWORD PTR [rdi+rdx], rbx
$LN11@addError:

; 1116 :         _Alty_traits::construct(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ), _STD forward<_Tys>(_Vals)...);

	mov	rcx, rsi
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rcx, QWORD PTR [rax]
	mov	rcx, QWORD PTR [rcx+rdi]
	call	??$_Unfancy@VErrorInfo@Reader@Json@@@std@@YAPEAVErrorInfo@Reader@Json@@PEAV123@@Z ; std::_Unfancy<Json::Reader::ErrorInfo>
	mov	rbx, rax
	mov	rcx, rsi
	call	?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	rdx, rbx
	mov	ecx, 64					; 00000040H
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rbx, rax
	movaps	xmm0, XMMWORD PTR info$[rsp]
	movups	XMMWORD PTR [rax], xmm0
	movsd	xmm1, QWORD PTR info$[rsp+16]
	movsd	QWORD PTR [rax+16], xmm1
	lea	rcx, QWORD PTR [rax+24]
	lea	rdx, QWORD PTR info$[rsp+24]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rdx, QWORD PTR info$[rsp+56]
	mov	QWORD PTR [rbx+56], rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1117 :         _PUSH_BACK_END;

	mov	rcx, rsi
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	inc	QWORD PTR [rax]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	lea	rcx, QWORD PTR info$[rsp]
	call	??1ErrorInfo@Reader@Json@@QEAA@XZ
	xor	al, al

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ENDP ; Json::Reader::addError
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
info$ = 32
__$ArrayPad$ = 96
this$ = 160
message$ = 168
token$ = 176
extra$ = 184
?dtor$0@?0??addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z@4HA PROC ; `Json::Reader::addError'::`1'::dtor$0
	lea	rcx, QWORD PTR info$[rdx]
	jmp	??1ErrorInfo@Reader@Json@@QEAA@XZ
?dtor$0@?0??addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z@4HA ENDP ; `Json::Reader::addError'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
info$ = 32
__$ArrayPad$ = 96
this$ = 160
message$ = 168
token$ = 176
extra$ = 184
?dtor$0@?0??addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z@4HA PROC ; `Json::Reader::addError'::`1'::dtor$0
	lea	rcx, QWORD PTR info$[rdx]
	jmp	??1ErrorInfo@Reader@Json@@QEAA@XZ
?dtor$0@?0??addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z@4HA ENDP ; `Json::Reader::addError'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0ErrorInfo@Reader@Json@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0ErrorInfo@Reader@Json@@QEAA@XZ PROC			; Json::Reader::ErrorInfo::ErrorInfo, COMDAT
$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	add	rcx, 24
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0ErrorInfo@Reader@Json@@QEAA@XZ ENDP			; Json::Reader::ErrorInfo::ErrorInfo
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z
_TEXT	SEGMENT
skip$ = 32
this$ = 80
skipUntilToken$ = 88
?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z PROC ; Json::Reader::recoverFromError, COMDAT

$LN18:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbp, rcx
	mov	esi, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1001 :         return _Mysize();

	add	rcx, 40					; 00000028H
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAAEB_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	movsxd	rdi, DWORD PTR [rax]
	npad	11
$LL2@recoverFro:

	lea	rdx, QWORD PTR skip$[rsp]
	mov	rcx, rbp
	call	?readToken@Reader@Json@@AEAA_NAEAVToken@12@@Z ; Json::Reader::readToken
	test	al, al
	jne	SHORT $LN15@recoverFro

	mov	rdx, rdi
	lea	rcx, QWORD PTR [rbp+40]
	call	?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize
$LN15@recoverFro:

	mov	eax, DWORD PTR skip$[rsp]
	cmp	eax, esi
	je	SHORT $LN11@recoverFro
	test	eax, eax
	jne	SHORT $LL2@recoverFro
$LN11@recoverFro:

	mov	rdx, rdi
	lea	rcx, QWORD PTR [rbp+40]
	call	?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize

	mov	rbx, QWORD PTR [rsp+80]
	xor	al, al
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z ENDP ; Json::Reader::recoverFromError
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?addErrorAndRecover@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@W4TokenType@12@@Z
_TEXT	SEGMENT
this$ = 48
message$ = 56
token$ = 64
skipUntilToken$ = 72
?addErrorAndRecover@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@W4TokenType@12@@Z PROC ; Json::Reader::addErrorAndRecover, COMDAT

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	edi, r9d
	mov	rbx, rcx

	xor	r9d, r9d
	call	?addError@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@PEBD@Z ; Json::Reader::addError

	mov	edx, edi
	mov	rcx, rbx

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

	jmp	?recoverFromError@Reader@Json@@AEAA_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
?addErrorAndRecover@Reader@Json@@AEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVToken@12@W4TokenType@12@@Z ENDP ; Json::Reader::addErrorAndRecover
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?currentValue@Reader@Json@@AEAAAEAVValue@2@XZ
_TEXT	SEGMENT
_Tmp$6 = 32
$T1 = 32
this$ = 64
?currentValue@Reader@Json@@AEAAAEAVValue@2@XZ PROC	; Json::Reader::currentValue, COMDAT

$LN25:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rcx, rdi
	mov	QWORD PTR $T1[rsp], rax
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rcx, QWORD PTR [rbx]
	add	rcx, QWORD PTR [rax]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T1[rsp+8], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T1[rsp]
	movdqa	XMMWORD PTR _Tmp$6[rsp], xmm0

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rbx, QWORD PTR _Tmp$6[rsp]

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rcx, rbx
	mov	rdx, rdi
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	mov	rcx, rax

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;
; 57   :         return _Mycont->_Map[_Block][_Off];

	and	edi, 1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp

	mov	rax, QWORD PTR [rbx+8]

	mov	rbx, QWORD PTR [rsp+64]
	mov	rax, QWORD PTR [rax+rcx*8]
	mov	rax, QWORD PTR [rax+rdi*8]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?currentValue@Reader@Json@@AEAAAEAVValue@2@XZ ENDP	; Json::Reader::currentValue
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ?getNextChar@Reader@Json@@AEAADXZ
_TEXT	SEGMENT
this$ = 8
?getNextChar@Reader@Json@@AEAADXZ PROC			; Json::Reader::getNextChar, COMDAT

	mov	rdx, rcx

	mov	rcx, QWORD PTR [rcx+128]
	cmp	rcx, QWORD PTR [rdx+120]
	jne	SHORT $LN2@getNextCha

	xor	al, al

	ret	0
$LN2@getNextCha:

	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	mov	QWORD PTR [rdx+128], rcx

	ret	0
?getNextChar@Reader@Json@@AEAADXZ ENDP			; Json::Reader::getNextChar
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::clear, COMDAT

; 1326 :         _Tidy();

	jmp	?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Tidy
?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXAEBVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXAEBVErrorInfo@Reader@Json@@@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back, COMDAT

; 1121 :     void push_back(const _Ty& _Val) {

$LN16:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	rdi, rcx

; 1122 :         _Orphan_all();

	call	?_Orphan_all@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Orphan_all

; 1115 :         _PUSH_BACK_BEGIN;

	mov	rcx, rdi
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rcx, rdi
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rcx, rdi
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rcx, rdi
	mov	rbx, QWORD PTR [rax]
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	lea	rcx, QWORD PTR [rbx+1]
	cmp	QWORD PTR [rax], rcx
	ja	SHORT $LN4@push_back
	mov	rcx, rdi
	call	?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
$LN4@push_back:
	mov	rcx, rdi
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	mov	rcx, QWORD PTR [rax]
	dec	rcx
	and	QWORD PTR [rbx], rcx
	mov	rcx, rdi
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rdx, QWORD PTR [rbx]
	mov	rcx, rdi
	add	rdx, QWORD PTR [rax]
	call	?_Getblock@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBA_K_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getblock
	mov	rcx, rdi
	lea	rsi, QWORD PTR [rax*8]
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR [rsi+rax], 0
	jne	SHORT $LN5@push_back
	mov	rcx, rdi
	call	?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z	; std::_Get_size_of_n<64>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1115 :         _PUSH_BACK_BEGIN;

	mov	rcx, rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1115 :         _PUSH_BACK_BEGIN;

	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rdx, QWORD PTR [rax]
	mov	QWORD PTR [rsi+rdx], rbx
$LN5@push_back:

; 1116 :         _Alty_traits::construct(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ), _STD forward<_Tys>(_Vals)...);

	mov	rcx, rdi
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rcx, QWORD PTR [rax]
	mov	rcx, QWORD PTR [rcx+rsi]
	call	??$_Unfancy@VErrorInfo@Reader@Json@@@std@@YAPEAVErrorInfo@Reader@Json@@PEAV123@@Z ; std::_Unfancy<Json::Reader::ErrorInfo>
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	rdx, rbx
	mov	ecx, 64					; 00000040H
	call	??2@YAPEAX_KPEAX@Z			; operator new
	movups	xmm0, XMMWORD PTR [rbp]
	lea	rdx, QWORD PTR [rbp+24]
	mov	rbx, rax
	movups	XMMWORD PTR [rax], xmm0
	lea	rcx, QWORD PTR [rax+24]
	movsd	xmm1, QWORD PTR [rbp+16]
	movsd	QWORD PTR [rax+16], xmm1
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rcx, QWORD PTR [rbp+56]
	mov	QWORD PTR [rbx+56], rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1117 :         _PUSH_BACK_END;

	mov	rcx, rdi
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize

; 1123 :         _Emplace_back_internal(_Val);
; 1124 :     }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]

; 1117 :         _PUSH_BACK_END;

	inc	QWORD PTR [rax]

; 1123 :         _Emplace_back_internal(_Val);
; 1124 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXAEBVErrorInfo@Reader@Json@@@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 48
?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::size, COMDAT

; 1000 :     _NODISCARD size_type size() const noexcept {

$LN5:
	sub	rsp, 40					; 00000028H

; 1001 :         return _Mysize();

	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAAEB_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rax, QWORD PTR [rax]

; 1002 :     }

	add	rsp, 40					; 00000028H
	ret	0
?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Newsize$ = 56
?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize, COMDAT

; 979  :     void resize(_CRT_GUARDOVERFLOW size_type _Newsize) {

$LN28:
	mov	QWORD PTR [rsp+24], rbx
	push	rsi
	sub	rsp, 32					; 00000020H
	mov	rsi, rdx
	mov	rbx, rcx

; 980  :         while (_Mysize() < _Newsize) {

	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	cmp	QWORD PTR [rax], rsi
	jae	$LN19@resize
	mov	QWORD PTR [rsp+48], rdi
	mov	QWORD PTR [rsp+56], r14
$LL2@resize:

; 819  :         _Orphan_all();

	mov	rcx, rbx
	call	?_Orphan_all@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Orphan_all

; 820  :         _PUSH_BACK_BEGIN;

	mov	rcx, rbx
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rcx, rbx
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rcx, rbx
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rcx, rbx
	mov	rdi, QWORD PTR [rax]
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	lea	rcx, QWORD PTR [rdi+1]
	cmp	QWORD PTR [rax], rcx
	ja	SHORT $LN8@resize
	mov	rcx, rbx
	call	?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
$LN8@resize:
	mov	rcx, rbx
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rcx, rbx
	mov	rdi, rax
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	mov	rcx, QWORD PTR [rax]
	dec	rcx
	and	QWORD PTR [rdi], rcx
	mov	rcx, rbx
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rcx, rbx
	mov	rdi, rax
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rdx, QWORD PTR [rdi]
	mov	rcx, rbx
	add	rdx, QWORD PTR [rax]
	call	?_Getblock@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBA_K_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getblock
	mov	rcx, rbx
	lea	r14, QWORD PTR [rax*8]
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR [r14+rax], 0
	jne	SHORT $LN9@resize
	mov	rcx, rbx
	call	?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z	; std::_Get_size_of_n<64>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 820  :         _PUSH_BACK_BEGIN;

	mov	rcx, rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rdi, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 820  :         _PUSH_BACK_BEGIN;

	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rdx, QWORD PTR [rax]
	mov	QWORD PTR [r14+rdx], rdi
$LN9@resize:

; 821  :         _Alty_traits::construct(

	mov	rcx, rbx
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rcx, QWORD PTR [rax]
	mov	rcx, QWORD PTR [rcx+r14]
	call	??$_Unfancy@VErrorInfo@Reader@Json@@@std@@YAPEAVErrorInfo@Reader@Json@@PEAV123@@Z ; std::_Unfancy<Json::Reader::ErrorInfo>
	mov	rcx, rbx
	mov	rdi, rax
	call	?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	rdx, rdi
	mov	ecx, 64					; 00000040H
	call	??2@YAPEAX_KPEAX@Z			; operator new
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [rax], xmm0
	lea	rcx, QWORD PTR [rax+24]
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 823  :         _PUSH_BACK_END;

	mov	rcx, rbx
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize

; 980  :         while (_Mysize() < _Newsize) {

	mov	rcx, rbx

; 823  :         _PUSH_BACK_END;

	inc	QWORD PTR [rax]

; 980  :         while (_Mysize() < _Newsize) {

	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	cmp	QWORD PTR [rax], rsi
	jb	$LL2@resize
	mov	r14, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+48]
$LN19@resize:

; 981  :             emplace_back();
; 982  :         }
; 983  : 
; 984  :         while (_Newsize < _Mysize()) {

	mov	rcx, rbx
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	cmp	rsi, QWORD PTR [rax]
	jae	SHORT $LN5@resize
$LL4@resize:

; 985  :             pop_back();

	mov	rcx, rbx
	call	?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_back
	mov	rcx, rbx
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	cmp	rsi, QWORD PTR [rax]
	jb	SHORT $LL4@resize
$LN5@resize:

; 986  :         }
; 987  :     }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAX_K@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??$emplace_back@$$V@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$emplace_back@$$V@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::emplace_back<>, COMDAT

; 818  :     decltype(auto) emplace_back(_Valty&&... _Val) {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx

; 819  :         _Orphan_all();

	call	?_Orphan_all@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Orphan_all

; 820  :         _PUSH_BACK_BEGIN;

	mov	rcx, rdi
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rcx, rdi
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rcx, rdi
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rcx, rdi
	mov	rbx, QWORD PTR [rax]
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	lea	rcx, QWORD PTR [rbx+1]
	cmp	QWORD PTR [rax], rcx
	ja	SHORT $LN2@emplace_ba
	mov	rcx, rdi
	call	?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
$LN2@emplace_ba:
	mov	rcx, rdi
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	mov	rcx, QWORD PTR [rax]
	dec	rcx
	and	QWORD PTR [rbx], rcx
	mov	rcx, rdi
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rcx, rdi
	mov	rdx, QWORD PTR [rax]
	add	rdx, QWORD PTR [rbx]
	call	?_Getblock@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBA_K_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getblock
	mov	rcx, rdi
	lea	rsi, QWORD PTR [rax*8]
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR [rsi+rax], 0
	jne	SHORT $LN3@emplace_ba
	mov	rcx, rdi
	call	?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z	; std::_Get_size_of_n<64>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 820  :         _PUSH_BACK_BEGIN;

	mov	rcx, rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 820  :         _PUSH_BACK_BEGIN;

	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rdx, QWORD PTR [rax]
	mov	QWORD PTR [rsi+rdx], rbx
$LN3@emplace_ba:

; 821  :         _Alty_traits::construct(

	mov	rcx, rdi
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rcx, QWORD PTR [rax]
	mov	rcx, QWORD PTR [rcx+rsi]
	call	??$_Unfancy@VErrorInfo@Reader@Json@@@std@@YAPEAVErrorInfo@Reader@Json@@PEAV123@@Z ; std::_Unfancy<Json::Reader::ErrorInfo>
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	rdx, rbx
	mov	ecx, 64					; 00000040H
	call	??2@YAPEAX_KPEAX@Z			; operator new
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [rax], xmm0
	lea	rcx, QWORD PTR [rax+24]
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 823  :         _PUSH_BACK_END;

	mov	rcx, rdi
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize

; 824  : 
; 825  : #if _HAS_CXX17
; 826  :         return back();
; 827  : #endif // _HAS_CXX17
; 828  :     }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	inc	QWORD PTR [rax]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$emplace_back@$$V@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAAXXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
this$ = 48
??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAA@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >, COMDAT

; 595  :     deque() : _Mypair(_Zero_then_variadic_args_t()) {

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1088 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

	xor	ebp, ebp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 595  :     deque() : _Mypair(_Zero_then_variadic_args_t()) {

	mov	rsi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1088 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

	mov	QWORD PTR [rcx], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 543  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

	mov	QWORD PTR [rcx+8], rbp
	mov	QWORD PTR [rcx+16], rbp
	mov	QWORD PTR [rcx+24], rbp
	mov	QWORD PTR [rcx+32], rbp

; 596  :         _Get_data()._Alloc_proxy(static_cast<_Alproxy_ty>(_Getal()));

	call	?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0VErrorInfo@Reader@Json@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Json::Reader::ErrorInfo>
	mov	rcx, rsi
	call	?_Get_data@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@VErrorInfo@Reader@Json@@@std@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Get_data
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	lea	ecx, QWORD PTR [rbp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 596  :         _Get_data()._Alloc_proxy(static_cast<_Alproxy_ty>(_Getal()));

	mov	rdi, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	lea	ecx, QWORD PTR [rbp+16]

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	call	??2@YAPEAX_KPEAX@Z			; operator new

; 1080 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

	mov	QWORD PTR [rax+8], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 597  :     }

	mov	rbp, QWORD PTR [rsp+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1080 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

	mov	QWORD PTR [rax], rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 597  :     }

	mov	rax, rsi
	mov	rsi, QWORD PTR [rsp+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1100 :         _Myproxy            = _New_proxy;

	mov	QWORD PTR [rdi], rbx

; 1101 :         _New_proxy->_Mycont = this;

	mov	QWORD PTR [rbx], rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 597  :     }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEAA@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack
;	COMDAT ?pop@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?pop@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAXXZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop, COMDAT

; 94   :         c.pop_back();

	jmp	?pop_back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back
?pop@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAXXZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack
;	COMDAT ?push@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push, COMDAT

; 80   :     void push(value_type&& _Val) {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r15, rdx
	mov	rdi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 796  :         _Orphan_all();

	call	?_Orphan_all@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Orphan_all

; 1115 :         _PUSH_BACK_BEGIN;

	mov	rcx, rdi
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	movzx	r8d, BYTE PTR [rbx]
	add	r8b, BYTE PTR [rax]
	test	r8b, 1
	jne	SHORT $LN6@push
	mov	rcx, rdi
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rcx, rdi
	mov	rbx, QWORD PTR [rax]
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	lea	rcx, QWORD PTR [rbx+2]
	shr	rcx, 1
	cmp	QWORD PTR [rax], rcx
	ja	SHORT $LN6@push
	mov	rcx, rdi
	call	?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap
$LN6@push:
	mov	rcx, rdi
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	mov	rcx, QWORD PTR [rax]
	lea	rcx, QWORD PTR [rcx*2-1]
	and	QWORD PTR [rbx], rcx
	mov	rcx, rdi
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rsi, QWORD PTR [rbx]
	mov	rcx, rdi
	add	rsi, QWORD PTR [rax]
	mov	rdx, rsi
	call	?_Getblock@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBA_K_K@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getblock
	mov	rcx, rdi
	lea	r14, QWORD PTR [rax*8]
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR [r14+rax], 0
	jne	SHORT $LN7@push
	mov	rcx, rdi
	call	?_Getal@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$allocator@PEAVValue@Json@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 2
	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1115 :         _PUSH_BACK_BEGIN;

	mov	rcx, rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1115 :         _PUSH_BACK_BEGIN;

	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [r14+rcx], rbx
$LN7@push:

; 1116 :         _Alty_traits::construct(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ), _STD forward<_Tys>(_Vals)...);

	mov	rcx, rdi
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	and	esi, 1
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [r14+rax]
	lea	rcx, QWORD PTR [rax+rsi*8]
	call	??$_Unfancy@PEAVValue@Json@@@std@@YAPEAPEAVValue@Json@@PEAPEAV12@@Z ; std::_Unfancy<Json::Value *>
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Getal@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$allocator@PEAVValue@Json@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	rdx, rbx
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rcx, QWORD PTR [r15]
	mov	QWORD PTR [rax], rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1117 :         _PUSH_BACK_END;

	mov	rcx, rdi
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack

; 82   :     }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1117 :         _PUSH_BACK_END;

	inc	QWORD PTR [rax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack

; 82   :     }

	mov	r14, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	ret	0
?push@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack
;	COMDAT ?top@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ
_TEXT	SEGMENT
_Tmp$5 = 32
$T1 = 32
this$ = 64
?top@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::top, COMDAT

; 68   :     _NODISCARD reference top() noexcept(noexcept(c.back())) /* strengthened */ {

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rcx, rdi
	mov	QWORD PTR $T1[rsp], rax
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rcx, QWORD PTR [rax]
	add	rcx, QWORD PTR [rbx]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T1[rsp+8], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T1[rsp]
	movdqa	XMMWORD PTR _Tmp$5[rsp], xmm0

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rbx, QWORD PTR _Tmp$5[rsp]

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rcx, rbx
	mov	rdx, rdi
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	mov	rcx, rax

; 57   :         return _Mycont->_Map[_Block][_Off];

	and	edi, 1
	mov	rax, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack

; 70   :     }

	mov	rbx, QWORD PTR [rsp+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rax, QWORD PTR [rax+rcx*8]
	lea	rax, QWORD PTR [rax+rdi*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack

; 70   :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?top@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::top
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stack
;	COMDAT ?empty@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?empty@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEBA_NXZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::empty, COMDAT

; 61   :         return c.empty();

	jmp	?empty@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEBA_NXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty
?empty@?$stack@PEAVValue@Json@@V?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@@std@@QEBA_NXZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::empty
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??0?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
this$ = 48
??0?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA@XZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::deque<Json::Value *,std::allocator<Json::Value *> >, COMDAT

; 595  :     deque() : _Mypair(_Zero_then_variadic_args_t()) {

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1088 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

	xor	ebp, ebp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 595  :     deque() : _Mypair(_Zero_then_variadic_args_t()) {

	mov	rsi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1088 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

	mov	QWORD PTR [rcx], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 543  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

	mov	QWORD PTR [rcx+8], rbp
	mov	QWORD PTR [rcx+16], rbp
	mov	QWORD PTR [rcx+24], rbp
	mov	QWORD PTR [rcx+32], rbp

; 596  :         _Get_data()._Alloc_proxy(static_cast<_Alproxy_ty>(_Getal()));

	call	?_Getal@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$allocator@PEAVValue@Json@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0PEAVValue@Json@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@PEAVValue@Json@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Json::Value *>
	mov	rcx, rsi
	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	lea	ecx, QWORD PTR [rbp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 596  :         _Get_data()._Alloc_proxy(static_cast<_Alproxy_ty>(_Getal()));

	mov	rdi, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	lea	ecx, QWORD PTR [rbp+16]

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	call	??2@YAPEAX_KPEAX@Z			; operator new

; 1080 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

	mov	QWORD PTR [rax+8], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 597  :     }

	mov	rbp, QWORD PTR [rsp+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1080 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

	mov	QWORD PTR [rax], rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 597  :     }

	mov	rax, rsi
	mov	rsi, QWORD PTR [rsp+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1100 :         _Myproxy            = _New_proxy;

	mov	QWORD PTR [rdi], rbx

; 1101 :         _New_proxy->_Mycont = this;

	mov	QWORD PTR [rbx], rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 597  :     }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA@XZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::deque<Json::Value *,std::allocator<Json::Value *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
this$ = 96
_Count$dead$ = 104
_Almap$ = 104
$T1 = 112
$T2 = 120
?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap, COMDAT

; 1426 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

$LN66:
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbp, rcx

; 1427 :         static_assert(1 < _DEQUEMAPSIZ, "The _Xlen() test should always be performed.");
; 1428 : 
; 1429 :         _Alpty _Almap(_Getal());

	call	?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR _Almap$[rsp]
	call	??$?0VErrorInfo@Reader@Json@@@?$allocator@PEAVErrorInfo@Reader@Json@@@std@@QEAA@AEBV?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::allocator<Json::Reader::ErrorInfo *>::allocator<Json::Reader::ErrorInfo *><Json::Reader::ErrorInfo>

; 1430 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

	mov	rcx, rbp
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	cmp	QWORD PTR [rax], 0
	jbe	SHORT $LN10@Growmap
	mov	rcx, rbp
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	mov	rbx, QWORD PTR [rax]
	jmp	SHORT $LN61@Growmap
$LN10@Growmap:
	mov	ebx, 1
$LN61@Growmap:
	mov	rdi, 288230376151711743			; 03ffffffffffffffH
	npad	5
$LL2@Growmap:

; 1431 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _DEQUEMAPSIZ) {

	mov	rcx, rbp
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	mov	rcx, rbx
	sub	rcx, QWORD PTR [rax]
	cmp	rcx, 1
	jb	SHORT $LN4@Growmap
	cmp	rbx, 8
	jae	SHORT $LN3@Growmap
$LN4@Growmap:

; 1005 :         return _Min_value(

	mov	QWORD PTR $T1[rsp], rdi
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	lea	rdx, QWORD PTR $T1[rsp]
	mov	QWORD PTR $T2[rsp], rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z	; std::_Min_value<unsigned __int64>

; 1432 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1433 :             if (max_size() / _DEQUESIZ - _Newsize < _Newsize) {

	mov	rcx, QWORD PTR [rax]
	sub	rcx, rbx
	cmp	rcx, rbx
	jb	$LN54@Growmap

; 1435 :             }
; 1436 : 
; 1437 :             _Newsize *= 2;

	add	rbx, rbx

; 1438 :         }

	jmp	SHORT $LL2@Growmap
$LN3@Growmap:
	mov	QWORD PTR [rsp+96], rsi

; 1439 :         _Count = _Newsize - _Mapsize();

	mov	rcx, rbp
	mov	QWORD PTR [rsp+56], r12
	mov	QWORD PTR [rsp+48], r13
	mov	QWORD PTR [rsp+40], r14
	mov	QWORD PTR [rsp+32], r15
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize

; 1440 : 
; 1441 :         size_type _Myboff = _Myoff() / _DEQUESIZ;

	mov	rcx, rbp
	sub	rbx, QWORD PTR [rax]
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff

; 1442 :         _Mapptr _Newmap   = _Almap.allocate(_Mapsize() + _Count);

	mov	rcx, rbp
	mov	r13, QWORD PTR [rax]
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	mov	rcx, QWORD PTR [rax]
	add	rcx, rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1445 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

	mov	rcx, rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	r14, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1445 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	mov	rcx, rbp
	mov	rdi, QWORD PTR [rax]
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rcx, QWORD PTR [rax]
	lea	rsi, QWORD PTR [rcx+rdi*8]
	mov	rcx, rbp
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	lea	r15, QWORD PTR [r13*8]
	lea	rdi, QWORD PTR [r15+r14]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1445 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

	mov	rdx, QWORD PTR [rax]
	add	rdx, r15
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3311 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rsi, rdx

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, rsi
	call	memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1446 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

	mov	rcx, rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3313 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

	lea	r12, QWORD PTR [rsi+rdi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1446 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rcx, rbp
	mov	rdi, QWORD PTR [rax]
	cmp	r13, rbx
	ja	SHORT $LN6@Growmap

; 1447 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

	add	rdi, r15
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, r12
	mov	rdx, QWORD PTR [rax]
	sub	rdi, rdx
	mov	r8, rdi
	call	memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1818 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	r8, rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3313 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

	lea	rcx, QWORD PTR [rdi+r12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1818 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	sub	r8, r13
	xor	edx, edx
	shl	r8, 3
	call	memset
	mov	r8, r15
	mov	rcx, r14
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1450 :         } else { // increment not greater than offset of initial block

	jmp	SHORT $LN63@Growmap
$LN6@Growmap:

; 1451 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

	lea	rsi, QWORD PTR [rbx*8]
	add	rdi, rsi
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, r12
	mov	rdx, QWORD PTR [rax]
	sub	rdi, rdx
	mov	r8, rdi
	call	memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1452 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

	mov	rcx, rbp
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rcx, rbp
	mov	rdi, QWORD PTR [rax]
	add	rdi, r15
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, r14
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1452 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

	mov	rdx, QWORD PTR [rax]
	add	rdx, rsi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3311 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rdi, rdx

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, rdi
	call	memmove

; 3313 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

	lea	rcx, QWORD PTR [rdi+r14]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1818 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	r8, rsi
$LN63@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1456 :         _Destroy_range(_Map() + _Myboff, _Map() + _Mapsize());

	xor	edx, edx
	call	memset
	mov	rcx, rbp
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	mov	rcx, rbp
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rcx, rbp
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map

; 1457 :         if (_Map() != _Mapptr()) {

	mov	rcx, rbp
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	r15, QWORD PTR [rsp+32]
	mov	r13, QWORD PTR [rsp+48]
	mov	r12, QWORD PTR [rsp+56]
	cmp	QWORD PTR [rax], 0
	mov	rsi, QWORD PTR [rsp+96]
	je	SHORT $LN8@Growmap

; 1458 :             _Almap.deallocate(_Map(), _Mapsize()); // free storage for old

	mov	rcx, rbp
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	mov	rcx, rbp
	mov	rdi, QWORD PTR [rax]
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	r8, rdi
	lea	rcx, QWORD PTR _Almap$[rsp]
	mov	rdx, QWORD PTR [rax]
	call	?deallocate@?$allocator@PEAVErrorInfo@Reader@Json@@@std@@QEAAXQEAPEAVErrorInfo@Reader@Json@@_K@Z ; std::allocator<Json::Reader::ErrorInfo *>::deallocate
$LN8@Growmap:

; 1459 :         }
; 1460 : 
; 1461 :         _Map() = _Newmap; // point at new

	mov	rcx, rbp
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map

; 1462 :         _Mapsize() += _Count;

	mov	rcx, rbp
	mov	QWORD PTR [rax], r14
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	mov	r14, QWORD PTR [rsp+40]
	add	QWORD PTR [rax], rbx

; 1463 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rbp
	pop	rbx
	ret	0
$LN54@Growmap:

; 1434 :                 _Xlen(); // result too long

	call	?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Xlen
	int	3
$LN62@Growmap:
?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QEAAPEAVErrorInfo@Reader@Json@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$dead$ = 56
?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QEAAPEAVErrorInfo@Reader@Json@@_K@Z PROC ; std::allocator<Json::Reader::ErrorInfo>::allocate, COMDAT

; 783  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN4:
	sub	rsp, 40					; 00000028H

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z	; std::_Get_size_of_n<64>
	mov	rcx, rax

; 785  :     }

	add	rsp, 40					; 00000028H

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	jmp	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QEAAPEAVErrorInfo@Reader@Json@@_K@Z ENDP ; std::allocator<Json::Reader::ErrorInfo>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ
_TEXT	SEGMENT
_Tmp$4 = 32
$T1 = 32
this$ = 64
?back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::back, COMDAT

; 1063 :     _NODISCARD reference back() noexcept /* strengthened */ {

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rcx, rdi
	mov	QWORD PTR $T1[rsp], rax
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rcx, QWORD PTR [rax]
	add	rcx, QWORD PTR [rbx]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR $T1[rsp+8], rcx

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movaps	xmm0, XMMWORD PTR $T1[rsp]
	movdqa	XMMWORD PTR _Tmp$4[rsp], xmm0

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rbx, QWORD PTR _Tmp$4[rsp]

; 97   :         _Myoff -= _Off;

	lea	rdi, QWORD PTR [rcx-1]

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rcx, rbx
	mov	rdx, rdi
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock
	mov	rcx, rax

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;
; 57   :         return _Mycont->_Map[_Block][_Off];

	and	edi, 1
	mov	rax, QWORD PTR [rbx+8]

; 1064 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1065 :         _STL_VERIFY(!empty(), "back() called on empty deque");
; 1066 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1067 : 
; 1068 :         return *(_Unchecked_end() - 1);
; 1069 :     }

	mov	rbx, QWORD PTR [rsp+64]

; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rax, QWORD PTR [rax+rcx*8]
	lea	rax, QWORD PTR [rax+rdi*8]

; 1064 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1065 :         _STL_VERIFY(!empty(), "back() called on empty deque");
; 1066 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1067 : 
; 1068 :         return *(_Unchecked_end() - 1);
; 1069 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAAEAPEAVValue@Json@@XZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?push_back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::push_back, COMDAT

; 795  :     void push_back(_Ty&& _Val) {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r15, rdx
	mov	rdi, rcx

; 796  :         _Orphan_all();

	call	?_Orphan_all@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Orphan_all

; 1115 :         _PUSH_BACK_BEGIN;

	mov	rcx, rdi
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	movzx	r8d, BYTE PTR [rbx]
	add	r8b, BYTE PTR [rax]
	test	r8b, 1
	jne	SHORT $LN4@push_back
	mov	rcx, rdi
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rcx, rdi
	mov	rbx, QWORD PTR [rax]
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	lea	rcx, QWORD PTR [rbx+2]
	shr	rcx, 1
	cmp	QWORD PTR [rax], rcx
	ja	SHORT $LN4@push_back
	mov	rcx, rdi
	call	?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap
$LN4@push_back:
	mov	rcx, rdi
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	mov	rcx, QWORD PTR [rax]
	lea	rcx, QWORD PTR [rcx*2-1]
	and	QWORD PTR [rbx], rcx
	mov	rcx, rdi
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rsi, QWORD PTR [rbx]
	mov	rcx, rdi
	add	rsi, QWORD PTR [rax]
	mov	rdx, rsi
	call	?_Getblock@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBA_K_K@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getblock
	mov	rcx, rdi
	lea	r14, QWORD PTR [rax*8]
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR [r14+rax], 0
	jne	SHORT $LN5@push_back
	mov	rcx, rdi
	call	?_Getal@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$allocator@PEAVValue@Json@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 2
	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1115 :         _PUSH_BACK_BEGIN;

	mov	rcx, rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1115 :         _PUSH_BACK_BEGIN;

	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [r14+rcx], rbx
$LN5@push_back:

; 1116 :         _Alty_traits::construct(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ), _STD forward<_Tys>(_Vals)...);

	mov	rcx, rdi
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	and	esi, 1
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+r14]
	lea	rcx, QWORD PTR [rax+rsi*8]
	call	??$_Unfancy@PEAVValue@Json@@@std@@YAPEAPEAVValue@Json@@PEAPEAV12@@Z ; std::_Unfancy<Json::Value *>
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Getal@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$allocator@PEAVValue@Json@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	rdx, rbx
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rcx, QWORD PTR [r15]
	mov	QWORD PTR [rax], rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1117 :         _PUSH_BACK_END;

	mov	rcx, rdi
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize

; 797  :         _Emplace_back_internal(_STD move(_Val));
; 798  :     }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]

; 1117 :         _PUSH_BACK_END;

	inc	QWORD PTR [rax]

; 797  :         _Emplace_back_internal(_STD move(_Val));
; 798  :     }

	mov	r14, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	ret	0
?push_back@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAAX$$QEAPEAVValue@Json@@@Z ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBA?AV01@_J@Z
_TEXT	SEGMENT
_Tmp$ = 0
this$ = 32
__$ReturnUdt$ = 40
_Off$dead$ = 48
??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBA?AV01@_J@Z PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator-, COMDAT

; 215  :     _NODISCARD _Deque_unchecked_iterator operator-(const difference_type _Off) const {

$LN8:
	sub	rsp, 24

; 216  :         _Deque_unchecked_iterator _Tmp = *this;

	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR _Tmp$[rsp], xmm0

; 97   :         _Myoff -= _Off;

	psrldq	xmm0, 8
	movq	rax, xmm0
	dec	rax
	mov	QWORD PTR _Tmp$[rsp+8], rax

; 217  :         return _Tmp -= _Off;

	mov	rax, rdx
	movups	xmm0, XMMWORD PTR _Tmp$[rsp]
	movups	XMMWORD PTR [rdx], xmm0

; 218  :     }

	add	rsp, 24
	ret	0
??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBA?AV01@_J@Z ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEAPEAVValue@Json@@XZ
_TEXT	SEGMENT
this$ = 48
??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEAPEAVValue@Json@@XZ PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator*, COMDAT

; 170  :     _NODISCARD reference operator*() const {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, QWORD PTR [rcx+8]

; 170  :     _NODISCARD reference operator*() const {

	mov	rbx, rcx

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rcx, QWORD PTR [rcx]
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;

	mov	ecx, DWORD PTR [rbx+8]
	mov	r8, rax

; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rdx, QWORD PTR [rbx]
	and	ecx, 1
	mov	rax, QWORD PTR [rdx+8]
	mov	rax, QWORD PTR [rax+r8*8]
	lea	rax, QWORD PTR [rax+rcx*8]

; 171  :         return const_cast<reference>(_Mybase::operator*());
; 172  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEAPEAVValue@Json@@XZ ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAXXZ
_TEXT	SEGMENT
this$dead$ = 48
?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAXXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Xlen, COMDAT

; 1418 :     [[noreturn]] void _Xlen() const {

$LN4:
	sub	rsp, 40					; 00000028H

; 1419 :         _Xlength_error("deque<T> too long");

	lea	rcx, OFFSET FLAT:??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN3@Xlen:
?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAXXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 48
$T1 = 48
$T2 = 56
?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::max_size, COMDAT

; 1004 :     _NODISCARD size_type max_size() const noexcept {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 1005 :         return _Min_value(

	mov	rax, 288230376151711743			; 03ffffffffffffffH
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	lea	rdx, QWORD PTR $T1[rsp]
	mov	QWORD PTR $T2[rsp], rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z	; std::_Min_value<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1006 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1007 :     }

	add	rsp, 40					; 00000028H
	ret	0
?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QEBA_KXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?allocate@?$allocator@PEAVErrorInfo@Reader@Json@@@std@@QEAAPEAPEAVErrorInfo@Reader@Json@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$allocator@PEAVErrorInfo@Reader@Json@@@std@@QEAAPEAPEAVErrorInfo@Reader@Json@@_K@Z PROC ; std::allocator<Json::Reader::ErrorInfo *>::allocate, COMDAT

; 783  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN4:
	sub	rsp, 40					; 00000028H

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, rdx
	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax

; 785  :     }

	add	rsp, 40					; 00000028H

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	jmp	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
?allocate@?$allocator@PEAVErrorInfo@Reader@Json@@@std@@QEAAPEAPEAVErrorInfo@Reader@Json@@_K@Z ENDP ; std::allocator<Json::Reader::ErrorInfo *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?_Unchecked_end@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?_Unchecked_end@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@2@XZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Unchecked_end, COMDAT

; 921  :     _Unchecked_iterator _Unchecked_end() noexcept {

$LN9:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	r14, rdx
	mov	rdi, rcx

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

	call	?_Get_data@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Get_data
	mov	rcx, rdi
	mov	rsi, rax
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize

; 923  :     }

	mov	rdi, QWORD PTR [rsp+64]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR [r14], rsi

; 923  :     }

	mov	rsi, QWORD PTR [rsp+56]
	mov	rcx, QWORD PTR [rax]
	mov	rax, r14
	add	rcx, QWORD PTR [rbx]
	mov	rbx, QWORD PTR [rsp+48]

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR [r14+8], rcx

; 923  :     }

	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
?_Unchecked_end@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@2@XZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 8
__param0$ = 16
__param1$ = 24
??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >, COMDAT

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR [rcx], r8
	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	ret	0
??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??Z?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
_Off$dead$ = 16
??Z?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator-=, COMDAT

; 97   :         _Myoff -= _Off;

	dec	QWORD PTR [rcx+8]

; 211  :         _Mybase::operator-=(_Off);
; 212  :         return *this;

	mov	rax, rcx

; 213  :     }

	ret	0
??Z?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator-=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEBQEAVValue@Json@@XZ
_TEXT	SEGMENT
this$ = 48
??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEBQEAVValue@Json@@XZ PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator*, COMDAT

; 54   :     _NODISCARD reference operator*() const {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

	mov	rdx, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	rcx, QWORD PTR [rcx]
	call	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Getblock

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;

	mov	ecx, DWORD PTR [rbx+8]
	mov	r8, rax

; 57   :         return _Mycont->_Map[_Block][_Off];

	mov	rdx, QWORD PTR [rbx]
	and	ecx, 1
	mov	rax, QWORD PTR [rdx+8]
	mov	rax, QWORD PTR [rax+r8*8]
	lea	rax, QWORD PTR [rax+rcx*8]

; 58   :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEBAAEBQEAVValue@Json@@XZ ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
_Pdeque$ = 24
??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >, COMDAT

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

	mov	QWORD PTR [rcx], r8
	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	ret	0
??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAAEBV?$allocator@VErrorInfo@Reader@Json@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAAEBV?$allocator@VErrorInfo@Reader@Json@@@2@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal, COMDAT

; 1522 :         return _Mypair._Get_first();

	mov	rax, rcx

; 1523 :     }

	ret	0
?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBAAEBV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SA_KAEBV?$allocator@VErrorInfo@Reader@Json@@@2@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
?max_size@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SA_KAEBV?$allocator@VErrorInfo@Reader@Json@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<Json::Reader::ErrorInfo> >::max_size, COMDAT

; 680  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 288230376151711743			; 03ffffffffffffffH

; 681  :     }

	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SA_KAEBV?$allocator@VErrorInfo@Reader@Json@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Json::Reader::ErrorInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??Z?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
_Off$dead$ = 16
??Z?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator-=, COMDAT

; 97   :         _Myoff -= _Off;

	dec	QWORD PTR [rcx+8]

; 98   :         return *this;

	mov	rax, rcx

; 99   :     }

	ret	0
??Z?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >::operator-=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@VErrorInfo@Reader@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@VErrorInfo@Reader@Json@@@std@@@2@$00@std@@QEBAAEBV?$allocator@VErrorInfo@Reader@Json@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@VErrorInfo@Reader@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@VErrorInfo@Reader@Json@@@std@@@2@$00@std@@QEBAAEBV?$allocator@VErrorInfo@Reader@Json@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Json::Reader::ErrorInfo>,std::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >,1>::_Get_first, COMDAT

; 1340 :         return *this;

	mov	rax, rcx

; 1341 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@VErrorInfo@Reader@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@VErrorInfo@Reader@Json@@@std@@@2@$00@std@@QEBAAEBV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Json::Reader::ErrorInfo>,std::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??$_Emplace_back_internal@AEBVErrorInfo@Reader@Json@@@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAXAEBVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
this$ = 48
<_Vals_0>$ = 56
??$_Emplace_back_internal@AEBVErrorInfo@Reader@Json@@@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAXAEBVErrorInfo@Reader@Json@@@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Emplace_back_internal<Json::Reader::ErrorInfo const &>, COMDAT

; 1114 :     void _Emplace_back_internal(_Tys&&... _Vals) {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rsi, rdx
	mov	rdi, rcx

; 1115 :         _PUSH_BACK_BEGIN;

	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rcx, rdi
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rcx, rdi
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rcx, rdi
	mov	rbx, QWORD PTR [rax]
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	lea	r8, QWORD PTR [rbx+1]
	cmp	QWORD PTR [rax], r8
	ja	SHORT $LN2@Emplace_ba
	mov	rcx, rdi
	call	?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAX_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
$LN2@Emplace_ba:
	mov	rcx, rdi
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mapsize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mapsize
	mov	rcx, QWORD PTR [rax]
	dec	rcx
	and	QWORD PTR [rbx], rcx
	mov	rcx, rdi
	call	?_Myoff@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize
	mov	rdx, QWORD PTR [rbx]
	mov	rcx, rdi
	add	rdx, QWORD PTR [rax]
	call	?_Getblock@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEBA_K_K@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getblock
	mov	rcx, rdi
	lea	r14, QWORD PTR [rax*8]
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR [r14+rax], 0
	jne	SHORT $LN3@Emplace_ba
	mov	rcx, rdi
	call	?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z	; std::_Get_size_of_n<64>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1115 :         _PUSH_BACK_BEGIN;

	mov	rcx, rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1115 :         _PUSH_BACK_BEGIN;

	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rdx, QWORD PTR [rax]
	mov	QWORD PTR [r14+rdx], rbx
$LN3@Emplace_ba:

; 1116 :         _Alty_traits::construct(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ), _STD forward<_Tys>(_Vals)...);

	mov	rcx, rdi
	call	?_Map@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAPEAPEAVErrorInfo@Reader@Json@@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Map
	mov	rcx, QWORD PTR [rax]
	mov	rcx, QWORD PTR [r14+rcx]
	call	??$_Unfancy@VErrorInfo@Reader@Json@@@std@@YAPEAVErrorInfo@Reader@Json@@PEAV123@@Z ; std::_Unfancy<Json::Reader::ErrorInfo>
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Getal@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEAV?$allocator@VErrorInfo@Reader@Json@@@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	rdx, rbx
	mov	ecx, 64					; 00000040H
	call	??2@YAPEAX_KPEAX@Z			; operator new
	movups	xmm0, XMMWORD PTR [rsi]
	lea	rdx, QWORD PTR [rsi+24]
	mov	rbx, rax
	movups	XMMWORD PTR [rax], xmm0
	lea	rcx, QWORD PTR [rax+24]
	movsd	xmm1, QWORD PTR [rsi+16]
	movsd	QWORD PTR [rax+16], xmm1
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rcx, QWORD PTR [rsi+56]
	mov	QWORD PTR [rbx+56], rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1117 :         _PUSH_BACK_END;

	mov	rcx, rdi
	call	?_Mysize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Mysize

; 1118 :     }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	inc	QWORD PTR [rax]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
??$_Emplace_back_internal@AEBVErrorInfo@Reader@Json@@@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@AEAAXAEBVErrorInfo@Reader@Json@@@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Emplace_back_internal<Json::Reader::ErrorInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$construct@VErrorInfo@Reader@Json@@$$V@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
__formal$dead$ = 48
_Ptr$ = 56
??$construct@VErrorInfo@Reader@Json@@$$V@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@@Z PROC ; std::_Default_allocator_traits<std::allocator<Json::Reader::ErrorInfo> >::construct<Json::Reader::ErrorInfo>, COMDAT

; 670  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN8:
	sub	rsp, 40					; 00000028H

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, 64					; 00000040H
	call	??2@YAPEAX_KPEAX@Z			; operator new
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [rax], xmm0
	lea	rcx, QWORD PTR [rax+24]
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0

; 672  :     }

	add	rsp, 40					; 00000028H

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	jmp	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
??$construct@VErrorInfo@Reader@Json@@$$V@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Json::Reader::ErrorInfo> >::construct<Json::Reader::ErrorInfo>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@VErrorInfo@Reader@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@VErrorInfo@Reader@Json@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
??$?0$$V@?$_Compressed_pair@V?$allocator@VErrorInfo@Reader@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@VErrorInfo@Reader@Json@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<Json::Reader::ErrorInfo>,std::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >,1>::_Compressed_pair<std::allocator<Json::Reader::ErrorInfo>,std::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >,1><>, COMDAT

; 1088 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 543  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+32], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1328 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	rax, rcx
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@VErrorInfo@Reader@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@VErrorInfo@Reader@Json@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<Json::Reader::ErrorInfo>,std::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >,1>::_Compressed_pair<std::allocator<Json::Reader::ErrorInfo>,std::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Al$dead$ = 56
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1097 :     void _Alloc_proxy(_Alloc&& _Al) {

$LN11:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 16
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	mov	ecx, 16

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	call	??2@YAPEAX_KPEAX@Z			; operator new

; 1080 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

	mov	QWORD PTR [rax], rdi
	mov	QWORD PTR [rax+8], 0

; 1098 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1099 :         _Construct_in_place(*_New_proxy, this);
; 1100 :         _Myproxy            = _New_proxy;

	mov	QWORD PTR [rdi], rbx

; 1101 :         _New_proxy->_Mycont = this;

	mov	QWORD PTR [rbx], rdi

; 1102 :     }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$move@AEAPEAVValue@Json@@@std@@YA$$QEAPEAVValue@Json@@AEAPEAV12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAPEAVValue@Json@@@std@@YA$$QEAPEAVValue@Json@@AEAPEAV12@@Z PROC ; std::move<Json::Value * &>, COMDAT

; 1439 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, rcx

; 1440 : }

	ret	0
??$move@AEAPEAVValue@Json@@@std@@YA$$QEAPEAVValue@Json@@AEAPEAV12@@Z ENDP ; std::move<Json::Value * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@PEAVValue@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
??$?0$$V@?$_Compressed_pair@V?$allocator@PEAVValue@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<Json::Value *>,std::_Deque_val<std::_Deque_simple_types<Json::Value *> >,1>::_Compressed_pair<std::allocator<Json::Value *>,std::_Deque_val<std::_Deque_simple_types<Json::Value *> >,1><>, COMDAT

; 1088 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 543  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+32], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1328 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	rax, rcx
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@PEAVValue@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<Json::Value *>,std::_Deque_val<std::_Deque_simple_types<Json::Value *> >,1>::_Compressed_pair<std::allocator<Json::Value *>,std::_Deque_val<std::_Deque_simple_types<Json::Value *> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$uninitialized_copy@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0PEAPEAV123@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$uninitialized_copy@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0PEAPEAV123@@Z PROC ; std::uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>, COMDAT

; 1582 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, r8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3311 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rbx, rcx

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, rcx
	mov	r8, rbx
	mov	rcx, rdi
	call	memmove

; 3313 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

	lea	rax, QWORD PTR [rbx+rdi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1601 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$uninitialized_copy@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0PEAPEAV123@@Z ENDP ; std::uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
;	COMDAT ??$_Idl_distance@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YA_JAEBQEAPEAVErrorInfo@Reader@Json@@0@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
??$_Idl_distance@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YA_JAEBQEAPEAVErrorInfo@Reader@Json@@0@Z PROC ; std::_Idl_distance<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>, COMDAT

; 1348 :     // tries to get the distance between _First and _Last if they are random-access iterators
; 1349 :     if constexpr (_Is_random_iter_v<_Iter>) {
; 1350 :         return static_cast<_Iter_diff_t<_Checked>>(_Last - _First);

	mov	rax, QWORD PTR [rdx]
	sub	rax, QWORD PTR [rcx]
	sar	rax, 3

; 1351 :     } else {
; 1352 :         (void) _First; // TRANSITION, VSO#486357
; 1353 :         (void) _Last; // TRANSITION, VSO#486357
; 1354 :         return _Distance_unknown{};
; 1355 :     }
; 1356 : }

	ret	0
??$_Idl_distance@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YA_JAEBQEAPEAVErrorInfo@Reader@Json@@0@Z ENDP ; std::_Idl_distance<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PEAPEAVErrorInfo@Reader@Json@@_K@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@_K@Z
_TEXT	SEGMENT
_UFirst$ = 48
_Count$ = 56
??$_Uninitialized_value_construct_n_unchecked1@PEAPEAVErrorInfo@Reader@Json@@_K@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@_K@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<Json::Reader::ErrorInfo * *,unsigned __int64>, COMDAT

; 1876 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1877 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1878 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1879 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1880 :         return _Zero_range(_UFirst, _UFirst + _Count);

	lea	rbx, QWORD PTR [rdx*8]
	mov	rdi, rcx

; 1818 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	r8, rbx
	xor	edx, edx
	call	memset

; 1877 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1878 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1879 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1880 :         return _Zero_range(_UFirst, _UFirst + _Count);

	lea	rax, QWORD PTR [rbx+rdi]

; 1881 :     } else {
; 1882 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1883 :         for (; 0 < _Count; --_Count) {
; 1884 :             _Backout._Emplace_back();
; 1885 :         }
; 1886 : 
; 1887 :         return _Backout._Release();
; 1888 :     }
; 1889 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n_unchecked1@PEAPEAVErrorInfo@Reader@Json@@_K@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@_K@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<Json::Reader::ErrorInfo * *,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$_Destroy_range@PEAPEAVErrorInfo@Reader@Json@@@std@@YAXPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
??$_Destroy_range@PEAPEAVErrorInfo@Reader@Json@@@std@@YAXPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@@Z PROC ; std::_Destroy_range<Json::Reader::ErrorInfo * *>, COMDAT

; 960  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 961  :     if
; 962  :         _CONSTEXPR_IF(is_trivially_destructible_v<_Iter_value_t<_NoThrowFwdIt>>) {
; 963  :             (void) _First;
; 964  :             (void) _Last;
; 965  :         }
; 966  :     else {
; 967  :         for (; _First != _Last; ++_First) {
; 968  :             _Destroy_in_place(*_First);
; 969  :         }
; 970  :     }
; 971  : }

	ret	0
??$_Destroy_range@PEAPEAVErrorInfo@Reader@Json@@@std@@YAXPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@@Z ENDP ; std::_Destroy_range<Json::Reader::ErrorInfo * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??$_Emplace_back_internal@PEAVValue@Json@@@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX$$QEAPEAVValue@Json@@@Z
_TEXT	SEGMENT
this$ = 48
<_Vals_0>$ = 56
??$_Emplace_back_internal@PEAVValue@Json@@@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX$$QEAPEAVValue@Json@@@Z PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Emplace_back_internal<Json::Value *>, COMDAT

; 1114 :     void _Emplace_back_internal(_Tys&&... _Vals) {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r15, rdx
	mov	rdi, rcx

; 1115 :         _PUSH_BACK_BEGIN;

	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	movzx	r8d, BYTE PTR [rax]
	add	r8b, BYTE PTR [rbx]
	test	r8b, 1
	jne	SHORT $LN2@Emplace_ba
	mov	rcx, rdi
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rcx, rdi
	mov	rbx, QWORD PTR [rax]
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	lea	rcx, QWORD PTR [rbx+2]
	shr	rcx, 1
	cmp	QWORD PTR [rax], rcx
	ja	SHORT $LN2@Emplace_ba
	mov	rcx, rdi
	call	?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap
$LN2@Emplace_ba:
	mov	rcx, rdi
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	mov	rcx, QWORD PTR [rax]
	lea	rcx, QWORD PTR [rcx*2-1]
	and	QWORD PTR [rbx], rcx
	mov	rcx, rdi
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize
	mov	rcx, rdi
	mov	rsi, QWORD PTR [rax]
	add	rsi, QWORD PTR [rbx]
	mov	rdx, rsi
	call	?_Getblock@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBA_K_K@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getblock
	mov	rcx, rdi
	lea	r14, QWORD PTR [rax*8]
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR [r14+rax], 0
	jne	SHORT $LN3@Emplace_ba
	mov	rcx, rdi
	call	?_Getal@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$allocator@PEAVValue@Json@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 2
	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1115 :         _PUSH_BACK_BEGIN;

	mov	rcx, rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1115 :         _PUSH_BACK_BEGIN;

	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [r14+rcx], rbx
$LN3@Emplace_ba:

; 1116 :         _Alty_traits::construct(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ), _STD forward<_Tys>(_Vals)...);

	mov	rcx, rdi
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	and	esi, 1
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+r14]
	lea	rcx, QWORD PTR [rax+rsi*8]
	call	??$_Unfancy@PEAVValue@Json@@@std@@YAPEAPEAVValue@Json@@PEAPEAV12@@Z ; std::_Unfancy<Json::Value *>
	mov	rcx, rdi
	mov	rbx, rax
	call	?_Getal@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$allocator@PEAVValue@Json@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getal
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	rdx, rbx
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rcx, QWORD PTR [r15]
	mov	QWORD PTR [rax], rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1117 :         _PUSH_BACK_END;

	mov	rcx, rdi
	call	?_Mysize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mysize

; 1118 :     }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	inc	QWORD PTR [rax]
	mov	r14, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	ret	0
??$_Emplace_back_internal@PEAVValue@Json@@@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX$$QEAPEAVValue@Json@@@Z ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Emplace_back_internal<Json::Value *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef
;	COMDAT ??$addressof@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@YAPEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@YAPEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >, COMDAT

; 275  :     return __builtin_addressof(_Val);

	mov	rax, rcx

; 276  : }

	ret	0
??$addressof@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@@std@@YAPEAV?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_Deque_val<std::_Deque_simple_types<Json::Value *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$dead$ = 8
_Count$dead$ = 16
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 16
	jmp	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??0?$_Deque_val@U?$_Deque_simple_types@VErrorInfo@Reader@Json@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Deque_val@U?$_Deque_simple_types@VErrorInfo@Reader@Json@@@std@@@std@@QEAA@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >, COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1088 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 543  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+32], rax
	mov	rax, rcx
	ret	0
??0?$_Deque_val@U?$_Deque_simple_types@VErrorInfo@Reader@Json@@@std@@@std@@QEAA@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >::_Deque_val<std::_Deque_simple_types<Json::Reader::ErrorInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??0?$allocator@VErrorInfo@Reader@Json@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@VErrorInfo@Reader@Json@@@std@@QEAA@XZ PROC ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>, COMDAT

; 772  :     constexpr allocator() noexcept {}

	mov	rax, rcx
	ret	0
??0?$allocator@VErrorInfo@Reader@Json@@@std@@QEAA@XZ ENDP ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ??0?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEAA@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Deque_val<std::_Deque_simple_types<Json::Value *> >, COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1088 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 543  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+32], rax
	mov	rax, rcx
	ret	0
??0?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@std@@QEAA@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<Json::Value *> >::_Deque_val<std::_Deque_simple_types<Json::Value *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
this$ = 96
_Count$dead$ = 104
_Almap$ = 104
$T1 = 112
$T2 = 120
?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap, COMDAT

; 1426 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

$LN66:
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbp, rcx

; 1427 :         static_assert(1 < _DEQUEMAPSIZ, "The _Xlen() test should always be performed.");
; 1428 : 
; 1429 :         _Alpty _Almap(_Getal());

	call	?_Getal@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAV?$allocator@PEAVValue@Json@@@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR _Almap$[rsp]
	call	??$?0PEAVValue@Json@@@?$allocator@PEAPEAVValue@Json@@@std@@QEAA@AEBV?$allocator@PEAVValue@Json@@@1@@Z ; std::allocator<Json::Value * *>::allocator<Json::Value * *><Json::Value *>

; 1430 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

	mov	rcx, rbp
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	cmp	QWORD PTR [rax], 0
	jbe	SHORT $LN10@Growmap
	mov	rcx, rbp
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	mov	rbx, QWORD PTR [rax]
	jmp	SHORT $LN61@Growmap
$LN10@Growmap:
	mov	ebx, 1
$LN61@Growmap:
	mov	rdi, 2305843009213693951		; 1fffffffffffffffH
	npad	5
$LL2@Growmap:

; 1431 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _DEQUEMAPSIZ) {

	mov	rcx, rbp
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	mov	rcx, rbx
	sub	rcx, QWORD PTR [rax]
	cmp	rcx, 1
	jb	SHORT $LN4@Growmap
	cmp	rbx, 8
	jae	SHORT $LN3@Growmap
$LN4@Growmap:

; 1005 :         return _Min_value(

	mov	QWORD PTR $T1[rsp], rdi
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	lea	rdx, QWORD PTR $T1[rsp]
	mov	QWORD PTR $T2[rsp], rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z	; std::_Min_value<unsigned __int64>

; 1432 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1433 :             if (max_size() / _DEQUESIZ - _Newsize < _Newsize) {

	mov	rcx, QWORD PTR [rax]
	shr	rcx, 1
	sub	rcx, rbx
	cmp	rcx, rbx
	jb	$LN54@Growmap

; 1435 :             }
; 1436 : 
; 1437 :             _Newsize *= 2;

	add	rbx, rbx

; 1438 :         }

	jmp	SHORT $LL2@Growmap
$LN3@Growmap:
	mov	QWORD PTR [rsp+96], rsi

; 1439 :         _Count = _Newsize - _Mapsize();

	mov	rcx, rbp
	mov	QWORD PTR [rsp+56], r12
	mov	QWORD PTR [rsp+48], r13
	mov	QWORD PTR [rsp+40], r14
	mov	QWORD PTR [rsp+32], r15
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize

; 1440 : 
; 1441 :         size_type _Myboff = _Myoff() / _DEQUESIZ;

	mov	rcx, rbp
	sub	rbx, QWORD PTR [rax]
	call	?_Myoff@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Myoff

; 1442 :         _Mapptr _Newmap   = _Almap.allocate(_Mapsize() + _Count);

	mov	rcx, rbp
	mov	r13, QWORD PTR [rax]
	shr	r13, 1
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	mov	rcx, QWORD PTR [rax]
	add	rcx, rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1445 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

	mov	rcx, rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	r14, rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1445 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	mov	rcx, rbp
	mov	rdi, QWORD PTR [rax]
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	mov	rcx, QWORD PTR [rax]
	lea	rsi, QWORD PTR [rcx+rdi*8]
	mov	rcx, rbp
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	lea	r15, QWORD PTR [r13*8]
	lea	rdi, QWORD PTR [r15+r14]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1445 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

	mov	rdx, QWORD PTR [rax]
	add	rdx, r15
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3311 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rsi, rdx

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, rsi
	call	memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1446 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

	mov	rcx, rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3313 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

	lea	r12, QWORD PTR [rsi+rdi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1446 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	mov	rcx, rbp
	mov	rdi, QWORD PTR [rax]
	cmp	r13, rbx
	ja	SHORT $LN6@Growmap

; 1447 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

	add	rdi, r15
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, r12
	mov	rdx, QWORD PTR [rax]
	sub	rdi, rdx
	mov	r8, rdi
	call	memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1818 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	r8, rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3313 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

	lea	rcx, QWORD PTR [rdi+r12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1818 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	sub	r8, r13
	xor	edx, edx
	shl	r8, 3
	call	memset
	mov	r8, r15
	mov	rcx, r14
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1450 :         } else { // increment not greater than offset of initial block

	jmp	SHORT $LN63@Growmap
$LN6@Growmap:

; 1451 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

	lea	rsi, QWORD PTR [rbx*8]
	add	rdi, rsi
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, r12
	mov	rdx, QWORD PTR [rax]
	sub	rdi, rdx
	mov	r8, rdi
	call	memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1452 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

	mov	rcx, rbp
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	mov	rcx, rbp
	mov	rdi, QWORD PTR [rax]
	add	rdi, r15
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, r14
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1452 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

	mov	rdx, QWORD PTR [rax]
	add	rdx, rsi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3311 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rdi, rdx

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, rdi
	call	memmove

; 3313 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

	lea	rcx, QWORD PTR [rdi+r14]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1818 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	r8, rsi
$LN63@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque

; 1456 :         _Destroy_range(_Map() + _Myboff, _Map() + _Mapsize());

	xor	edx, edx
	call	memset
	mov	rcx, rbp
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	mov	rcx, rbp
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	mov	rcx, rbp
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map

; 1457 :         if (_Map() != _Mapptr()) {

	mov	rcx, rbp
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	mov	r15, QWORD PTR [rsp+32]
	mov	r13, QWORD PTR [rsp+48]
	mov	r12, QWORD PTR [rsp+56]
	cmp	QWORD PTR [rax], 0
	mov	rsi, QWORD PTR [rsp+96]
	je	SHORT $LN8@Growmap

; 1458 :             _Almap.deallocate(_Map(), _Mapsize()); // free storage for old

	mov	rcx, rbp
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	mov	rcx, rbp
	mov	rdi, QWORD PTR [rax]
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map
	mov	r8, rdi
	lea	rcx, QWORD PTR _Almap$[rsp]
	mov	rdx, QWORD PTR [rax]
	call	?deallocate@?$allocator@PEAPEAVValue@Json@@@std@@QEAAXQEAPEAPEAVValue@Json@@_K@Z ; std::allocator<Json::Value * *>::deallocate
$LN8@Growmap:

; 1459 :         }
; 1460 : 
; 1461 :         _Map() = _Newmap; // point at new

	mov	rcx, rbp
	call	?_Map@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEAPEAPEAPEAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Map

; 1462 :         _Mapsize() += _Count;

	mov	rcx, rbp
	mov	QWORD PTR [rax], r14
	call	?_Mapsize@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAAEA_KXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Mapsize
	mov	r14, QWORD PTR [rsp+40]
	add	QWORD PTR [rax], rbx

; 1463 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rbp
	pop	rbx
	ret	0
$LN54@Growmap:

; 1434 :                 _Xlen(); // result too long

	call	?_Xlen@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBAXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Xlen
	int	3
$LN62@Growmap:
?_Growmap@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEAAX_K@Z ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?allocate@?$allocator@PEAVValue@Json@@@std@@QEAAPEAPEAVValue@Json@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$dead$ = 56
?allocate@?$allocator@PEAVValue@Json@@@std@@QEAAPEAPEAVValue@Json@@_K@Z PROC ; std::allocator<Json::Value *>::allocate, COMDAT

; 783  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN4:
	sub	rsp, 40					; 00000028H

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 2
	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax

; 785  :     }

	add	rsp, 40					; 00000028H

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	jmp	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
?allocate@?$allocator@PEAVValue@Json@@@std@@QEAAPEAPEAVValue@Json@@_K@Z ENDP ; std::allocator<Json::Value *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??0?$allocator@PEAVValue@Json@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@PEAVValue@Json@@@std@@QEAA@XZ PROC	; std::allocator<Json::Value *>::allocator<Json::Value *>, COMDAT

; 772  :     constexpr allocator() noexcept {}

	mov	rax, rcx
	ret	0
??0?$allocator@PEAVValue@Json@@@std@@QEAA@XZ ENDP	; std::allocator<Json::Value *>::allocator<Json::Value *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?_Xlen@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBAXXZ
_TEXT	SEGMENT
this$dead$ = 48
?_Xlen@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBAXXZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Xlen, COMDAT

; 1418 :     [[noreturn]] void _Xlen() const {

$LN4:
	sub	rsp, 40					; 00000028H

; 1419 :         _Xlength_error("deque<T> too long");

	lea	rcx, OFFSET FLAT:??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN3@Xlen:
?_Xlen@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBAXXZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?max_size@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 48
$T1 = 48
$T2 = 56
?max_size@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEBA_KXZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::max_size, COMDAT

; 1004 :     _NODISCARD size_type max_size() const noexcept {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 1005 :         return _Min_value(

	mov	rax, 2305843009213693951		; 1fffffffffffffffH
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	lea	rdx, QWORD PTR $T1[rsp]
	mov	QWORD PTR $T2[rsp], rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z	; std::_Min_value<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1006 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1007 :     }

	add	rsp, 40					; 00000028H
	ret	0
?max_size@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@QEBA_KXZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?allocate@?$allocator@PEAPEAVValue@Json@@@std@@QEAAPEAPEAPEAVValue@Json@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$allocator@PEAPEAVValue@Json@@@std@@QEAAPEAPEAPEAVValue@Json@@_K@Z PROC ; std::allocator<Json::Value * *>::allocate, COMDAT

; 783  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN4:
	sub	rsp, 40					; 00000028H

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, rdx
	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax

; 785  :     }

	add	rsp, 40					; 00000028H

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	jmp	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
?allocate@?$allocator@PEAPEAVValue@Json@@@std@@QEAAPEAPEAPEAVValue@Json@@_K@Z ENDP ; std::allocator<Json::Value * *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\deque
;	COMDAT ?_Getal@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBAAEBV?$allocator@PEAVValue@Json@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBAAEBV?$allocator@PEAVValue@Json@@@2@XZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getal, COMDAT

; 1522 :         return _Mypair._Get_first();

	mov	rax, rcx

; 1523 :     }

	ret	0
?_Getal@?$deque@PEAVValue@Json@@V?$allocator@PEAVValue@Json@@@std@@@std@@AEBAAEBV?$allocator@PEAVValue@Json@@@2@XZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@PEAVValue@Json@@@std@@@std@@SA_KAEBV?$allocator@PEAVValue@Json@@@2@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
?max_size@?$_Default_allocator_traits@V?$allocator@PEAVValue@Json@@@std@@@std@@SA_KAEBV?$allocator@PEAVValue@Json@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<Json::Value *> >::max_size, COMDAT

; 680  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 2305843009213693951		; 1fffffffffffffffH

; 681  :     }

	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@PEAVValue@Json@@@std@@@std@@SA_KAEBV?$allocator@PEAVValue@Json@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Json::Value *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PEAVValue@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@$00@std@@QEBAAEBV?$allocator@PEAVValue@Json@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@PEAVValue@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@$00@std@@QEBAAEBV?$allocator@PEAVValue@Json@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Json::Value *>,std::_Deque_val<std::_Deque_simple_types<Json::Value *> >,1>::_Get_first, COMDAT

; 1340 :         return *this;

	mov	rax, rcx

; 1341 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@PEAVValue@Json@@@std@@V?$_Deque_val@U?$_Deque_simple_types@PEAVValue@Json@@@std@@@2@$00@std@@QEBAAEBV?$allocator@PEAVValue@Json@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Json::Value *>,std::_Deque_val<std::_Deque_simple_types<Json::Value *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$forward@AEBVErrorInfo@Reader@Json@@@std@@YAAEBVErrorInfo@Reader@Json@@AEBV123@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBVErrorInfo@Reader@Json@@@std@@YAAEBVErrorInfo@Reader@Json@@AEBV123@@Z PROC ; std::forward<Json::Reader::ErrorInfo const &>, COMDAT

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1428 : }

	ret	0
??$forward@AEBVErrorInfo@Reader@Json@@@std@@YAAEBVErrorInfo@Reader@Json@@AEBV123@@Z ENDP ; std::forward<Json::Reader::ErrorInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$construct@VErrorInfo@Reader@Json@@AEBV123@@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@AEBV345@@Z
_TEXT	SEGMENT
__formal$dead$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@VErrorInfo@Reader@Json@@AEBV123@@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@AEBV345@@Z PROC ; std::_Default_allocator_traits<std::allocator<Json::Reader::ErrorInfo> >::construct<Json::Reader::ErrorInfo,Json::Reader::ErrorInfo const &>, COMDAT

; 670  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, 64					; 00000040H
	mov	rdi, r8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	movups	xmm0, XMMWORD PTR [rdi]
	lea	rdx, QWORD PTR [rdi+24]
	mov	rbx, rax
	movups	XMMWORD PTR [rax], xmm0
	lea	rcx, QWORD PTR [rax+24]
	movsd	xmm1, QWORD PTR [rdi+16]
	movsd	QWORD PTR [rax+16], xmm1
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rcx, QWORD PTR [rdi+56]
	mov	QWORD PTR [rbx+56], rcx

; 672  :     }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$construct@VErrorInfo@Reader@Json@@AEBV123@@?$_Default_allocator_traits@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@SAXAEAV?$allocator@VErrorInfo@Reader@Json@@@1@QEAVErrorInfo@Reader@Json@@AEBV345@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Json::Reader::ErrorInfo> >::construct<Json::Reader::ErrorInfo,Json::Reader::ErrorInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 289  :     return _Ptr;

	mov	rax, rcx

; 290  : }

	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
_Obj$ = 48
<_Args_0>$ = 56
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 202  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rcx
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new

; 1080 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], 0

; 204  :         _Ty(_STD forward<_Types>(_Args)...);
; 205  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
;	COMDAT ??$_Adl_verify_range@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAXAEBQEAPEAVErrorInfo@Reader@Json@@0@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
??$_Adl_verify_range@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAXAEBQEAPEAVErrorInfo@Reader@Json@@0@Z PROC ; std::_Adl_verify_range<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>, COMDAT

; 1081 :     // check that [_First, _Last) forms an iterator range
; 1082 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1083 :         _Verify_range(_First, _Last);
; 1084 :     } else {
; 1085 :         (void) _First; // TRANSITION, VSO#486357
; 1086 :         (void) _Last; // TRANSITION, VSO#486357
; 1087 :     }
; 1088 : }

	ret	0
??$_Adl_verify_range@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAXAEBQEAPEAVErrorInfo@Reader@Json@@0@Z ENDP ; std::_Adl_verify_range<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
;	COMDAT ??$_Get_unwrapped@PEAVErrorInfo@Reader@Json@@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Get_unwrapped@PEAVErrorInfo@Reader@Json@@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@@Z PROC ; std::_Get_unwrapped<Json::Reader::ErrorInfo *>, COMDAT

; 1140 :     return _Ptr;

	mov	rax, rcx

; 1141 : }

	ret	0
??$_Get_unwrapped@PEAVErrorInfo@Reader@Json@@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@@Z ENDP ; std::_Get_unwrapped<Json::Reader::ErrorInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
;	COMDAT ??$_Get_unwrapped_n@PEAVErrorInfo@Reader@Json@@_J$0A@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@_J@Z
_TEXT	SEGMENT
_Src$ = 8
__formal$dead$ = 16
??$_Get_unwrapped_n@PEAVErrorInfo@Reader@Json@@_J$0A@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@_J@Z PROC ; std::_Get_unwrapped_n<Json::Reader::ErrorInfo *,__int64,0>, COMDAT

; 1260 :     return _Src;

	mov	rax, rcx

; 1261 : }

	ret	0
??$_Get_unwrapped_n@PEAVErrorInfo@Reader@Json@@_J$0A@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@_J@Z ENDP ; std::_Get_unwrapped_n<Json::Reader::ErrorInfo *,__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
;	COMDAT ??$_Copy_memmove@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@00@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$_Copy_memmove@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@00@Z PROC ; std::_Copy_memmove<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>, COMDAT

; 3307 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) { // implement copy-like function as memmove

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, r8

; 3308 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 3309 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 3310 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 3311 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rbx, rcx

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, rcx
	mov	r8, rbx
	mov	rcx, rdi
	call	memmove

; 3313 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

	lea	rax, QWORD PTR [rbx+rdi]

; 3314 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@@std@@YAPEAPEAVErrorInfo@Reader@Json@@PEAPEAV123@00@Z ENDP ; std::_Copy_memmove<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
;	COMDAT ??$_Seek_wrapped@PEAVErrorInfo@Reader@Json@@@std@@YAXAEAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@@Z
_TEXT	SEGMENT
_It$ = 8
_UIt$ = 16
??$_Seek_wrapped@PEAVErrorInfo@Reader@Json@@@std@@YAXAEAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@@Z PROC ; std::_Seek_wrapped<Json::Reader::ErrorInfo *>, COMDAT

; 1300 :     _It = _UIt;

	mov	QWORD PTR [rcx], rdx

; 1301 : }

	ret	0
??$_Seek_wrapped@PEAVErrorInfo@Reader@Json@@@std@@YAXAEAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@@Z ENDP ; std::_Seek_wrapped<Json::Reader::ErrorInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$_Zero_range@PEAPEAVErrorInfo@Reader@Json@@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
??$_Zero_range@PEAPEAVErrorInfo@Reader@Json@@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0@Z PROC ; std::_Zero_range<Json::Reader::ErrorInfo * *>, COMDAT

; 1815 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 1816 :     char* const _First_ch = reinterpret_cast<char*>(_First);
; 1817 :     char* const _Last_ch  = reinterpret_cast<char*>(_Last);
; 1818 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	r8, rdx
	mov	rbx, rdx
	sub	r8, rcx
	xor	edx, edx
	call	memset

; 1819 :     return _Last;

	mov	rax, rbx

; 1820 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$_Zero_range@PEAPEAVErrorInfo@Reader@Json@@@std@@YAPEAPEAVErrorInfo@Reader@Json@@QEAPEAV123@0@Z ENDP ; std::_Zero_range<Json::Reader::ErrorInfo * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$forward@PEAVValue@Json@@@std@@YA$$QEAPEAVValue@Json@@AEAPEAV12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@PEAVValue@Json@@@std@@YA$$QEAPEAVValue@Json@@AEAPEAV12@@Z PROC ; std::forward<Json::Value *>, COMDAT

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1428 : }

	ret	0
??$forward@PEAVValue@Json@@@std@@YA$$QEAPEAVValue@Json@@AEAPEAV12@@Z ENDP ; std::forward<Json::Value *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$construct@PEAVValue@Json@@PEAV12@@?$_Default_allocator_traits@V?$allocator@PEAVValue@Json@@@std@@@std@@SAXAEAV?$allocator@PEAVValue@Json@@@1@QEAPEAVValue@Json@@$$QEAPEAV34@@Z
_TEXT	SEGMENT
__formal$dead$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@PEAVValue@Json@@PEAV12@@?$_Default_allocator_traits@V?$allocator@PEAVValue@Json@@@std@@@std@@SAXAEAV?$allocator@PEAVValue@Json@@@1@QEAPEAVValue@Json@@$$QEAPEAV34@@Z PROC ; std::_Default_allocator_traits<std::allocator<Json::Value *> >::construct<Json::Value *,Json::Value *>, COMDAT

; 670  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, 8
	mov	rbx, r8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 672  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$construct@PEAVValue@Json@@PEAV12@@?$_Default_allocator_traits@V?$allocator@PEAVValue@Json@@@std@@@std@@SAXAEAV?$allocator@PEAVValue@Json@@@1@QEAPEAVValue@Json@@$$QEAPEAV34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Json::Value *> >::construct<Json::Value *,Json::Value *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Count$dead$ = 8
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 29   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;
; 30   : 
; 31   :     if
; 32   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 33   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 34   :             if (_Count > _Max_possible) {
; 35   :                 _Throw_bad_array_new_length(); // multiply overflow
; 36   :             }
; 37   :         }
; 38   : 
; 39   :     return _Count * _Ty_size;

	mov	eax, 16

; 40   : }

	ret	0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$uninitialized_copy@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0PEAPEAPEAV12@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$uninitialized_copy@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0PEAPEAPEAV12@@Z PROC ; std::uninitialized_copy<Json::Value * * *,Json::Value * * *>, COMDAT

; 1582 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, r8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility

; 3311 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rbx, rcx

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, rcx
	mov	r8, rbx
	mov	rcx, rdi
	call	memmove

; 3313 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

	lea	rax, QWORD PTR [rbx+rdi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1601 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$uninitialized_copy@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0PEAPEAPEAV12@@Z ENDP ; std::uninitialized_copy<Json::Value * * *,Json::Value * * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
;	COMDAT ??$_Idl_distance@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YA_JAEBQEAPEAPEAVValue@Json@@0@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
??$_Idl_distance@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YA_JAEBQEAPEAPEAVValue@Json@@0@Z PROC ; std::_Idl_distance<Json::Value * * *,Json::Value * * *>, COMDAT

; 1348 :     // tries to get the distance between _First and _Last if they are random-access iterators
; 1349 :     if constexpr (_Is_random_iter_v<_Iter>) {
; 1350 :         return static_cast<_Iter_diff_t<_Checked>>(_Last - _First);

	mov	rax, QWORD PTR [rdx]
	sub	rax, QWORD PTR [rcx]
	sar	rax, 3

; 1351 :     } else {
; 1352 :         (void) _First; // TRANSITION, VSO#486357
; 1353 :         (void) _Last; // TRANSITION, VSO#486357
; 1354 :         return _Distance_unknown{};
; 1355 :     }
; 1356 : }

	ret	0
??$_Idl_distance@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YA_JAEBQEAPEAPEAVValue@Json@@0@Z ENDP ; std::_Idl_distance<Json::Value * * *,Json::Value * * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PEAPEAPEAVValue@Json@@_K@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@_K@Z
_TEXT	SEGMENT
_UFirst$ = 48
_Count$ = 56
??$_Uninitialized_value_construct_n_unchecked1@PEAPEAPEAVValue@Json@@_K@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@_K@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<Json::Value * * *,unsigned __int64>, COMDAT

; 1876 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1877 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1878 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1879 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1880 :         return _Zero_range(_UFirst, _UFirst + _Count);

	lea	rbx, QWORD PTR [rdx*8]
	mov	rdi, rcx

; 1818 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	r8, rbx
	xor	edx, edx
	call	memset

; 1877 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1878 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1879 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1880 :         return _Zero_range(_UFirst, _UFirst + _Count);

	lea	rax, QWORD PTR [rbx+rdi]

; 1881 :     } else {
; 1882 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1883 :         for (; 0 < _Count; --_Count) {
; 1884 :             _Backout._Emplace_back();
; 1885 :         }
; 1886 : 
; 1887 :         return _Backout._Release();
; 1888 :     }
; 1889 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n_unchecked1@PEAPEAPEAVValue@Json@@_K@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@_K@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<Json::Value * * *,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$_Destroy_range@PEAPEAPEAVValue@Json@@@std@@YAXPEAPEAPEAVValue@Json@@QEAPEAPEAV12@@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
??$_Destroy_range@PEAPEAPEAVValue@Json@@@std@@YAXPEAPEAPEAVValue@Json@@QEAPEAPEAV12@@Z PROC ; std::_Destroy_range<Json::Value * * *>, COMDAT

; 960  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 961  :     if
; 962  :         _CONSTEXPR_IF(is_trivially_destructible_v<_Iter_value_t<_NoThrowFwdIt>>) {
; 963  :             (void) _First;
; 964  :             (void) _Last;
; 965  :         }
; 966  :     else {
; 967  :         for (; _First != _Last; ++_First) {
; 968  :             _Destroy_in_place(*_First);
; 969  :         }
; 970  :     }
; 971  : }

	ret	0
??$_Destroy_range@PEAPEAPEAVValue@Json@@@std@@YAXPEAPEAPEAVValue@Json@@QEAPEAPEAV12@@Z ENDP ; std::_Destroy_range<Json::Value * * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0ErrorInfo@Reader@Json@@QEAA@AEBV012@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0ErrorInfo@Reader@Json@@QEAA@AEBV012@@Z PROC		; Json::Reader::ErrorInfo::ErrorInfo, COMDAT
$LN6:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	movups	xmm0, XMMWORD PTR [rdx]
	mov	rbx, rdx
	mov	rdi, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movsd	xmm1, QWORD PTR [rdx+16]
	add	rdx, 24
	movsd	QWORD PTR [rcx+16], xmm1
	add	rcx, 24
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rax, QWORD PTR [rbx+56]
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rdi+56], rax
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0ErrorInfo@Reader@Json@@QEAA@AEBV012@@Z ENDP		; Json::Reader::ErrorInfo::ErrorInfo
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 275  :     return __builtin_addressof(_Val);

	mov	rax, rcx

; 276  : }

	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1428 : }

	ret	0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
;	COMDAT ??$_Adl_verify_range@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAXAEBQEAPEAPEAVValue@Json@@0@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
??$_Adl_verify_range@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAXAEBQEAPEAPEAVValue@Json@@0@Z PROC ; std::_Adl_verify_range<Json::Value * * *,Json::Value * * *>, COMDAT

; 1081 :     // check that [_First, _Last) forms an iterator range
; 1082 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1083 :         _Verify_range(_First, _Last);
; 1084 :     } else {
; 1085 :         (void) _First; // TRANSITION, VSO#486357
; 1086 :         (void) _Last; // TRANSITION, VSO#486357
; 1087 :     }
; 1088 : }

	ret	0
??$_Adl_verify_range@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAXAEBQEAPEAPEAVValue@Json@@0@Z ENDP ; std::_Adl_verify_range<Json::Value * * *,Json::Value * * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
;	COMDAT ??$_Get_unwrapped@PEAPEAVValue@Json@@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Get_unwrapped@PEAPEAVValue@Json@@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@@Z PROC ; std::_Get_unwrapped<Json::Value * *>, COMDAT

; 1140 :     return _Ptr;

	mov	rax, rcx

; 1141 : }

	ret	0
??$_Get_unwrapped@PEAPEAVValue@Json@@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@@Z ENDP ; std::_Get_unwrapped<Json::Value * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
;	COMDAT ??$_Get_unwrapped_n@PEAPEAVValue@Json@@_J$0A@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@_J@Z
_TEXT	SEGMENT
_Src$ = 8
__formal$dead$ = 16
??$_Get_unwrapped_n@PEAPEAVValue@Json@@_J$0A@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@_J@Z PROC ; std::_Get_unwrapped_n<Json::Value * *,__int64,0>, COMDAT

; 1260 :     return _Src;

	mov	rax, rcx

; 1261 : }

	ret	0
??$_Get_unwrapped_n@PEAPEAVValue@Json@@_J$0A@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@_J@Z ENDP ; std::_Get_unwrapped_n<Json::Value * *,__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
;	COMDAT ??$_Copy_memmove@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@00@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$_Copy_memmove@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@00@Z PROC ; std::_Copy_memmove<Json::Value * * *,Json::Value * * *>, COMDAT

; 3307 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) { // implement copy-like function as memmove

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, r8

; 3308 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 3309 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 3310 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 3311 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rbx, rcx

; 3312 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, rcx
	mov	r8, rbx
	mov	rcx, rdi
	call	memmove

; 3313 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

	lea	rax, QWORD PTR [rbx+rdi]

; 3314 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAPEAPEAVValue@Json@@PEAPEAPEAV12@@std@@YAPEAPEAPEAVValue@Json@@PEAPEAPEAV12@00@Z ENDP ; std::_Copy_memmove<Json::Value * * *,Json::Value * * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xutility
;	COMDAT ??$_Seek_wrapped@PEAPEAVValue@Json@@@std@@YAXAEAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@@Z
_TEXT	SEGMENT
_It$ = 8
_UIt$ = 16
??$_Seek_wrapped@PEAPEAVValue@Json@@@std@@YAXAEAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@@Z PROC ; std::_Seek_wrapped<Json::Value * *>, COMDAT

; 1300 :     _It = _UIt;

	mov	QWORD PTR [rcx], rdx

; 1301 : }

	ret	0
??$_Seek_wrapped@PEAPEAVValue@Json@@@std@@YAXAEAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@@Z ENDP ; std::_Seek_wrapped<Json::Value * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$_Zero_range@PEAPEAPEAVValue@Json@@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
??$_Zero_range@PEAPEAPEAVValue@Json@@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0@Z PROC ; std::_Zero_range<Json::Value * * *>, COMDAT

; 1815 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 1816 :     char* const _First_ch = reinterpret_cast<char*>(_First);
; 1817 :     char* const _Last_ch  = reinterpret_cast<char*>(_Last);
; 1818 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	r8, rdx
	mov	rbx, rdx
	sub	r8, rcx
	xor	edx, edx
	call	memset

; 1819 :     return _Last;

	mov	rax, rbx

; 1820 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$_Zero_range@PEAPEAPEAVValue@Json@@@std@@YAPEAPEAPEAVValue@Json@@QEAPEAPEAV12@0@Z ENDP ; std::_Zero_range<Json::Value * * *>
_TEXT	ENDS
END
