; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28314.0 

include listing.inc


PUBLIC	??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1@ ; `string'
PUBLIC	??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5stri@ ; `string'
PUBLIC	??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5r@ ; `string'
PUBLIC	??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5rang@ ; `string'
PUBLIC	??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int@ ; `string'
PUBLIC	??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5con@ ; `string'
PUBLIC	??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ra@ ; `string'
PUBLIC	??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint@ ; `string'
PUBLIC	??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doub@ ; `string'
PUBLIC	??_C@_02GLFAOOJA@?$FL?4@			; `string'
PUBLIC	??_7DefaultValueAllocator@Json@@6B@		; Json::DefaultValueAllocator::`vftable'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R4ValueAllocator@Json@@6B@			; Json::ValueAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3ValueAllocator@Json@@8			; Json::ValueAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	_TI2?AVruntime_error@std@@
PUBLIC	??_R1A@?0A@EA@ValueAllocator@Json@@8		; Json::ValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@DefaultValueAllocator@Json@@8	; Json::DefaultValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3DefaultValueAllocator@Json@@8		; Json::DefaultValueAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	?minInt@Value@Json@@2HB				; Json::Value::minInt
PUBLIC	?maxInt@Value@Json@@2HB				; Json::Value::maxInt
PUBLIC	?maxUInt@Value@Json@@2IB			; Json::Value::maxUInt
PUBLIC	??_R2DefaultValueAllocator@Json@@8		; Json::DefaultValueAllocator::`RTTI Base Class Array'
PUBLIC	??_R4DefaultValueAllocator@Json@@6B@		; Json::DefaultValueAllocator::`RTTI Complete Object Locator'
PUBLIC	_CTA2?AVruntime_error@std@@
PUBLIC	??_R0?AVValueAllocator@Json@@@8			; Json::ValueAllocator `RTTI Type Descriptor'
PUBLIC	??_R2ValueAllocator@Json@@8			; Json::ValueAllocator::`RTTI Base Class Array'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R0?AVDefaultValueAllocator@Json@@@8		; Json::DefaultValueAllocator `RTTI Type Descriptor'
PUBLIC	??_7ValueAllocator@Json@@6B@			; Json::ValueAllocator::`vftable'
PUBLIC	_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
EXTRN	??_L@YAXPEAX_K1P6AX0@Z2@Z:PROC			; `eh vector constructor iterator'
EXTRN	__imp_strchr:PROC
;	COMDAT ?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A
_BSS	SEGMENT
?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A DQ 01H DUP (?) ; `Json::valueAllocator'::`2'::defaultAllocator
_BSS	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD imagerel ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT _CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0runtime_error@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ?valueAllocator@?1??0Json@@YAAEAPEAVValueAllocator@1@XZ@4PEAV21@EA
_DATA	SEGMENT
?valueAllocator@?1??0Json@@YAAEAPEAVValueAllocator@1@XZ@4PEAV21@EA DQ FLAT:?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A ; `Json::valueAllocator'::`2'::valueAllocator
_DATA	ENDS
;	COMDAT ??_7ValueAllocator@Json@@6B@
CONST	SEGMENT
??_7ValueAllocator@Json@@6B@ DQ FLAT:??_R4ValueAllocator@Json@@6B@ ; Json::ValueAllocator::`vftable'
	DQ	FLAT:??_EValueAllocator@Json@@UEAAPEAXI@Z
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT ??_R0?AVDefaultValueAllocator@Json@@@8
data$r	SEGMENT
??_R0?AVDefaultValueAllocator@Json@@@8 DQ FLAT:??_7type_info@@6B@ ; Json::DefaultValueAllocator `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVDefaultValueAllocator@Json@@', 00H
data$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DQ FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DQ	FLAT:??_Eruntime_error@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_R2ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R2ValueAllocator@Json@@8 DD imagerel ??_R1A@?0A@EA@ValueAllocator@Json@@8 ; Json::ValueAllocator::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R0?AVValueAllocator@Json@@@8
data$r	SEGMENT
??_R0?AVValueAllocator@Json@@@8 DQ FLAT:??_7type_info@@6B@ ; Json::ValueAllocator `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVValueAllocator@Json@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
_CTA2?AVruntime_error@std@@ DD 02H
	DD	imagerel _CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT ??_R4DefaultValueAllocator@Json@@6B@
rdata$r	SEGMENT
??_R4DefaultValueAllocator@Json@@6B@ DD 01H		; Json::DefaultValueAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVDefaultValueAllocator@Json@@@8
	DD	imagerel ??_R3DefaultValueAllocator@Json@@8
	DD	imagerel ??_R4DefaultValueAllocator@Json@@6B@
rdata$r	ENDS
;	COMDAT ??_R2DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R2DefaultValueAllocator@Json@@8 DD imagerel ??_R1A@?0A@EA@DefaultValueAllocator@Json@@8 ; Json::DefaultValueAllocator::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@ValueAllocator@Json@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R3DefaultValueAllocator@Json@@8 DD 00H		; Json::DefaultValueAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2DefaultValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DefaultValueAllocator@Json@@8 DD imagerel ??_R0?AVDefaultValueAllocator@Json@@@8 ; Json::DefaultValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3DefaultValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ValueAllocator@Json@@8 DD imagerel ??_R0?AVValueAllocator@Json@@@8 ; Json::ValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT _TI2?AVruntime_error@std@@
xdata$x	SEGMENT
_TI2?AVruntime_error@std@@ DD 00H
	DD	imagerel ??1runtime_error@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD imagerel ??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R3ValueAllocator@Json@@8 DD 00H			; Json::ValueAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 01H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVruntime_error@std@@@8
	DD	imagerel ??_R3runtime_error@std@@8
	DD	imagerel ??_R4runtime_error@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R4ValueAllocator@Json@@6B@
rdata$r	SEGMENT
??_R4ValueAllocator@Json@@6B@ DD 01H			; Json::ValueAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVValueAllocator@Json@@@8
	DD	imagerel ??_R3ValueAllocator@Json@@8
	DD	imagerel ??_R4ValueAllocator@Json@@6B@
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_7DefaultValueAllocator@Json@@6B@
CONST	SEGMENT
??_7DefaultValueAllocator@Json@@6B@ DQ FLAT:??_R4DefaultValueAllocator@Json@@6B@ ; Json::DefaultValueAllocator::`vftable'
	DQ	FLAT:??_EDefaultValueAllocator@Json@@UEAAPEAXI@Z
	DQ	FLAT:?makeMemberName@DefaultValueAllocator@Json@@UEAAPEADPEBD@Z
	DQ	FLAT:?releaseMemberName@DefaultValueAllocator@Json@@UEAAXPEAD@Z
	DQ	FLAT:?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z
	DQ	FLAT:?releaseStringValue@DefaultValueAllocator@Json@@UEAAXPEAD@Z
CONST	ENDS
;	COMDAT ??_C@_02GLFAOOJA@?$FL?4@
CONST	SEGMENT
??_C@_02GLFAOOJA@?$FL?4@ DB '[.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doub@
CONST	SEGMENT
??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doub@ DB 'Type is not '
	DB	'convertible to double', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint@
CONST	SEGMENT
??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint@ DB 'Type is not '
	DB	'convertible to uint', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ra@
CONST	SEGMENT
??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ra@ DB 'Real out of '
	DB	'unsigned integer range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5con@
CONST	SEGMENT
??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5con@ DB 'Negative int'
	DB	'eger can not be converted to unsigned integer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int@
CONST	SEGMENT
??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int@ DB 'Type is not c'
	DB	'onvertible to int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5rang@
CONST	SEGMENT
??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5rang@ DB 'Real out of '
	DB	'signed integer range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5r@
CONST	SEGMENT
??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5r@ DB 'integer out '
	DB	'of signed integer range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5stri@
CONST	SEGMENT
??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5stri@ DB 'Type is not '
	DB	'convertible to string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1@
CONST	SEGMENT
??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1@ DB 'Comments must sta'
	DB	'rt with /', 00H				; `string'
	ORG $+3356
?minInt@Value@Json@@2HB DD 080000000H			; Json::Value::minInt
	ORG $+44
?maxInt@Value@Json@@2HB DD 07fffffffH			; Json::Value::maxInt
	ORG $+28
?maxUInt@Value@Json@@2IB DD 0ffffffffH			; Json::Value::maxUInt
PUBLIC	??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buynode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>
PUBLIC	??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
PUBLIC	??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAAXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Allocate
PUBLIC	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$exchange@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::nullptr_t>
PUBLIC	??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >
PUBLIC	??$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	??$_Find_hint@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA?AU?$_Tree_find_hint_result@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Find_hint<Json::Value::CZString>
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::max_size
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::max_size
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Check_grow_by_1
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Insert_node
PUBLIC	?_Extract@?$_In_place_key_extract_map@VCZString@Value@Json@@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@SAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z ; std::_In_place_key_extract_map<Json::Value::CZString,std::pair<Json::Value::CZString const ,Json::Value> >::_Extract
PUBLIC	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Release
PUBLIC	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$forward@AEBQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAAEBQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEBQEAU10@@Z ; std::forward<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * const &>
PUBLIC	??$addressof@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAPEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z ; std::addressof<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
PUBLIC	??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
PUBLIC	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
PUBLIC	??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QEAU_One_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_One_then_variadic_args_t>
PUBLIC	??$forward@U?$less@VCZString@Value@Json@@@std@@@std@@YA$$QEAU?$less@VCZString@Value@Json@@@0@AEAU10@@Z ; std::forward<std::less<Json::Value::CZString> >
PUBLIC	??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	??$forward@AEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z ; std::forward<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
PUBLIC	??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAA@XZ ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::deallocate
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAA@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >
PUBLIC	??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z ; std::pair<Json::Value::CZString const ,Json::Value>::`scalar deleting destructor'
PUBLIC	??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::pair<Json::Value::CZString const ,Json::Value> >
PUBLIC	??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEBQEAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * const &>
PUBLIC	??$forward@AEBU?$less@VCZString@Value@Json@@@std@@@std@@YAAEBU?$less@VCZString@Value@Json@@@0@AEBU10@@Z ; std::forward<std::less<Json::Value::CZString> const &>
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$exchange@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
PUBLIC	??$_Lower_bound_duplicate@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lower_bound_duplicate<Json::Value::CZString>
PUBLIC	??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
PUBLIC	??$?0U?$less@VCZString@Value@Json@@@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$less@VCZString@Value@Json@@@1@$$QEAU21@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString>,std::_One_then_variadic_args_t,std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@YA$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@0@AEAV10@@Z ; std::forward<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	??$forward@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z ; std::forward<std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	??$forward@AEBVValue@Json@@@std@@YAAEBVValue@Json@@AEBV12@@Z ; std::forward<Json::Value const &>
PUBLIC	??$forward@AEAVCZString@Value@Json@@@std@@YAAEAVCZString@Value@Json@@AEAV123@@Z ; std::forward<Json::Value::CZString &>
PUBLIC	??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn<Json::Value::CZString const ,Json::Value>
PUBLIC	??$move@AEATValueHolder@Value@Json@@@std@@YA$$QEATValueHolder@Value@Json@@AEAT123@@Z ; std::move<Json::Value::ValueHolder &>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><>
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEBAAEBU?$less@VCZString@Value@Json@@@2@XZ ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_first
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocate
PUBLIC	?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA?AU?$less@VCZString@Value@Json@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::key_comp
PUBLIC	?_Getcomp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBU?$less@VCZString@Value@Json@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getcomp
PUBLIC	??R?$less@VCZString@Value@Json@@@std@@QEBA_NAEBVCZString@Value@Json@@0@Z ; std::less<Json::Value::CZString>::operator()
PUBLIC	??0?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@AEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
PUBLIC	?_Release@?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAAXXZ ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Release
PUBLIC	??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
PUBLIC	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString> const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@0@AEAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
PUBLIC	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@0@AEBV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > const >
PUBLIC	??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z ; std::addressof<std::pair<Json::Value::CZString const ,Json::Value> >
PUBLIC	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$_Find@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@AEBAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Find<Json::Value::CZString>
PUBLIC	??$_Find_lower_bound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@AEBVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Find_lower_bound<Json::Value::CZString>
PUBLIC	??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
PUBLIC	??$move@AEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AEAV10@@Z ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
PUBLIC	??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>
PUBLIC	??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::insert<std::pair<Json::Value::CZString const ,Json::Value> &,void>
PUBLIC	??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>
PUBLIC	??$swap@TValueHolder@Value@Json@@X@std@@YAXAEATValueHolder@Value@Json@@0@Z ; std::swap<Json::Value::ValueHolder,void>
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Rrotate
PUBLIC	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Max
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Min
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first
PUBLIC	?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXAEAV12@@Z ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Take_contents
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::select_on_container_copy_construction
PUBLIC	??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_scary
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_scary
PUBLIC	?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Orphan_ptr
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--
PUBLIC	?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAXAEAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_construct
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size
PUBLIC	?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_NXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound
PUBLIC	??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
PUBLIC	??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator--
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator!=
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::setComment
PUBLIC	?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z ; Json::Value::setComment
PUBLIC	?isMember@Value@Json@@QEBA_NPEBD@Z		; Json::Value::isMember
PUBLIC	??AValue@Json@@QEBAAEBV01@PEBD@Z		; Json::Value::operator[]
PUBLIC	?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z ; Json::Value::resolveReference
PUBLIC	??AValue@Json@@QEAAAEAV01@PEBD@Z		; Json::Value::operator[]
PUBLIC	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>
PUBLIC	?swap@Value@Json@@QEAAXAEAV12@@Z		; Json::Value::swap
PUBLIC	??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
PUBLIC	??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor'
PUBLIC	??_ECommentInfo@Value@Json@@QEAAPEAXI@Z		; Json::Value::CommentInfo::`vector deleting destructor'
PUBLIC	??0Value@Json@@QEAA@AEBV01@@Z			; Json::Value::Value
PUBLIC	??0Value@Json@@QEAA@I@Z				; Json::Value::Value
PUBLIC	?c_str@CZString@Value@Json@@QEBAPEBDXZ		; Json::Value::CZString::c_str
PUBLIC	?index@CZString@Value@Json@@QEBAHXZ		; Json::Value::CZString::index
PUBLIC	??8CZString@Value@Json@@QEBA_NAEBV012@@Z	; Json::Value::CZString::operator==
PUBLIC	??MCZString@Value@Json@@QEBA_NAEBV012@@Z	; Json::Value::CZString::operator<
PUBLIC	??1CZString@Value@Json@@QEAA@XZ			; Json::Value::CZString::~CZString
PUBLIC	??0CZString@Value@Json@@QEAA@AEBV012@@Z		; Json::Value::CZString::CZString
PUBLIC	??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z ; Json::Value::CZString::CZString
PUBLIC	??0CZString@Value@Json@@QEAA@H@Z		; Json::Value::CZString::CZString
PUBLIC	?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z	; Json::Value::CommentInfo::setComment
PUBLIC	??1CommentInfo@Value@Json@@QEAA@XZ		; Json::Value::CommentInfo::~CommentInfo
PUBLIC	??0CommentInfo@Value@Json@@QEAA@XZ		; Json::Value::CommentInfo::CommentInfo
PUBLIC	??0DummyValueAllocatorInitializer@Json@@QEAA@XZ	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer
PUBLIC	??0ValueAllocator@Json@@QEAA@XZ			; Json::ValueAllocator::ValueAllocator
PUBLIC	??0DefaultValueAllocator@Json@@QEAA@XZ		; Json::DefaultValueAllocator::DefaultValueAllocator
PUBLIC	??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z	; Json::DefaultValueAllocator::`scalar deleting destructor'
PUBLIC	?releaseStringValue@DefaultValueAllocator@Json@@UEAAXPEAD@Z ; Json::DefaultValueAllocator::releaseStringValue
PUBLIC	?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z ; Json::DefaultValueAllocator::duplicateStringValue
PUBLIC	?releaseMemberName@DefaultValueAllocator@Json@@UEAAXPEAD@Z ; Json::DefaultValueAllocator::releaseMemberName
PUBLIC	?makeMemberName@DefaultValueAllocator@Json@@UEAAPEADPEBD@Z ; Json::DefaultValueAllocator::makeMemberName
PUBLIC	??1DefaultValueAllocator@Json@@UEAA@XZ		; Json::DefaultValueAllocator::~DefaultValueAllocator
PUBLIC	??_GValueAllocator@Json@@UEAAPEAXI@Z		; Json::ValueAllocator::`scalar deleting destructor'
PUBLIC	??1ValueAllocator@Json@@UEAA@XZ			; Json::ValueAllocator::~ValueAllocator
PUBLIC	??0runtime_error@std@@QEAA@AEBV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UEAA@XZ			; std::runtime_error::~runtime_error
PUBLIC	??_Gruntime_error@std@@UEAAPEAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??0runtime_error@std@@QEAA@PEBD@Z		; std::runtime_error::runtime_error
PUBLIC	??0exception@std@@QEAA@QEBD@Z			; std::exception::exception
PUBLIC	?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::getComment
PUBLIC	?hasComment@Value@Json@@QEBA_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
PUBLIC	?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ; Json::Value::getMemberNames
PUBLIC	??AValue@Json@@QEBAAEBV01@I@Z			; Json::Value::operator[]
PUBLIC	??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
PUBLIC	?asUInt@Value@Json@@QEBAIXZ			; Json::Value::asUInt
PUBLIC	?asCString@Value@Json@@QEBAPEBDXZ		; Json::Value::asCString
PUBLIC	?type@Value@Json@@QEBA?AW4ValueType@2@XZ	; Json::Value::type
PUBLIC	?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::isMember
PUBLIC	?append@Value@Json@@QEAAAEAV12@AEBV12@@Z	; Json::Value::append
PUBLIC	?isValidIndex@Value@Json@@QEBA_NI@Z		; Json::Value::isValidIndex
PUBLIC	??AValue@Json@@QEAAAEAV01@I@Z			; Json::Value::operator[]
PUBLIC	??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
PUBLIC	?size@Value@Json@@QEBAIXZ			; Json::Value::size
PUBLIC	?isObject@Value@Json@@QEBA_NXZ			; Json::Value::isObject
PUBLIC	?isArray@Value@Json@@QEBA_NXZ			; Json::Value::isArray
PUBLIC	?isString@Value@Json@@QEBA_NXZ			; Json::Value::isString
PUBLIC	?isDouble@Value@Json@@QEBA_NXZ			; Json::Value::isDouble
PUBLIC	?isInt@Value@Json@@QEBA_NXZ			; Json::Value::isInt
PUBLIC	?isBool@Value@Json@@QEBA_NXZ			; Json::Value::isBool
PUBLIC	?asBool@Value@Json@@QEBA_NXZ			; Json::Value::asBool
PUBLIC	?asDouble@Value@Json@@QEBANXZ			; Json::Value::asDouble
PUBLIC	?asInt@Value@Json@@QEBAHXZ			; Json::Value::asInt
PUBLIC	?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Json::Value::asString
PUBLIC	??4Value@Json@@QEAAAEAV01@AEBV01@@Z		; Json::Value::operator=
PUBLIC	??1Value@Json@@QEAA@XZ				; Json::Value::~Value
PUBLIC	??0Value@Json@@QEAA@W4ValueType@1@@Z		; Json::Value::Value
PUBLIC	??0Value@Json@@QEAA@H@Z				; Json::Value::Value
PUBLIC	??0Value@Json@@QEAA@N@Z				; Json::Value::Value
PUBLIC	??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::Value
PUBLIC	??0Value@Json@@QEAA@_N@Z			; Json::Value::Value
PUBLIC	?null@Value@Json@@2V12@B			; Json::Value::null
EXTRN	??_Eruntime_error@std@@UEAAPEAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_EDefaultValueAllocator@Json@@UEAAPEAXI@Z:PROC ; Json::DefaultValueAllocator::`vector deleting destructor'
EXTRN	??_EValueAllocator@Json@@UEAAPEAXI@Z:PROC	; Json::ValueAllocator::`vector deleting destructor'
?dummyValueAllocatorInitializer@Json@@3UDummyValueAllocatorInitializer@1@A DB 01H DUP (?) ; Json::dummyValueAllocatorInitializer
	ALIGN	4

?null@Value@Json@@2V12@B DB 018H DUP (?)		; Json::Value::null
_BSS	ENDS
;	COMDAT ?$TSS0@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4HA
_BSS	SEGMENT
?$TSS0@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',Json::alueAllocator,Json::AAEAPEAVValueAllocator,void,int, ?? &>
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD imagerel $LN41
	DD	imagerel $LN41+230
	DD	imagerel $unwind$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z DD imagerel $LN15
	DD	imagerel $LN15+109
	DD	imagerel $unwind$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD imagerel $LN43
	DD	imagerel $LN43+230
	DD	imagerel $unwind$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+34
	DD	imagerel $unwind$??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z DD imagerel $LN17
	DD	imagerel $LN17+122
	DD	imagerel $unwind$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+45
	DD	imagerel $unwind$?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD imagerel $LN12
	DD	imagerel $LN12+55
	DD	imagerel $unwind$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD imagerel $LN31
	DD	imagerel $LN31+154
	DD	imagerel $unwind$??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z DD imagerel $LN45
	DD	imagerel $LN45+230
	DD	imagerel $unwind$??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD imagerel $LN40
	DD	imagerel $LN40+248
	DD	imagerel $unwind$??$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Find_hint@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA?AU?$_Tree_find_hint_result@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z DD imagerel $LN150
	DD	imagerel $LN150+1100
	DD	imagerel $unwind$??$_Find_hint@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA?AU?$_Tree_find_hint_result@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ DD imagerel $LN10
	DD	imagerel $LN10+70
	DD	imagerel $unwind$?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU32@@Z DD imagerel $LN57
	DD	imagerel $LN57+637
	DD	imagerel $unwind$?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ DD imagerel $LN27
	DD	imagerel $LN27+99
	DD	imagerel $unwind$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DD imagerel $LN54
	DD	imagerel $LN54+335
	DD	imagerel $unwind$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$3@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA DD imagerel ?catch$3@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA
	DD	imagerel ?catch$3@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA+44
	DD	imagerel $unwind$?catch$3@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD imagerel $LN75
	DD	imagerel $LN75+387
	DD	imagerel $unwind$??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z DD imagerel $LN15
	DD	imagerel $LN15+59
	DD	imagerel $unwind$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD imagerel $LN17
	DD	imagerel $LN17+55
	DD	imagerel $unwind$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEBQEAU10@@Z DD imagerel $LN5
	DD	imagerel $LN5+34
	DD	imagerel $unwind$??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEBQEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z DD imagerel $LN23
	DD	imagerel $LN23+164
	DD	imagerel $unwind$??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+58
	DD	imagerel $unwind$??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z DD imagerel $LN4
	DD	imagerel $LN4+26
	DD	imagerel $unwind$?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@AEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD imagerel $LN15
	DD	imagerel $LN15+118
	DD	imagerel $unwind$??0?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@AEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ DD imagerel $LN12
	DD	imagerel $LN12+15
	DD	imagerel $unwind$??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ DD imagerel $LN12+15
	DD	imagerel $LN12+67
	DD	imagerel $chain$0$??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ DD imagerel $LN12+67
	DD	imagerel $LN12+73
	DD	imagerel $chain$1$??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z DD imagerel $LN21
	DD	imagerel $LN21+70
	DD	imagerel $unwind$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD imagerel $LN13
	DD	imagerel $LN13+92
	DD	imagerel $unwind$??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z DD imagerel $LN9
	DD	imagerel $LN9+35
	DD	imagerel $unwind$??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD imagerel $LN9
	DD	imagerel $LN9+62
	DD	imagerel $unwind$??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD imagerel $LN31
	DD	imagerel $LN31+154
	DD	imagerel $unwind$??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Find@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@AEBAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z DD imagerel $LN35
	DD	imagerel $LN35+198
	DD	imagerel $unwind$??$_Find@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@AEBAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD imagerel $LN53
	DD	imagerel $LN53+302
	DD	imagerel $unwind$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+151
	DD	imagerel $unwind$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD imagerel $LN13
	DD	imagerel $LN13+58
	DD	imagerel $unwind$??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z DD imagerel $LN15
	DD	imagerel $LN15+112
	DD	imagerel $unwind$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ DD imagerel $LN15
	DD	imagerel $LN15+132
	DD	imagerel $unwind$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXAEAV12@@Z DD imagerel $LN5
	DD	imagerel $LN5+67
	DD	imagerel $unwind$?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z DD imagerel $LN23
	DD	imagerel $LN23+159
	DD	imagerel $unwind$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+29
	DD	imagerel $unwind$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAXAEAV12@U?$integral_constant@_N$00@2@@Z DD imagerel $LN7
	DD	imagerel $LN7+67
	DD	imagerel $unwind$?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAXAEAV12@U?$integral_constant@_N$00@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD imagerel $LN7
	DD	imagerel $LN7+29
	DD	imagerel $unwind$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD imagerel $LN9
	DD	imagerel $LN9+29
	DD	imagerel $unwind$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ DD imagerel $LN11
	DD	imagerel $LN11+50
	DD	imagerel $unwind$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ DD imagerel $LN11
	DD	imagerel $LN11+38
	DD	imagerel $unwind$?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ DD imagerel $LN11
	DD	imagerel $LN11+35
	DD	imagerel $unwind$?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z DD imagerel $LN44
	DD	imagerel $LN44+238
	DD	imagerel $unwind$?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z DD imagerel $LN28
	DD	imagerel $LN28+137
	DD	imagerel $unwind$?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ DD imagerel $LN26
	DD	imagerel $LN26+159
	DD	imagerel $unwind$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z DD imagerel $LN56
	DD	imagerel $LN56+302
	DD	imagerel $unwind$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ DD imagerel $LN4
	DD	imagerel $LN4+20
	DD	imagerel $unwind$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ DD imagerel $LN4
	DD	imagerel $LN4+23
	DD	imagerel $unwind$??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN9
	DD	imagerel $LN9+113
	DD	imagerel $unwind$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DD imagerel $LN11
	DD	imagerel $LN11+151
	DD	imagerel $unwind$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA DD imagerel ?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA
	DD	imagerel ?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA+29
	DD	imagerel $unwind$?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z DD imagerel $LN9
	DD	imagerel $LN9+143
	DD	imagerel $unwind$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA DD imagerel ?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA
	DD	imagerel ?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA+29
	DD	imagerel $unwind$?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isMember@Value@Json@@QEBA_NPEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+27
	DD	imagerel $unwind$?isMember@Value@Json@@QEBA_NPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??AValue@Json@@QEBAAEBV01@PEBD@Z DD imagerel $LN74
	DD	imagerel $LN74+308
	DD	imagerel $unwind$??AValue@Json@@QEBAAEBV01@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z DD imagerel $LN181
	DD	imagerel $LN181+651
	DD	imagerel $unwind$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA DD imagerel ?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA
	DD	imagerel ?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA+29
	DD	imagerel $unwind$?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ DD imagerel $LN11
	DD	imagerel $LN11+56
	DD	imagerel $unwind$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ DD imagerel $LN13
	DD	imagerel $LN13+50
	DD	imagerel $unwind$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z DD imagerel $LN17
	DD	imagerel $LN17+67
	DD	imagerel $unwind$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z DD imagerel $LN12
	DD	imagerel $LN12+60
	DD	imagerel $unwind$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Value@Json@@QEAA@AEBV01@@Z DD imagerel $LN83
	DD	imagerel $LN83+592
	DD	imagerel $unwind$??0Value@Json@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA+32
	DD	imagerel $unwind$?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA+29
	DD	imagerel $unwind$?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1CZString@Value@Json@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+46
	DD	imagerel $unwind$??1CZString@Value@Json@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CZString@Value@Json@@QEAA@AEBV012@@Z DD imagerel $LN11
	DD	imagerel $LN11+103
	DD	imagerel $unwind$??0CZString@Value@Json@@QEAA@AEBV012@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z DD imagerel $LN6
	DD	imagerel $LN6+75
	DD	imagerel $unwind$??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z DD imagerel $LN8
	DD	imagerel $LN8+122
	DD	imagerel $unwind$?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1CommentInfo@Value@Json@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+40
	DD	imagerel $unwind$??1CommentInfo@Value@Json@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0DummyValueAllocatorInitializer@Json@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+21
	DD	imagerel $unwind$??0DummyValueAllocatorInitializer@Json@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ DD imagerel ?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ
	DD	imagerel ?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ+103
	DD	imagerel $unwind$?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z DD imagerel $LN7
	DD	imagerel $LN7+43
	DD	imagerel $unwind$??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z DD imagerel $LN6
	DD	imagerel $LN6+94
	DD	imagerel $unwind$?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GValueAllocator@Json@@UEAAPEAXI@Z DD imagerel $LN7
	DD	imagerel $LN7+43
	DD	imagerel $unwind$??_GValueAllocator@Json@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0runtime_error@std@@QEAA@AEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+33
	DD	imagerel $unwind$??0runtime_error@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gruntime_error@std@@UEAAPEAXI@Z DD imagerel $LN10
	DD	imagerel $LN10+52
	DD	imagerel $unwind$??_Gruntime_error@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0runtime_error@std@@QEAA@PEBD@Z DD imagerel $LN7
	DD	imagerel $LN7+72
	DD	imagerel $unwind$??0runtime_error@std@@QEAA@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+62
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DD imagerel $LN15
	DD	imagerel $LN15+54
	DD	imagerel $unwind$?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DD imagerel $LN55
	DD	imagerel $LN55+382
	DD	imagerel $unwind$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??AValue@Json@@QEBAAEBV01@I@Z DD imagerel $LN68
	DD	imagerel $LN68+233
	DD	imagerel $unwind$??AValue@Json@@QEBAAEBV01@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN4
	DD	imagerel $LN4+33
	DD	imagerel $unwind$??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?asUInt@Value@Json@@QEBAIXZ DD imagerel $LN20
	DD	imagerel $LN20+244
	DD	imagerel $unwind$?asUInt@Value@Json@@QEBAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN6
	DD	imagerel $LN6+47
	DD	imagerel $unwind$?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@Value@Json@@QEAAAEAV12@AEBV12@@Z DD imagerel $LN29
	DD	imagerel $LN29+136
	DD	imagerel $unwind$?append@Value@Json@@QEAAAEAV12@AEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isValidIndex@Value@Json@@QEBA_NI@Z DD imagerel $LN29
	DD	imagerel $LN29+127
	DD	imagerel $unwind$?isValidIndex@Value@Json@@QEBA_NI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??AValue@Json@@QEAAAEAV01@I@Z DD imagerel $LN179
	DD	imagerel $LN179+588
	DD	imagerel $unwind$??AValue@Json@@QEAAAEAV01@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA DD imagerel ?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA
	DD	imagerel ?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA+29
	DD	imagerel $unwind$?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN6
	DD	imagerel $LN6+33
	DD	imagerel $unwind$??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@Value@Json@@QEBAIXZ DD imagerel $LN27
	DD	imagerel $LN27+99
	DD	imagerel $unwind$?size@Value@Json@@QEBAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?asDouble@Value@Json@@QEBANXZ DD imagerel $LN18
	DD	imagerel $LN18+164
	DD	imagerel $unwind$?asDouble@Value@Json@@QEBANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?asInt@Value@Json@@QEBAHXZ DD imagerel $LN20
	DD	imagerel $LN20+248
	DD	imagerel $unwind$?asInt@Value@Json@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD imagerel $LN20
	DD	imagerel $LN20+204
	DD	imagerel $unwind$?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4Value@Json@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN50
	DD	imagerel $LN50+258
	DD	imagerel $unwind$??4Value@Json@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Value@Json@@QEAA@XZ DD imagerel $LN42
	DD	imagerel $LN42+186
	DD	imagerel $unwind$??1Value@Json@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Value@Json@@QEAA@W4ValueType@1@@Z DD imagerel $LN41
	DD	imagerel $LN41+288
	DD	imagerel $unwind$??0Value@Json@@QEAA@W4ValueType@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA DD imagerel ?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA
	DD	imagerel ?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA+29
	DD	imagerel $unwind$?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN4
	DD	imagerel $LN4+126
	DD	imagerel $unwind$??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Value@Json@@QEAA@W4ValueType@1@@Z DB 06H
	DB	0b8H
	DB	00H
	DB	'j'
	DB	02H
	DB	0acH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Value@Json@@QEAA@W4ValueType@1@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0Value@Json@@QEAA@W4ValueType@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0Value@Json@@QEAA@W4ValueType@1@@Z
	DD	imagerel $ip2state$??0Value@Json@@QEAA@W4ValueType@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Value@Json@@QEAA@W4ValueType@1@@Z DD 040811H
	DD	070043208H
	DD	030026003H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0Value@Json@@QEAA@W4ValueType@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1Value@Json@@QEAA@XZ DB 04H
	DB	0eaH
	DB	00H
	DB	'@'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1Value@Json@@QEAA@XZ DB 04H
	DB	0eH
	DD	imagerel __imp___std_terminate
	DB	028H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1Value@Json@@QEAA@XZ DB 068H
	DD	imagerel $stateUnwindMap$??1Value@Json@@QEAA@XZ
	DD	imagerel $ip2state$??1Value@Json@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Value@Json@@QEAA@XZ DD 040a19H
	DD	06340aH
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1Value@Json@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??4Value@Json@@QEAAAEAV01@AEBV01@@Z DB 06H
	DB	'$'
	DB	00H
	DB	0a5H, 02H
	DB	02H
	DB	'@'
	DB	04H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??4Value@Json@@QEAAAEAV01@AEBV01@@Z DB 06H
	DB	0eH
	DD	imagerel __imp___std_terminate
	DB	02eH
	DD	imagerel __imp___std_terminate
	DB	028H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??4Value@Json@@QEAAAEAV01@AEBV01@@Z DB 028H
	DD	imagerel $stateUnwindMap$??4Value@Json@@QEAAAEAV01@AEBV01@@Z
	DD	imagerel $ip2state$??4Value@Json@@QEAAAEAV01@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4Value@Json@@QEAAAEAV01@AEBV01@@Z DD 040a11H
	DD	0a340aH
	DD	07006720aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??4Value@Json@@QEAAAEAV01@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?asInt@Value@Json@@QEBAHXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?asDouble@Value@Json@@QEBANXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@Value@Json@@QEBAIXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??AValue@Json@@QEAAAEAV01@I@Z DB 0eH
	DB	'p'
	DB	00H
	DB	'`'
	DB	02H
	DB	0a4H
	DB	00H
	DB	016H
	DB	04H
	DB	']', 04H
	DB	010H
	DB	'('
	DB	012H
	DB	08eH
	DB	014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??AValue@Json@@QEAAAEAV01@I@Z DB 014H
	DB	0eH
	DD	imagerel ?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA
	DB	032H
	DD	imagerel ??1Value@Json@@QEAA@XZ
	DB	060H
	DB	066H
	DD	imagerel __imp___std_terminate
	DB	028H
	DB	08H
	DB	09aH
	DD	imagerel ??1CZString@Value@Json@@QEAA@XZ
	DB	040H
	DB	0c8H
	DB	03aH
	DD	imagerel ??1CZString@Value@Json@@QEAA@XZ
	DB	090H
	DB	06aH
	DD	imagerel ??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
	DB	090H
	DB	09eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??AValue@Json@@QEAAAEAV01@I@Z DB 028H
	DD	imagerel $stateUnwindMap$??AValue@Json@@QEAAAEAV01@I@Z
	DD	imagerel $ip2state$??AValue@Json@@QEAAAEAV01@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??AValue@Json@@QEAAAEAV01@I@Z DD 071011H
	DD	0f009e210H
	DD	07005e007H
	DD	030036004H
	DD	05002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??AValue@Json@@QEAAAEAV01@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isValidIndex@Value@Json@@QEBA_NI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@Value@Json@@QEAAAEAV12@AEBV12@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?asUInt@Value@Json@@QEBAIXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??AValue@Json@@QEBAAEBV01@I@Z DB 00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??AValue@Json@@QEBAAEBV01@I@Z DB 04H
	DB	08H
	DB	016H
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??AValue@Json@@QEBAAEBV01@I@Z DB 028H
	DD	imagerel $stateUnwindMap$??AValue@Json@@QEBAAEBV01@I@Z
	DD	imagerel $ip2state$??AValue@Json@@QEBAAEBV01@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??AValue@Json@@QEBAAEBV01@I@Z DD 040a11H
	DD	07340aH
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??AValue@Json@@QEBAAEBV01@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DB 0aH
	DB	0eaH
	DB	02H
	DB	0b2H
	DB	04H
	DB	01aH
	DB	02H
	DB	015H, 02H
	DB	00H
	DB	'0'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DB 04H
	DB	0aH
	DD	imagerel ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ
	DB	060H
	DB	032H
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DB 028H
	DD	imagerel $stateUnwindMap$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
	DD	imagerel $ip2state$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DD 062019H
	DD	0163412H
	DD	07008f212H
	DD	050066007H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
	DD	072H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBD@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0runtime_error@std@@QEAA@PEBD@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gruntime_error@std@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0runtime_error@std@@QEAA@AEBV01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GValueAllocator@Json@@UEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0DummyValueAllocatorInitializer@Json@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1CommentInfo@Value@Json@@QEAA@XZ DB 02H
	DB	'<'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1CommentInfo@Value@Json@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1CommentInfo@Value@Json@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1CommentInfo@Value@Json@@QEAA@XZ DD 020619H
	DD	030023206H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1CommentInfo@Value@Json@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CZString@Value@Json@@QEAA@AEBV012@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1CZString@Value@Json@@QEAA@XZ DB 02H
	DB	'H'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1CZString@Value@Json@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1CZString@Value@Json@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1CZString@Value@Json@@QEAA@XZ DD 020619H
	DD	030023206H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1CZString@Value@Json@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Value@Json@@QEAA@AEBV01@@Z DB 0eH
	DB	0c8H
	DB	00H
	DB	'f'
	DB	02H
	DB	0eeH
	DB	04H
	DB	'1', 02H
	DB	00H
	DB	'2'
	DB	06H
	DB	'n'
	DB	00H
	DB	08cH
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Value@Json@@QEAA@AEBV01@@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA
	DB	02aH
	DD	imagerel ??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ
	DB	060H
	DB	066H
	DD	imagerel ?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0Value@Json@@QEAA@AEBV01@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0Value@Json@@QEAA@AEBV01@@Z
	DD	imagerel $ip2state$??0Value@Json@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Value@Json@@QEAA@AEBV01@@Z DD 081011H
	DD	0113410H
	DD	0f00c7210H
	DD	07008e00aH
	DD	050066007H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0Value@Json@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z DB 02H
	DB	'2'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z DB 02H
	DB	08H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z DB 068H
	DD	imagerel $stateUnwindMap$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z
	DD	imagerel $ip2state$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z DD 020619H
	DD	030023206H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??_ECommentInfo@Value@Json@@QEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ DB 02H
	DB	'\'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ DB 068H
	DD	imagerel $stateUnwindMap$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ DD 020619H
	DD	030023206H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z DB 010H
	DB	088H
	DB	00H
	DB	'`'
	DB	02H
	DB	0a4H
	DB	00H
	DB	016H
	DB	04H
	DB	081H, 04H
	DB	0cH
	DB	'@'
	DB	010H
	DB	'('
	DB	012H
	DB	08eH
	DB	014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z DB 014H
	DB	0eH
	DD	imagerel ?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA
	DB	032H
	DD	imagerel ??1Value@Json@@QEAA@XZ
	DB	070H
	DB	066H
	DD	imagerel __imp___std_terminate
	DB	028H
	DB	08H
	DB	09aH
	DD	imagerel ??1CZString@Value@Json@@QEAA@XZ
	DB	050H
	DB	0c8H
	DB	03aH
	DD	imagerel ??1CZString@Value@Json@@QEAA@XZ
	DB	0a0H
	DB	06aH
	DD	imagerel ??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
	DB	0a0H
	DB	09eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z DB 028H
	DD	imagerel $stateUnwindMap$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z
	DD	imagerel $ip2state$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z DD 081b11H
	DD	017341bH
	DD	0f011f21bH
	DD	0700de00fH
	DD	0500b600cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??AValue@Json@@QEBAAEBV01@PEBD@Z DB 00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??AValue@Json@@QEBAAEBV01@PEBD@Z DB 04H
	DB	08H
	DB	016H
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??AValue@Json@@QEBAAEBV01@PEBD@Z DB 028H
	DD	imagerel $stateUnwindMap$??AValue@Json@@QEBAAEBV01@PEBD@Z
	DD	imagerel $ip2state$??AValue@Json@@QEBAAEBV01@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??AValue@Json@@QEBAAEBV01@PEBD@Z DD 060f11H
	DD	09640fH
	DD	07340fH
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??AValue@Json@@QEBAAEBV01@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isMember@Value@Json@@QEBA_NPEBD@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z DB 04H
	DB	'R'
	DB	00H
	DB	'r'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z DB 028H
	DD	imagerel $stateUnwindMap$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z
	DD	imagerel $ip2state$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z DD 081411H
	DD	0b6414H
	DD	0a5414H
	DD	093414H
	DD	070105214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DB 04H
	DB	'b'
	DB	00H
	DB	'r'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DB 028H
	DD	imagerel $stateUnwindMap$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
	DD	imagerel $ip2state$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z DD 081411H
	DD	0b6414H
	DD	0a5414H
	DD	093414H
	DD	070105214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z DB 06H
	DB	088H
	DB	00H
	DB	096H
	DB	02H
	DB	'1', 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z DB 02H
	DB	0aH
	DD	imagerel ??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ
	DB	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z
	DD	imagerel $ip2state$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z DD 061411H
	DD	0b6414H
	DD	0a3414H
	DD	070105214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ DD 040f01H
	DD	09340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAXAEAV12@U?$integral_constant@_N$00@2@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z DD 040f01H
	DD	08340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXAEAV12@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ DD 040a01H
	DD	08340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z DB 04H
	DB	'^'
	DB	00H
	DB	'Z'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z DB 02H
	DB	0cH
	DD	imagerel ??1CZString@Value@Json@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z
	DD	imagerel $ip2state$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z DD 040f11H
	DD	07340fH
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z DB 06H
	DB	'H'
	DB	00H
	DB	'T'
	DB	02H
	DB	'v'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z DB 02H
	DB	0cH
	DD	imagerel ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
	DB	080H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z
	DD	imagerel $ip2state$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z DD 041911H
	DD	0b3419H
	DD	070155219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DB 06H
	DB	088H
	DB	00H
	DB	096H
	DB	02H
	DB	'1', 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DB 02H
	DB	0aH
	DD	imagerel ??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ
	DB	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
	DD	imagerel $ip2state$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD 061411H
	DD	0b6414H
	DD	093414H
	DD	070105214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Find@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@AEBAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DB 02H
	DB	0daH
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DB 02H
	DB	0eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DB 068H
	DD	imagerel $stateUnwindMap$??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
	DD	imagerel $ip2state$??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD 081419H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z DB 02H
	DB	'`'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z DB 02H
	DB	0eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z DB 068H
	DD	imagerel $stateUnwindMap$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z
	DD	imagerel $ip2state$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z DD 020619H
	DD	030023206H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ DD 021H
	DD	imagerel $LN12
	DD	imagerel $LN12+15
	DD	imagerel $unwind$??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ DD 020521H
	DD	063405H
	DD	imagerel $LN12
	DD	imagerel $LN12+15
	DD	imagerel $unwind$??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@AEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEBQEAU10@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 02H
	DB	'Z'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 02H
	DB	0eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	imagerel $ip2state$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 020611H
	DD	030023206H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z DB 02H
	DB	'\'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z DB 02H
	DB	0eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z DB 068H
	DD	imagerel $stateUnwindMap$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z
	DD	imagerel $ip2state$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z DD 020619H
	DD	030023206H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 0aH
	DB	089H, 02H
	DB	02H
	DB	'*'
	DB	04H
	DB	0a4H
	DB	06H
	DB	01cH
	DB	04H
	DB	0ccH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 08H
	DB	0aH
	DD	imagerel ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	040H
	DB	03aH
	DD	imagerel ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	040H
	DB	034H
	DD	imagerel ??1CZString@Value@Json@@QEAA@XZ
	DB	081H
	DB	02H
	DB	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	imagerel $ip2state$??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 081011H
	DD	0153410H
	DD	0f00cd210H
	DD	07008e00aH
	DD	050066007H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$3@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA DD 020a01H
	DD	05006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DB 0aH
	DB	'~'
	DB	02H
	DB	0ceH
	DB	04H
	DB	01cH
	DB	02H
	DB	0d2H
	DB	06H
	DB	'>'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$3@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DB 02H
	DB	04H
	DB	04H
	DB	06H
	DD	imagerel $handlerMap$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DB 08H
	DB	0aH
	DD	imagerel ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	040H
	DB	034H
	DD	imagerel ??1CZString@Value@Json@@QEAA@XZ
	DB	0f0H
	DB	068H
	DB	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
	DD	imagerel $tryMap$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
	DD	imagerel $ip2state$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z DD 081919H
	DD	0f0155219H
	DD	0d011e013H
	DD	0700dc00fH
	DD	0300b600cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	'z'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ DB 068H
	DD	imagerel $stateUnwindMap$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ DD 040a19H
	DD	06340aH
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU32@@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Find_hint@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA?AU?$_Tree_find_hint_result@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z DD 081301H
	DD	0e6413H
	DD	0d3413H
	DD	0f00f7213H
	DD	0700be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 08H
	DB	'X'
	DB	02H
	DB	'"'
	DB	04H
	DB	098H
	DB	06H
	DB	01cH
	DB	04H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 06H
	DB	0cH
	DD	imagerel ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	080H
	DB	03cH
	DD	imagerel ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	080H
	DB	034H
	DD	imagerel ??1CZString@Value@Json@@QEAA@XZ
	DB	090H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	imagerel $ip2state$??$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 081711H
	DD	0b5417H
	DD	0a3417H
	DD	0e0133217H
	DD	060107011H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z DB 06H
	DB	'N'
	DB	02H
	DB	0c6H
	DB	04H
	DB	01cH
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z DB 04H
	DB	0aH
	DD	imagerel ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	040H
	DB	034H
	DD	imagerel ??1CZString@Value@Json@@QEAA@XZ
	DB	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z
	DD	imagerel $ip2state$??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z DD 081211H
	DD	0c5412H
	DD	0b3412H
	DD	0e00e5212H
	DD	0600b700cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DB 02H
	DB	0daH
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DB 02H
	DB	0eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DB 068H
	DD	imagerel $stateUnwindMap$??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
	DD	imagerel $ip2state$??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z DD 081419H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DB 04H
	DB	':'
	DB	02H
	DB	'"'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DB 02H
	DB	0cH
	DD	imagerel ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
	DD	imagerel $ip2state$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z DD 020a11H
	DD	03006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z DB 04H
	DB	'|'
	DB	00H
	DB	'V'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z DB 02H
	DB	0cH
	DD	imagerel ??1CZString@Value@Json@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z
	DD	imagerel $ip2state$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z DD 040f11H
	DD	07340fH
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@0@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 06H
	DB	'N'
	DB	02H
	DB	0c6H
	DB	04H
	DB	01cH
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 04H
	DB	0aH
	DD	imagerel ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	040H
	DB	034H
	DD	imagerel ??1CZString@Value@Json@@QEAA@XZ
	DB	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	imagerel $ip2state$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 081211H
	DD	0c5412H
	DD	0b3412H
	DD	0e00e5212H
	DD	0600b700cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z DB 04H
	DB	'^'
	DB	00H
	DB	'T'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z DB 02H
	DB	0cH
	DD	imagerel ??1CZString@Value@Json@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z
	DD	imagerel $ip2state$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z DD 040f11H
	DD	07340fH
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 06H
	DB	'N'
	DB	02H
	DB	0c6H
	DB	04H
	DB	01cH
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 04H
	DB	0aH
	DD	imagerel ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
	DB	040H
	DB	034H
	DD	imagerel ??1CZString@Value@Json@@QEAA@XZ
	DB	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	imagerel $ip2state$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 081211H
	DD	0c5412H
	DD	0b3412H
	DD	0e00e5212H
	DD	0600b700cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
??null$initializer$@Value@Json@@2P6AXXZEA@@3P6AXXZEA DQ FLAT:??__E?null@Value@Json@@2V12@B@@YAXXZ ; ??null$initializer$@Value@Json@@2P6AXXZEA@@3P6AXXZEA
?dummyValueAllocatorInitializer$initializer$@Json@@3P6AXXZEA DQ FLAT:??__EdummyValueAllocatorInitializer@Json@@YAXXZ ; Json::dummyValueAllocatorInitializer$initializer$
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@_N@Z
_TEXT	SEGMENT
this$ = 8
value$ = 16
??0Value@Json@@QEAA@_N@Z PROC				; Json::Value::Value, COMDAT

; 408  : #endif

	mov	BYTE PTR [rcx+8], 5

; 414  : Value::Value( bool value )
; 415  :    : type_( booleanValue )

	mov	rax, rcx
	mov	QWORD PTR [rcx+16], 0
	mov	BYTE PTR [rcx], dl
	ret	0
??0Value@Json@@QEAA@_N@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
this$ = 48
value$ = 56
??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::Value, COMDAT

; 376  : Value::Value( const std::string &value )

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H

; 370  : {

	mov	BYTE PTR [rcx+8], 4
	mov	rbp, rdx

; 371  :    value_.string_ = valueAllocator()->duplicateStringValue( beginValue, 

	or	DWORD PTR [rcx+8], 256			; 00000100H
	mov	r14, rcx

; 372  :                                                             UInt(endValue - beginValue) );

	mov	QWORD PTR [rcx+16], 0

; 377  :    : type_( stringValue )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, rbp
	mov	rdi, QWORD PTR [rax]
	mov	rsi, QWORD PTR [rdi]
	call	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
	mov	rcx, rbp
	mov	rbx, rax
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rdx, rax
	mov	r8d, ebx
	mov	rcx, rdi
	call	QWORD PTR [rsi+24]

; 378  :    , allocated_( true )
; 379  :    , comments_( 0 )
; 380  : # ifdef JSON_VALUE_USE_INTERNAL_MAP

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	mov	QWORD PTR [r14], rax
	mov	rax, r14
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
??0Value@Json@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 8
value$ = 16
??0Value@Json@@QEAA@N@Z PROC				; Json::Value::Value, COMDAT

; 340  : Value::Value( double value )

	movsd	QWORD PTR [rcx], xmm1

; 341  :    : type_( realValue )

	mov	rax, rcx
	mov	BYTE PTR [rcx+8], 3
	mov	QWORD PTR [rcx+16], 0
	ret	0
??0Value@Json@@QEAA@N@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
value$ = 16
??0Value@Json@@QEAA@H@Z PROC				; Json::Value::Value, COMDAT

; 313  :    default:

	mov	BYTE PTR [rcx+8], 1

; 319  : Value::Value( Int value )
; 320  :    : type_( intValue )

	mov	rax, rcx
	mov	QWORD PTR [rcx+16], 0
	mov	DWORD PTR [rcx], edx
	ret	0
??0Value@Json@@QEAA@H@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@W4ValueType@1@@Z
_TEXT	SEGMENT
$T2 = 64
this$ = 64
_Proxy$7 = 72
type$ = 72
$S10$8 = 80
$T1 = 88
??0Value@Json@@QEAA@W4ValueType@1@@Z PROC		; Json::Value::Value, COMDAT

; 275  : Value::Value( ValueType type )

$LN41:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx

; 269  : // //////////////////////////////////////////////////////////////////

	mov	BYTE PTR [rcx+8], dl

; 270  : 

	and	DWORD PTR [rcx+8], -257			; fffffffffffffeffH

; 271  : /*! \internal Default constructor initialization must be equivalent to:

	xor	ebx, ebx
	mov	QWORD PTR [rcx+16], rbx

; 276  :    : type_( type )

	dec	edx
	cmp	edx, 6
	ja	$LN10@Value
	movsxd	rax, edx
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN38@Value[rcx+rax*4]
	add	rdx, rcx
	jmp	rdx
$LN5@Value:

; 277  :    , allocated_( 0 )
; 278  :    , comments_( 0 )
; 279  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 280  :    , itemIsUsed_( 0 )
; 281  : #endif
; 282  : {

	mov	DWORD PTR [rsi], ebx

; 305  :       break;
; 306  :    case objectValue:
; 307  :       value_.map_ = mapAllocator()->newMap();
; 308  :       break;
; 309  : #endif

	mov	rax, rsi
	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN6@Value:
	mov	QWORD PTR [rsi], rbx
	mov	rax, rsi
	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN8@Value:

; 293  :       break;

	mov	ecx, 16
	call	??2@YAPEAX_K@Z				; operator new
	mov	rdi, rax
	mov	QWORD PTR $T1[rsp], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1333 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	lea	rcx, QWORD PTR $T2[rsp]
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	QWORD PTR [rdi], rbx
	mov	QWORD PTR [rdi+8], rbx

; 2023 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	mov	r8, rdi
	lea	rdx, QWORD PTR $S10$8[rsp]
	lea	rcx, QWORD PTR _Proxy$7[rsp]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	rdx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	rdx, QWORD PTR [rbx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 347  :         _Pnode->_Color = _Black;

	mov	WORD PTR [rbx+24], 257			; 00000101H

; 2024 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	QWORD PTR [rdi], rbx

; 2025 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$7[rsp]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 293  :       break;

	mov	QWORD PTR [rsi], rdi

; 305  :       break;
; 306  :    case objectValue:
; 307  :       value_.map_ = mapAllocator()->newMap();
; 308  :       break;
; 309  : #endif

	mov	rax, rsi
	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN9@Value:

; 294  :    case stringValue:
; 295  :       value_.string_ = 0;
; 296  :       break;
; 297  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 298  :    case arrayValue:
; 299  :    case objectValue:
; 300  :       value_.map_ = new ObjectValues();
; 301  :       break;
; 302  : #else
; 303  :    case arrayValue:
; 304  :       value_.array_ = arrayAllocator()->newArray();

	mov	BYTE PTR [rsi], bl
$LN10@Value:

; 305  :       break;
; 306  :    case objectValue:
; 307  :       value_.map_ = mapAllocator()->newMap();
; 308  :       break;
; 309  : #endif

	mov	rax, rsi
	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
	npad	2
$LN38@Value:
	DD	$LN5@Value
	DD	$LN5@Value
	DD	$LN6@Value
	DD	$LN6@Value
	DD	$LN9@Value
	DD	$LN8@Value
	DD	$LN8@Value
??0Value@Json@@QEAA@W4ValueType@1@@Z ENDP		; Json::Value::Value
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T2 = 64
this$ = 64
_Proxy$7 = 72
type$ = 72
$S10$8 = 80
$T1 = 88
?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA PROC ; `Json::Value::Value'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T1[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA ENDP ; `Json::Value::Value'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T2 = 64
this$ = 64
_Proxy$7 = 72
type$ = 72
$S10$8 = 80
$T1 = 88
?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA PROC ; `Json::Value::Value'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T1[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0???0Value@Json@@QEAA@W4ValueType@1@@Z@4HA ENDP ; `Json::Value::Value'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1Value@Json@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1Value@Json@@QEAA@XZ PROC				; Json::Value::~Value, COMDAT

; 473  :             comments_[comment].setComment( otherComment.comment_ );

$LN42:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 474  :       }

	movzx	eax, BYTE PTR [rcx+8]
	cmp	al, 4
	je	SHORT $LN5@Value
	sub	al, 6
	cmp	al, 1
	ja	SHORT $LN6@Value

; 485  :    case uintValue:
; 486  :    case realValue:
; 487  :    case booleanValue:
; 488  :       break;
; 489  :    case stringValue:

	mov	rdi, QWORD PTR [rcx]
	test	rdi, rdi
	je	SHORT $LN6@Value
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 751  :         this->_Orphan_all();

	mov	rcx, rdi
	call	?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all
	npad	1

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	r8, QWORD PTR [rdi]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, rdi
	mov	rcx, rdi
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, QWORD PTR [rdi]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
	mov	edx, 16
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 490  :       if ( allocated_ )

	jmp	SHORT $LN6@Value
$LN5@Value:

; 475  :    }
; 476  : }
; 477  : 
; 478  : 
; 479  : Value::~Value()
; 480  : {
; 481  :    switch ( type_ )
; 482  :    {
; 483  :    case nullValue:

	test	DWORD PTR [rcx+8], 256			; 00000100H
	je	SHORT $LN6@Value

; 484  :    case intValue:

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+32]
	npad	1
$LN6@Value:

; 491  :          valueAllocator()->releaseStringValue( value_.string_ );
; 492  :       break;
; 493  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 494  :    case arrayValue:
; 495  :    case objectValue:
; 496  :       delete value_.map_;
; 497  :       break;
; 498  : #else
; 499  :    case arrayValue:
; 500  :       arrayAllocator()->destructArray( value_.array_ );
; 501  :       break;
; 502  :    case objectValue:
; 503  :       mapAllocator()->destructMap( value_.map_ );

	mov	rcx, QWORD PTR [rbx+16]
	test	rcx, rcx
	je	SHORT $LN13@Value
	lea	rbx, QWORD PTR [rcx-8]
	lea	r9, OFFSET FLAT:??1CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::~CommentInfo
	mov	r8, QWORD PTR [rbx]
	mov	edx, 8
	call	??_M@YAXPEAX_K1P6AX0@Z@Z
	npad	1
	mov	rdx, QWORD PTR [rbx]
	lea	rdx, QWORD PTR [rdx*8+8]
	mov	rcx, rbx
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	npad	1
$LN13@Value:

; 504  :       break;
; 505  : #endif

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1Value@Json@@QEAA@XZ ENDP				; Json::Value::~Value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??4Value@Json@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
temp$ = 32
this$ = 80
other$ = 88
??4Value@Json@@QEAAAEAV01@AEBV01@@Z PROC		; Json::Value::operator=, COMDAT

; 509  : 

$LN50:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rcx

; 510  :    if ( comments_ )

	lea	rcx, QWORD PTR temp$[rsp]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value

; 518  :    swap( temp );

	movsx	eax, BYTE PTR [rdi+8]

; 519  :    return *this;

	mov	edx, DWORD PTR temp$[rsp+8]
	mov	BYTE PTR [rdi+8], dl

; 520  : }

	xor	eax, edx
	movzx	r8d, al
	xor	r8d, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility

; 61   :     _Ty _Tmp = _STD move(_Left);

	mov	rbx, QWORD PTR [rdi]

; 62   :     _Left    = _STD move(_Right);

	mov	rax, QWORD PTR temp$[rsp]
	mov	QWORD PTR [rdi], rax
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 522  : void 

	mov	ecx, DWORD PTR [rdi+8]
	mov	edx, ecx
	shl	edx, 23
	sar	edx, 31

; 523  : Value::swap( Value &other )

	mov	eax, ecx
	xor	eax, r8d
	and	eax, 256				; 00000100H
	xor	eax, ecx
	mov	DWORD PTR [rdi+8], eax

; 524  : {

	shl	edx, 8
	xor	edx, r8d
	and	edx, 256				; 00000100H
	xor	edx, r8d

; 474  :       }

	cmp	dl, 4
	je	SHORT $LN12@operator
	sub	dl, 6
	cmp	dl, 1
	ja	SHORT $LN13@operator

; 485  :    case uintValue:
; 486  :    case realValue:
; 487  :    case booleanValue:
; 488  :       break;
; 489  :    case stringValue:

	test	rbx, rbx
	je	SHORT $LN13@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 751  :         this->_Orphan_all();

	mov	rcx, rbx
	call	?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	r8, QWORD PTR [rbx]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, rbx
	mov	rcx, rbx
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, QWORD PTR [rbx]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	mov	edx, 16
	mov	rcx, rbx
	call	??3@YAXPEAX_K@Z				; operator delete
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 490  :       if ( allocated_ )

	jmp	SHORT $LN13@operator
$LN12@operator:

; 475  :    }
; 476  : }
; 477  : 
; 478  : 
; 479  : Value::~Value()
; 480  : {
; 481  :    switch ( type_ )
; 482  :    {
; 483  :    case nullValue:

	bt	edx, 8
	jae	SHORT $LN13@operator

; 484  :    case intValue:

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, rbx
	call	QWORD PTR [rax+32]
$LN13@operator:

; 491  :          valueAllocator()->releaseStringValue( value_.string_ );
; 492  :       break;
; 493  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 494  :    case arrayValue:
; 495  :    case objectValue:
; 496  :       delete value_.map_;
; 497  :       break;
; 498  : #else
; 499  :    case arrayValue:
; 500  :       arrayAllocator()->destructArray( value_.array_ );
; 501  :       break;
; 502  :    case objectValue:
; 503  :       mapAllocator()->destructMap( value_.map_ );

	mov	rcx, QWORD PTR temp$[rsp+16]
	test	rcx, rcx
	je	SHORT $LN47@operator
	lea	rbx, QWORD PTR [rcx-8]
	lea	r9, OFFSET FLAT:??1CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::~CommentInfo
	mov	r8, QWORD PTR [rbx]
	mov	edx, 8
	call	??_M@YAXPEAX_K1P6AX0@Z@Z
	mov	rdx, QWORD PTR [rbx]
	lea	rdx, QWORD PTR [rdx*8+8]
	mov	rcx, rbx
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	npad	1
$LN47@operator:

; 511  :       delete[] comments_;
; 512  : }
; 513  : 

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??4Value@Json@@QEAAAEAV01@AEBV01@@Z ENDP		; Json::Value::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T2 = 32
this$ = 80
__$ReturnUdt$ = 88
?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Json::Value::asString, COMDAT

; 686  :    JSON_ASSERT( type_ == stringValue );

$LN20:
	push	rbx
	sub	rsp, 64					; 00000040H

; 687  :    return value_.string_;

	movsx	rax, BYTE PTR [rcx+8]
	mov	rbx, rdx
	cmp	eax, 7
	ja	SHORT $LN8@asString
	lea	rdx, OFFSET FLAT:__ImageBase
	mov	r8d, DWORD PTR $LN15@asString[rdx+rax*4]
	add	r8, rdx
	jmp	r8
$LN5@asString:

; 688  : }
; 689  : 
; 690  : 
; 691  : std::string 
; 692  : Value::asString() const

	mov	rax, QWORD PTR [rcx]
	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	test	rax, rax

; 705  :    case arrayValue:

	mov	rcx, rbx
	cmovne	rdx, rax
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
$LN6@asString:

; 693  : {
; 694  :    switch ( type_ )

	cmp	BYTE PTR [rcx], 0
	lea	rax, OFFSET FLAT:??_C@_04LOAJBDKD@true@
	lea	rdx, OFFSET FLAT:??_C@_05LAPONLG@false@

; 705  :    case arrayValue:

	mov	rcx, rbx
	cmovne	rdx, rax
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
$LN8@asString:

; 701  :       return value_.bool_ ? "true" : "false";
; 702  :    case intValue:
; 703  :    case uintValue:
; 704  :    case realValue:

	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@

; 705  :    case arrayValue:

	mov	rcx, rbx
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
$LN7@asString:

; 695  :    {
; 696  :    case nullValue:
; 697  :       return "";
; 698  :    case stringValue:
; 699  :       return value_.string_ ? value_.string_ : "";
; 700  :    case booleanValue:

	lea	rdx, OFFSET FLAT:??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5stri@
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T2[rsp]
	call	_CxxThrowException
	int	3
$LN16@asString:
	npad	1
$LN15@asString:

; 705  :    case arrayValue:

	DD	$LN8@asString
	DD	$LN7@asString
	DD	$LN7@asString
	DD	$LN7@asString
	DD	$LN5@asString
	DD	$LN6@asString
	DD	$LN7@asString
	DD	$LN7@asString
?asString@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Json::Value::asString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asInt@Value@Json@@QEBAHXZ
_TEXT	SEGMENT
$T3 = 32
$T2 = 32
$T1 = 32
this$ = 80
?asInt@Value@Json@@QEBAHXZ PROC				; Json::Value::asInt, COMDAT

; 717  : {

$LN20:
	sub	rsp, 72					; 00000048H

; 718  :    return CppTL::ConstString( asString().c_str() );

	movsx	rax, BYTE PTR [rcx+8]
	cmp	eax, 7
	ja	SHORT $LN13@asInt
	lea	r8, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN16@asInt[r8+rax*4]
	add	rdx, r8
	jmp	rdx
$LN5@asInt:

; 719  : }
; 720  : # endif
; 721  : 
; 722  : Value::Int 
; 723  : Value::asInt() const

	mov	eax, DWORD PTR [rcx]

; 740  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN6@asInt:

; 724  : {
; 725  :    switch ( type_ )

	mov	eax, DWORD PTR [rcx]
	cmp	eax, 2147483647				; 7fffffffH
	jae	SHORT $LN19@asInt
	jmp	SHORT $LN1@asInt
$LN8@asInt:

; 726  :    {
; 727  :    case nullValue:
; 728  :       return 0;

	movsd	xmm1, QWORD PTR [rcx]
	comisd	xmm1, QWORD PTR __real@c1e0000000000000
	jb	SHORT $LN10@asInt
	movsd	xmm0, QWORD PTR __real@41dfffffffc00000
	comisd	xmm0, xmm1
	jb	SHORT $LN10@asInt

; 729  :    case intValue:

	cvttsd2si eax, xmm1

; 740  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN11@asInt:

; 730  :       return value_.int_;
; 731  :    case uintValue:

	xor	eax, eax
	cmp	BYTE PTR [rcx], al
	setne	al

; 740  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN13@asInt:

; 736  :       return Int( value_.real_ );
; 737  :    case booleanValue:
; 738  :       return value_.bool_ ? 1 : 0;
; 739  :    case stringValue:

	xor	eax, eax
$LN1@asInt:

; 740  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN19@asInt:

; 724  : {
; 725  :    switch ( type_ )

	lea	rdx, OFFSET FLAT:??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5r@
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
	int	3
$LN10@asInt:

; 726  :    {
; 727  :    case nullValue:
; 728  :       return 0;

	lea	rdx, OFFSET FLAT:??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5rang@
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T2[rsp]
	call	_CxxThrowException
	int	3
$LN12@asInt:

; 732  :       JSON_ASSERT_MESSAGE( value_.uint_ < (unsigned)maxInt, "integer out of signed integer range" );
; 733  :       return value_.uint_;
; 734  :    case realValue:
; 735  :       JSON_ASSERT_MESSAGE( value_.real_ >= minInt  &&  value_.real_ <= maxInt, "Real out of signed integer range" );

	lea	rdx, OFFSET FLAT:??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int@
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T3[rsp]
	call	_CxxThrowException
	int	3
$LN17@asInt:
	npad	3
$LN16@asInt:

; 740  :    case arrayValue:

	DD	$LN13@asInt
	DD	$LN5@asInt
	DD	$LN6@asInt
	DD	$LN8@asInt
	DD	$LN12@asInt
	DD	$LN11@asInt
	DD	$LN12@asInt
	DD	$LN12@asInt
?asInt@Value@Json@@QEBAHXZ ENDP				; Json::Value::asInt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asDouble@Value@Json@@QEBANXZ
_TEXT	SEGMENT
$T1 = 32
this$ = 80
?asDouble@Value@Json@@QEBANXZ PROC			; Json::Value::asDouble, COMDAT

; 771  :       JSON_ASSERT_UNREACHABLE;

$LN18:
	sub	rsp, 72					; 00000048H

; 772  :    }

	movsx	rax, BYTE PTR [rcx+8]
	cmp	eax, 7
	ja	SHORT $LN10@asDouble
	lea	r8, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN15@asDouble[r8+rax*4]
	add	rdx, r8
	jmp	rdx
$LN5@asDouble:
	movd	xmm0, DWORD PTR [rcx]

; 773  :    return 0; // unreachable;
; 774  : }
; 775  : 
; 776  : double 
; 777  : Value::asDouble() const

	cvtdq2pd xmm0, xmm0

; 788  :       return value_.real_;
; 789  :    case booleanValue:
; 790  :       return value_.bool_ ? 1.0 : 0.0;
; 791  :    case stringValue:
; 792  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN6@asDouble:

; 778  : {
; 779  :    switch ( type_ )

	mov	eax, DWORD PTR [rcx]
	xorps	xmm0, xmm0
	cvtsi2sd xmm0, rax

; 788  :       return value_.real_;
; 789  :    case booleanValue:
; 790  :       return value_.bool_ ? 1.0 : 0.0;
; 791  :    case stringValue:
; 792  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN7@asDouble:

; 780  :    {
; 781  :    case nullValue:

	movsd	xmm0, QWORD PTR [rcx]

; 788  :       return value_.real_;
; 789  :    case booleanValue:
; 790  :       return value_.bool_ ? 1.0 : 0.0;
; 791  :    case stringValue:
; 792  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN8@asDouble:

; 782  :       return 0.0;
; 783  :    case intValue:

	cmp	BYTE PTR [rcx], 0
	je	SHORT $LN10@asDouble
	movsd	xmm0, QWORD PTR __real@3ff0000000000000

; 788  :       return value_.real_;
; 789  :    case booleanValue:
; 790  :       return value_.bool_ ? 1.0 : 0.0;
; 791  :    case stringValue:
; 792  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN10@asDouble:
	xorps	xmm0, xmm0
	add	rsp, 72					; 00000048H
	ret	0
$LN9@asDouble:

; 784  :       return value_.int_;
; 785  :    case uintValue:
; 786  :       return value_.uint_;
; 787  :    case realValue:

	lea	rdx, OFFSET FLAT:??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doub@
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
	int	3
$LN16@asDouble:
$LN15@asDouble:

; 788  :       return value_.real_;
; 789  :    case booleanValue:
; 790  :       return value_.bool_ ? 1.0 : 0.0;
; 791  :    case stringValue:
; 792  :    case arrayValue:

	DD	$LN10@asDouble
	DD	$LN5@asDouble
	DD	$LN6@asDouble
	DD	$LN7@asDouble
	DD	$LN9@asDouble
	DD	$LN8@asDouble
	DD	$LN9@asDouble
	DD	$LN9@asDouble
?asDouble@Value@Json@@QEBANXZ ENDP			; Json::Value::asDouble
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asBool@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?asBool@Value@Json@@QEBA_NXZ PROC			; Json::Value::asBool, COMDAT

; 797  :    }

	movsx	rax, BYTE PTR [rcx+8]
	cmp	eax, 7
	ja	SHORT $LN10@asBool
	lea	r8, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN17@asBool[r8+rax*4]
	add	rdx, r8
	jmp	rdx
$LN5@asBool:

; 798  :    return 0; // unreachable;
; 799  : }
; 800  : 
; 801  : bool 
; 802  : Value::asBool() const
; 803  : {

	cmp	DWORD PTR [rcx], 0
	setne	al

; 813  :    case booleanValue:
; 814  :       return value_.bool_;
; 815  :    case stringValue:
; 816  :       return value_.string_  &&  value_.string_[0] != 0;
; 817  :    case arrayValue:

	ret	0
$LN6@asBool:

; 804  :    switch ( type_ )
; 805  :    {

	movsd	xmm1, QWORD PTR [rcx]
	xorps	xmm0, xmm0
	ucomisd	xmm1, xmm0
	jp	SHORT $LN16@asBool
	jne	SHORT $LN16@asBool
$LN10@asBool:

; 813  :    case booleanValue:
; 814  :       return value_.bool_;
; 815  :    case stringValue:
; 816  :       return value_.string_  &&  value_.string_[0] != 0;
; 817  :    case arrayValue:

	xor	al, al
	ret	0
$LN7@asBool:

; 806  :    case nullValue:
; 807  :       return false;

	movzx	eax, BYTE PTR [rcx]

; 813  :    case booleanValue:
; 814  :       return value_.bool_;
; 815  :    case stringValue:
; 816  :       return value_.string_  &&  value_.string_[0] != 0;
; 817  :    case arrayValue:

	ret	0
$LN8@asBool:

; 808  :    case intValue:
; 809  :    case uintValue:

	mov	rax, QWORD PTR [rcx]
	test	rax, rax
	je	SHORT $LN10@asBool
	cmp	BYTE PTR [rax], 0
	je	SHORT $LN10@asBool
$LN16@asBool:

; 813  :    case booleanValue:
; 814  :       return value_.bool_;
; 815  :    case stringValue:
; 816  :       return value_.string_  &&  value_.string_[0] != 0;
; 817  :    case arrayValue:

	mov	al, 1
	ret	0
$LN9@asBool:

; 810  :       return value_.int_ != 0;
; 811  :    case realValue:
; 812  :       return value_.real_ != 0.0;

	mov	rax, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+8], 0
	setne	al

; 813  :    case booleanValue:
; 814  :       return value_.bool_;
; 815  :    case stringValue:
; 816  :       return value_.string_  &&  value_.string_[0] != 0;
; 817  :    case arrayValue:

	ret	0
	npad	1
$LN17@asBool:
	DD	$LN10@asBool
	DD	$LN5@asBool
	DD	$LN5@asBool
	DD	$LN6@asBool
	DD	$LN8@asBool
	DD	$LN7@asBool
	DD	$LN9@asBool
	DD	$LN9@asBool
?asBool@Value@Json@@QEBA_NXZ ENDP			; Json::Value::asBool
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isBool@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isBool@Value@Json@@QEBA_NXZ PROC			; Json::Value::isBool, COMDAT

; 1264 :    return type_ == nullValue;

	cmp	BYTE PTR [rcx+8], 5
	sete	al

; 1265 : }

	ret	0
?isBool@Value@Json@@QEBA_NXZ ENDP			; Json::Value::isBool
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isInt@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isInt@Value@Json@@QEBA_NXZ PROC			; Json::Value::isInt, COMDAT

; 1271 :    return type_ == booleanValue;

	cmp	BYTE PTR [rcx+8], 1
	sete	al

; 1272 : }

	ret	0
?isInt@Value@Json@@QEBA_NXZ ENDP			; Json::Value::isInt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isDouble@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isDouble@Value@Json@@QEBA_NXZ PROC			; Json::Value::isDouble, COMDAT

; 1294 :           ||  type_ == booleanValue;

	cmp	BYTE PTR [rcx+8], 3
	sete	al

; 1295 : }

	ret	0
?isDouble@Value@Json@@QEBA_NXZ ENDP			; Json::Value::isDouble
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isString@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isString@Value@Json@@QEBA_NXZ PROC			; Json::Value::isString, COMDAT

; 1308 :    return isIntegral() || isDouble();

	cmp	BYTE PTR [rcx+8], 4
	sete	al

; 1309 : }

	ret	0
?isString@Value@Json@@QEBA_NXZ ENDP			; Json::Value::isString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isArray@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isArray@Value@Json@@QEBA_NXZ PROC			; Json::Value::isArray, COMDAT

; 1315 :    return type_ == stringValue;

	movzx	eax, BYTE PTR [rcx+8]
	test	al, al
	je	SHORT $LN3@isArray
	cmp	al, 6
	je	SHORT $LN3@isArray
	xor	al, al

; 1316 : }

	ret	0
$LN3@isArray:

; 1315 :    return type_ == stringValue;

	mov	al, 1

; 1316 : }

	ret	0
?isArray@Value@Json@@QEBA_NXZ ENDP			; Json::Value::isArray
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isObject@Value@Json@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isObject@Value@Json@@QEBA_NXZ PROC			; Json::Value::isObject, COMDAT

; 1322 :    return type_ == nullValue  ||  type_ == arrayValue;

	movzx	eax, BYTE PTR [rcx+8]
	test	al, al
	je	SHORT $LN3@isObject
	cmp	al, 7
	je	SHORT $LN3@isObject
	xor	al, al

; 1323 : }

	ret	0
$LN3@isObject:

; 1322 :    return type_ == nullValue  ||  type_ == arrayValue;

	mov	al, 1

; 1323 : }

	ret	0
?isObject@Value@Json@@QEBA_NXZ ENDP			; Json::Value::isObject
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?size@Value@Json@@QEBAIXZ
_TEXT	SEGMENT
$T2 = 48
itLast$4 = 48
this$ = 48
?size@Value@Json@@QEBAIXZ PROC				; Json::Value::size, COMDAT

; 874  :    return false; // unreachable;

$LN27:
	sub	rsp, 40					; 00000028H

; 875  : }

	movzx	eax, BYTE PTR [rcx+8]
	cmp	al, 6
	jl	SHORT $LN8@size
	je	SHORT $LN5@size
	cmp	al, 7
	jne	SHORT $LN8@size

; 891  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 892  :    case arrayValue:  // size of the array is highest index + 1
; 893  :       if ( !value_.map_->empty() )
; 894  :       {

	mov	rax, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+8]

; 905  :    case objectValue:

	add	rsp, 40					; 00000028H
	ret	0
$LN5@size:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1314 :         return size() == 0;

	mov	rdx, QWORD PTR [rcx]
	cmp	QWORD PTR [rdx+8], 0
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 886  :    case uintValue:

	je	SHORT $LN8@size
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	rax, QWORD PTR [rdx]

; 40   :         this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T2[rsp]
	mov	QWORD PTR $T2[rsp], rax
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 888  :    case booleanValue:

	mov	rax, QWORD PTR $T2[rsp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 215  :         _Mybase::operator--();

	lea	rcx, QWORD PTR itLast$4[rsp]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 888  :    case booleanValue:

	mov	QWORD PTR itLast$4[rsp], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 215  :         _Mybase::operator--();

	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 890  :       return 0;

	mov	rax, QWORD PTR itLast$4[rsp]
	mov	eax, DWORD PTR [rax+40]
	inc	eax

; 905  :    case objectValue:

	add	rsp, 40					; 00000028H
	ret	0
$LN8@size:

; 895  :          ObjectValues::const_iterator itLast = value_.map_->end();
; 896  :          --itLast;
; 897  :          return (*itLast).first.index()+1;
; 898  :       }
; 899  :       return 0;
; 900  :    case objectValue:
; 901  :       return Int( value_.map_->size() );
; 902  : #else
; 903  :    case arrayValue:
; 904  :       return Int( value_.array_->size() );

	xor	eax, eax

; 905  :    case objectValue:

	add	rsp, 40					; 00000028H
	ret	0
?size@Value@Json@@QEBAIXZ ENDP				; Json::Value::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
this$ = 48
key$ = 56
??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::operator[], COMDAT

; 1083 :    return value ? *value : null;

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 1084 : #endif

	mov	rcx, rdx
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str

; 1017 : #endif

	mov	rdx, rax
	mov	rcx, rbx

; 1085 : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 1017 : #endif

	jmp	?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z ; Json::Value::resolveReference
??AValue@Json@@QEAAAEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QEAAAEAV01@I@Z
_TEXT	SEGMENT
$T2 = 32
key$ = 32
$T1 = 48
defaultValue$ = 72
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
_Proxy$21 = 184
index$ = 184
$S10$22 = 192
it$ = 200
??AValue@Json@@QEAAAEAV01@I@Z PROC			; Json::Value::operator[], COMDAT

; 976  :    value_.array_->resize( newSize );

$LN179:
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 120				; 00000078H
	mov	esi, edx
	mov	r14, rcx

; 977  : #endif
; 978  : }

	xor	r15d, r15d
	cmp	BYTE PTR [rcx+8], r15b
	jne	$LN55@operator

; 269  : // //////////////////////////////////////////////////////////////////

	mov	eax, DWORD PTR $T1[rbp-112]
	and	eax, -506				; fffffffffffffe06H

; 270  : 

	or	eax, 6
	mov	DWORD PTR $T1[rbp-112], eax

; 271  : /*! \internal Default constructor initialization must be equivalent to:

	mov	QWORD PTR $T1[rbp-104], r15

; 293  :       break;

	lea	ecx, QWORD PTR [r15+16]
	call	??2@YAPEAX_K@Z				; operator new
	mov	rdi, rax
	mov	QWORD PTR $T2[rbp-120], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1333 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	lea	rcx, QWORD PTR $T3[rbp-120]
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	QWORD PTR [rdi], r15
	mov	QWORD PTR [rdi+8], r15

; 2023 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	mov	r8, rdi
	lea	rdx, QWORD PTR $S10$22[rbp-120]
	lea	rcx, QWORD PTR _Proxy$21[rbp-120]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	lea	ecx, QWORD PTR [r15+1]
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	lea	ecx, QWORD PTR [r15+8]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	rdx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	lea	ecx, QWORD PTR [r15+8]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	rdx, QWORD PTR [rbx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	lea	ecx, QWORD PTR [r15+8]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 347  :         _Pnode->_Color = _Black;

	mov	WORD PTR [rbx+24], 257			; 00000101H

; 2024 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	QWORD PTR [rdi], rbx

; 2025 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$21[rbp-120]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 293  :       break;

	mov	QWORD PTR $T1[rbp-120], rdi

; 979  : 

	lea	rdx, QWORD PTR $T1[rbp-120]
	mov	rcx, r14
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 751  :         this->_Orphan_all();

	mov	rcx, rdi
	call	?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	r8, QWORD PTR [rdi]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, rdi
	mov	rcx, rdi
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	lea	edx, QWORD PTR [r15+72]
	mov	rcx, QWORD PTR [rdi]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	lea	edx, QWORD PTR [r15+16]
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1
$LN55@operator:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 175  : // //////////////////////////////////////////////////////////////////

	mov	QWORD PTR key$[rbp-120], r15

; 176  : # ifndef JSON_VALUE_USE_INTERNAL_MAP

	mov	DWORD PTR key$[rbp-112], esi

; 980  : 
; 981  : Value &
; 982  : Value::operator[]( UInt index )

	mov	r10, QWORD PTR [r14]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1704 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	r9, QWORD PTR [r10]
	mov	rdx, QWORD PTR [r9+8]

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN91@operator
$LL90@operator:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rdx+32]
	test	rax, rax
	je	SHORT $LN98@operator

; 221  :    return *this;

	mov	r8, r15
	sub	r8, rax
$LL173@operator:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+r8]
	jne	SHORT $LN175@operator
	inc	rax
	test	cl, cl
	jne	SHORT $LL173@operator
	mov	eax, r15d
	shr	eax, 31
	jmp	SHORT $LN97@operator
$LN175@operator:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN97@operator
$LN98@operator:

; 222  : }

	cmp	DWORD PTR [rdx+40], esi
	setl	al
$LN97@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1708 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	test	al, al
	je	SHORT $LN92@operator

; 1709 :                 _Result._Location._Child = _Tree_child::_Right;
; 1710 :                 _Trynode                 = _Trynode->_Right;

	mov	rdx, QWORD PTR [rdx+16]

; 1711 :             } else {

	jmp	SHORT $LN93@operator
$LN92@operator:

; 1712 :                 _Result._Location._Child = _Tree_child::_Left;
; 1713 :                 _Result._Bound           = _Trynode;

	mov	r9, rdx

; 1714 :                 _Trynode                 = _Trynode->_Left;

	mov	rdx, QWORD PTR [rdx]
$LN93@operator:

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [rdx+25], 0
	je	SHORT $LL90@operator
$LN91@operator:

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	QWORD PTR it$[rbp-120], r9

; 40   :         this->_Adopt(_Plist);

	mov	rdx, r10
	lea	rcx, QWORD PTR it$[rbp-120]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1247 :         const auto _Scary = _Get_scary();

	mov	rdx, QWORD PTR [r14]

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR $T14[rbp-120], rax

; 40   :         this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T14[rbp-120]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 232  :         return this->_Ptr == _Right._Ptr;

	mov	rax, QWORD PTR it$[rbp-120]
	cmp	rax, QWORD PTR $T14[rbp-120]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 983  : {

	je	SHORT $LN3@operator

; 228  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN123@operator

; 229  :    return index_ < other.index_;

	mov	r9, r15
	sub	r9, rcx
	npad	2
$LL171@operator:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN172@operator
	inc	rcx
	test	edx, edx
	jne	SHORT $LL171@operator
$LN172@operator:
	test	r8d, r8d
	jmp	SHORT $LN176@operator
$LN123@operator:

; 230  : }

	cmp	DWORD PTR [rax+40], esi
$LN176@operator:

; 983  : {

	sete	cl
	test	cl, cl
	je	SHORT $LN3@operator

; 984  :    JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );

	lea	rbx, QWORD PTR [rax+48]
	jmp	SHORT $LN162@operator
$LN3@operator:

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	mov	QWORD PTR defaultValue$[rbp-120], r15

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	mov	DWORD PTR defaultValue$[rbp-112], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility

; 149  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	lea	rdx, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	lea	rcx, QWORD PTR defaultValue$[rbp-104]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 987  : #ifndef JSON_VALUE_USE_INTERNAL_MAP

	mov	rbx, QWORD PTR [r14]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1184 :         return iterator(_Emplace_hint(_Where._Ptr, _STD forward<_Valtys>(_Vals)...), _Scary);

	lea	r8, QWORD PTR defaultValue$[rbp-120]
	mov	rdx, QWORD PTR it$[rbp-120]
	mov	rcx, rbx
	call	??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>
	mov	QWORD PTR $T20[rbp-120], rax

; 40   :         this->_Adopt(_Plist);

	mov	rdx, rbx
	lea	rcx, QWORD PTR $T20[rbp-120]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 987  : #ifndef JSON_VALUE_USE_INTERNAL_MAP

	mov	rax, QWORD PTR $T20[rbp-120]
	mov	QWORD PTR it$[rbp-120], rax

; 988  :    CZString key( index );

	lea	rbx, QWORD PTR [rax+48]
	lea	rcx, QWORD PTR defaultValue$[rbp-104]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR defaultValue$[rbp-120], 0
	je	SHORT $LN161@operator
	cmp	DWORD PTR defaultValue$[rbp-112], 1
	jne	SHORT $LN161@operator

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	r8, QWORD PTR [rcx]
	mov	rdx, QWORD PTR defaultValue$[rbp-120]
	call	QWORD PTR [r8+16]
	npad	1
$LN161@operator:
$LN162@operator:

; 988  :    CZString key( index );

	mov	rax, rbx

; 989  :    ObjectValues::iterator it = value_.map_->lower_bound( key );
; 990  :    if ( it != value_.map_->end()  &&  (*it).first == key )
; 991  :       return (*it).second;
; 992  : 

	add	rsp, 120				; 00000078H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
??AValue@Json@@QEAAAEAV01@I@Z ENDP			; Json::Value::operator[]
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T2 = 32
key$ = 32
$T1 = 48
defaultValue$ = 72
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
_Proxy$21 = 184
index$ = 184
$S10$22 = 192
it$ = 200
?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$3
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$3
$T2 = 32
key$ = 32
$T1 = 48
defaultValue$ = 72
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
_Proxy$21 = 184
index$ = 184
$S10$22 = 192
it$ = 200
?dtor$0@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$0@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$0
$T2 = 32
key$ = 32
$T1 = 48
defaultValue$ = 72
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
_Proxy$21 = 184
index$ = 184
$S10$22 = 192
it$ = 200
?dtor$1@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$1
	lea	rcx, QWORD PTR key$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$1
$T2 = 32
key$ = 32
$T1 = 48
defaultValue$ = 72
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
_Proxy$21 = 184
index$ = 184
$S10$22 = 192
it$ = 200
?dtor$10@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$10
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$10@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$10
$T2 = 32
key$ = 32
$T1 = 48
defaultValue$ = 72
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
_Proxy$21 = 184
index$ = 184
$S10$22 = 192
it$ = 200
?dtor$2@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$2
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
?dtor$2@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T2 = 32
key$ = 32
$T1 = 48
defaultValue$ = 72
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
_Proxy$21 = 184
index$ = 184
$S10$22 = 192
it$ = 200
?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$3
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$3@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T2 = 32
key$ = 32
$T1 = 48
defaultValue$ = 72
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
_Proxy$21 = 184
index$ = 184
$S10$22 = 192
it$ = 200
?dtor$0@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$0@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T2 = 32
key$ = 32
$T1 = 48
defaultValue$ = 72
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
_Proxy$21 = 184
index$ = 184
$S10$22 = 192
it$ = 200
?dtor$1@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$1
	lea	rcx, QWORD PTR key$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T2 = 32
key$ = 32
$T1 = 48
defaultValue$ = 72
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
_Proxy$21 = 184
index$ = 184
$S10$22 = 192
it$ = 200
?dtor$10@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$10
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$10@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$10
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T2 = 32
key$ = 32
$T1 = 48
defaultValue$ = 72
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
_Proxy$21 = 184
index$ = 184
$S10$22 = 192
it$ = 200
?dtor$2@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA PROC	; `Json::Value::operator[]'::`1'::dtor$2
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
?dtor$2@?0???AValue@Json@@QEAAAEAV01@I@Z@4HA ENDP	; `Json::Value::operator[]'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isValidIndex@Value@Json@@QEBA_NI@Z
_TEXT	SEGMENT
$T3 = 48
this$ = 48
index$ = 56
itLast$5 = 64
?isValidIndex@Value@Json@@QEBA_NI@Z PROC		; Json::Value::isValidIndex, COMDAT

; 1056 :    const Value *value = &((*this)[index]);

$LN29:
	push	rbx
	sub	rsp, 32					; 00000020H

; 875  : }

	movzx	eax, BYTE PTR [rcx+8]

; 1056 :    const Value *value = &((*this)[index]);

	mov	ebx, edx

; 875  : }

	test	al, al
	js	SHORT $LN10@isValidInd
	cmp	al, 5
	jle	SHORT $LN10@isValidInd
	cmp	al, 6
	je	SHORT $LN7@isValidInd
	cmp	al, 7
	jne	SHORT $LN10@isValidInd

; 891  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 892  :    case arrayValue:  // size of the array is highest index + 1
; 893  :       if ( !value_.map_->empty() )
; 894  :       {

	mov	rax, QWORD PTR [rcx]
	mov	ecx, DWORD PTR [rax+8]

; 1057 :    return value == &null ? defaultValue : *value;

	cmp	edx, ecx
	setb	al

; 1058 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN7@isValidInd:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1314 :         return size() == 0;

	mov	rdx, QWORD PTR [rcx]
	cmp	QWORD PTR [rdx+8], 0
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 886  :    case uintValue:

	je	SHORT $LN10@isValidInd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	rax, QWORD PTR [rdx]

; 40   :         this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T3[rsp]
	mov	QWORD PTR $T3[rsp], rax
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 888  :    case booleanValue:

	mov	rax, QWORD PTR $T3[rsp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 215  :         _Mybase::operator--();

	lea	rcx, QWORD PTR itLast$5[rsp]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 888  :    case booleanValue:

	mov	QWORD PTR itLast$5[rsp], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 215  :         _Mybase::operator--();

	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 890  :       return 0;

	mov	rax, QWORD PTR itLast$5[rsp]
	mov	ecx, DWORD PTR [rax+40]
	inc	ecx

; 1057 :    return value == &null ? defaultValue : *value;

	cmp	ebx, ecx
	setb	al

; 1058 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN10@isValidInd:

; 1057 :    return value == &null ? defaultValue : *value;

	xor	ecx, ecx
	cmp	ebx, ecx
	setb	al

; 1058 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?isValidIndex@Value@Json@@QEBA_NI@Z ENDP		; Json::Value::isValidIndex
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?append@Value@Json@@QEAAAEAV12@AEBV12@@Z
_TEXT	SEGMENT
$T3 = 48
this$ = 48
value$ = 56
itLast$5 = 64
?append@Value@Json@@QEAAAEAV12@AEBV12@@Z PROC		; Json::Value::append, COMDAT

; 1119 :    return (*this)[ key.c_str() ];

$LN29:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 875  : }

	movzx	eax, BYTE PTR [rcx+8]

; 1119 :    return (*this)[ key.c_str() ];

	mov	rdi, rdx
	mov	rbx, rcx

; 875  : }

	test	al, al
	js	SHORT $LN10@append
	cmp	al, 5
	jle	SHORT $LN10@append
	cmp	al, 6
	je	SHORT $LN7@append
	cmp	al, 7
	jne	SHORT $LN10@append

; 893  :       if ( !value_.map_->empty() )
; 894  :       {

	mov	rax, QWORD PTR [rcx]
	mov	edx, DWORD PTR [rax+8]
	jmp	SHORT $LN3@append
$LN7@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1314 :         return size() == 0;

	mov	rdx, QWORD PTR [rcx]
	cmp	QWORD PTR [rdx+8], 0
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 886  :    case uintValue:

	je	SHORT $LN10@append
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	rax, QWORD PTR [rdx]

; 40   :         this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T3[rsp]
	mov	QWORD PTR $T3[rsp], rax
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 888  :    case booleanValue:

	mov	rax, QWORD PTR $T3[rsp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 215  :         _Mybase::operator--();

	lea	rcx, QWORD PTR itLast$5[rsp]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 888  :    case booleanValue:

	mov	QWORD PTR itLast$5[rsp], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 215  :         _Mybase::operator--();

	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 890  :       return 0;

	mov	rax, QWORD PTR itLast$5[rsp]
	mov	edx, DWORD PTR [rax+40]
	inc	edx

; 891  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 892  :    case arrayValue:  // size of the array is highest index + 1

	jmp	SHORT $LN3@append
$LN10@append:

; 1120 : }

	xor	edx, edx
$LN3@append:
	mov	rcx, rbx
	call	??AValue@Json@@QEAAAEAV01@I@Z		; Json::Value::operator[]
	mov	rcx, rax
	mov	rdx, rdi
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=

; 1121 : # endif

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?append@Value@Json@@QEAAAEAV12@AEBV12@@Z ENDP		; Json::Value::append
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
this$ = 48
key$ = 56
?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::isMember, COMDAT

; 1191 :    const Value *value = &((*this)[key]);

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 1192 :    return value != &null;

	mov	rcx, rdx
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str

; 1184 :    return get( key.c_str(), defaultValue );

	mov	rdx, rax
	mov	rcx, rbx
	call	??AValue@Json@@QEBAAEBV01@PEBD@Z	; Json::Value::operator[]

; 1185 : }

	lea	rcx, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	cmp	rax, rcx
	setne	al

; 1193 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?isMember@Value@Json@@QEBA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::isMember
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?type@Value@Json@@QEBA?AW4ValueType@2@XZ
_TEXT	SEGMENT
this$ = 8
?type@Value@Json@@QEBA?AW4ValueType@2@XZ PROC		; Json::Value::type, COMDAT

; 530  :    allocated_ = other.allocated_;

	movsx	eax, BYTE PTR [rcx+8]

; 531  :    other.allocated_ = temp2;

	ret	0
?type@Value@Json@@QEBA?AW4ValueType@2@XZ ENDP		; Json::Value::type
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asCString@Value@Json@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?asCString@Value@Json@@QEBAPEBDXZ PROC			; Json::Value::asCString, COMDAT

; 679  : {
; 680  :    return !( *this == other );

	mov	rax, QWORD PTR [rcx]

; 681  : }

	ret	0
?asCString@Value@Json@@QEBAPEBDXZ ENDP			; Json::Value::asCString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asUInt@Value@Json@@QEBAIXZ
_TEXT	SEGMENT
$T3 = 32
$T2 = 32
$T1 = 32
this$ = 80
?asUInt@Value@Json@@QEBAIXZ PROC			; Json::Value::asUInt, COMDAT

; 744  :       JSON_ASSERT_UNREACHABLE;

$LN20:
	sub	rsp, 72					; 00000048H

; 745  :    }

	movsx	rax, BYTE PTR [rcx+8]
	cmp	eax, 7
	ja	SHORT $LN13@asUInt
	lea	r8, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN16@asUInt[r8+rax*4]
	add	rdx, r8
	jmp	rdx
$LN5@asUInt:

; 746  :    return 0; // unreachable;
; 747  : }
; 748  : 
; 749  : Value::UInt 
; 750  : Value::asUInt() const

	mov	eax, DWORD PTR [rcx]
	test	eax, eax
	js	SHORT $LN19@asUInt
	jmp	SHORT $LN1@asUInt
$LN7@asUInt:

; 751  : {
; 752  :    switch ( type_ )
; 753  :    {

	mov	eax, DWORD PTR [rcx]

; 767  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN8@asUInt:

; 754  :    case nullValue:
; 755  :       return 0;

	movsd	xmm1, QWORD PTR [rcx]
	xorps	xmm0, xmm0
	comisd	xmm1, xmm0
	jb	SHORT $LN10@asUInt
	movsd	xmm0, QWORD PTR __real@41efffffffe00000
	comisd	xmm0, xmm1
	jb	SHORT $LN10@asUInt

; 756  :    case intValue:

	cvttsd2si rax, xmm1

; 767  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN11@asUInt:

; 757  :       JSON_ASSERT_MESSAGE( value_.int_ >= 0, "Negative integer can not be converted to unsigned integer" );
; 758  :       return value_.int_;

	xor	eax, eax
	cmp	BYTE PTR [rcx], al
	setne	al

; 767  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN13@asUInt:

; 763  :       return UInt( value_.real_ );
; 764  :    case booleanValue:
; 765  :       return value_.bool_ ? 1 : 0;
; 766  :    case stringValue:

	xor	eax, eax
$LN1@asUInt:

; 767  :    case arrayValue:

	add	rsp, 72					; 00000048H
	ret	0
$LN19@asUInt:

; 746  :    return 0; // unreachable;
; 747  : }
; 748  : 
; 749  : Value::UInt 
; 750  : Value::asUInt() const

	lea	rdx, OFFSET FLAT:??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5con@
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
	int	3
$LN10@asUInt:

; 754  :    case nullValue:
; 755  :       return 0;

	lea	rdx, OFFSET FLAT:??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ra@
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T2[rsp]
	call	_CxxThrowException
	int	3
$LN12@asUInt:

; 759  :    case uintValue:
; 760  :       return value_.uint_;
; 761  :    case realValue:
; 762  :       JSON_ASSERT_MESSAGE( value_.real_ >= 0  &&  value_.real_ <= maxUInt,  "Real out of unsigned integer range" );

	lea	rdx, OFFSET FLAT:??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint@
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T3[rsp]
	call	_CxxThrowException
	int	3
$LN17@asUInt:
	npad	2
$LN16@asUInt:

; 767  :    case arrayValue:

	DD	$LN13@asUInt
	DD	$LN5@asUInt
	DD	$LN7@asUInt
	DD	$LN8@asUInt
	DD	$LN12@asUInt
	DD	$LN11@asUInt
	DD	$LN12@asUInt
	DD	$LN12@asUInt
?asUInt@Value@Json@@QEBAIXZ ENDP			; Json::Value::asUInt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
this$ = 48
key$ = 56
??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::operator[], COMDAT

; 1090 : {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 1091 :    return (*this)[ key.c_str() ];

	mov	rcx, rdx
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rdx, rax
	mov	rcx, rbx

; 1092 : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 1091 :    return (*this)[ key.c_str() ];

	jmp	??AValue@Json@@QEBAAEBV01@PEBD@Z	; Json::Value::operator[]
??AValue@Json@@QEBAAEBV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QEBAAEBV01@I@Z
_TEXT	SEGMENT
$T4 = 48
this$ = 48
index$ = 56
$T5 = 64
??AValue@Json@@QEBAAEBV01@I@Z PROC			; Json::Value::operator[], COMDAT

; 997  :    return value_.array_->resolveReference( index );

$LN68:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	r10d, edx
	mov	rbx, rcx

; 998  : #endif
; 999  : }

	cmp	BYTE PTR [rcx+8], 0
	jne	SHORT $LN2@operator

; 1000 : 

	lea	rax, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null

; 1007 :       return null;
; 1008 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1009 :    CZString key( index );
; 1010 :    ObjectValues::const_iterator it = value_.map_->find( key );
; 1011 :    if ( it == value_.map_->end() )

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@operator:

; 1001 : 
; 1002 : const Value &
; 1003 : Value::operator[]( UInt index ) const

	mov	rdi, QWORD PTR [rcx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1704 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	r11, QWORD PTR [rdi]
	mov	rdx, QWORD PTR [r11+8]
	mov	r9, r11

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN15@operator
	npad	5
$LL14@operator:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rdx+32]
	test	rax, rax
	je	SHORT $LN22@operator

; 221  :    return *this;

	xor	r8d, r8d
	sub	r8, rax
	npad	1
$LL63@operator:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+r8]
	jne	SHORT $LN65@operator
	inc	rax
	test	cl, cl
	jne	SHORT $LL63@operator
	xor	eax, eax
	shr	eax, 31
	jmp	SHORT $LN21@operator
$LN65@operator:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN21@operator
$LN22@operator:

; 222  : }

	cmp	DWORD PTR [rdx+40], r10d
	setl	al
$LN21@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1708 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	test	al, al
	je	SHORT $LN16@operator

; 1709 :                 _Result._Location._Child = _Tree_child::_Right;
; 1710 :                 _Trynode                 = _Trynode->_Right;

	mov	rdx, QWORD PTR [rdx+16]

; 1711 :             } else {

	jmp	SHORT $LN17@operator
$LN16@operator:

; 1712 :                 _Result._Location._Child = _Tree_child::_Left;
; 1713 :                 _Result._Bound           = _Trynode;

	mov	r9, rdx

; 1714 :                 _Trynode                 = _Trynode->_Left;

	mov	rdx, QWORD PTR [rdx]
$LN17@operator:

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [rdx+25], 0
	je	SHORT $LL14@operator
$LN15@operator:

; 1698 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	cmp	BYTE PTR [r9+25], 0
	jne	SHORT $LN11@operator
	cmp	r10d, DWORD PTR [r9+40]
	jge	SHORT $LN10@operator
$LN11@operator:

; 1461 :         return _Get_scary()->_Myhead;

	mov	r9, r11
$LN10@operator:

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	QWORD PTR $T4[rsp], r9

; 40   :         this->_Adopt(_Plist);

	mov	rdx, rdi
	lea	rcx, QWORD PTR $T4[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1247 :         const auto _Scary = _Get_scary();

	mov	rdx, QWORD PTR [rbx]

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR $T5[rsp], rax

; 40   :         this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T5[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 232  :         return this->_Ptr == _Right._Ptr;

	mov	rax, QWORD PTR $T4[rsp]
	cmp	rax, QWORD PTR $T5[rsp]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1004 : {

	jne	SHORT $LN3@operator
	lea	rax, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	jmp	SHORT $LN5@operator
$LN3@operator:

; 1005 :    JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );
; 1006 :    if ( type_ == nullValue )

	add	rax, 48					; 00000030H
$LN5@operator:

; 1007 :       return null;
; 1008 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1009 :    CZString key( index );
; 1010 :    ObjectValues::const_iterator it = value_.map_->find( key );
; 1011 :    if ( it == value_.map_->end() )

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??AValue@Json@@QEBAAEBV01@I@Z ENDP			; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vector
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vector
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
_TEXT	SEGMENT
$T9 = 32
$T8 = 32
$T4 = 40
$T2 = 40
members$ = 48
__$ReturnUdt$GSCopy$ = 72
it$ = 72
$T7 = 80
__$ArrayPad$ = 112
this$ = 160
__$ReturnUdt$ = 168
?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ PROC ; Json::Value::getMemberNames, COMDAT

; 1206 : {

$LN55:
	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	rsi
	push	rdi
	mov	rbp, rsp
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-128], rax
	mov	rsi, rdx
	mov	rdi, rcx
	mov	QWORD PTR __$ReturnUdt$GSCopy$[rbp-128], rdx

; 1207 :    return isMember( key.c_str() );
; 1208 : }

	cmp	BYTE PTR [rcx+8], 0
	jne	SHORT $LN5@getMemberN

; 1209 : #endif

	mov	rcx, rdx
	call	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	jmp	$LN51@getMemberN
$LN5@getMemberN:

; 1210 : 

	lea	rcx, QWORD PTR members$[rbp-128]
	call	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	npad	1

; 1211 : Value::Members 

	mov	rax, QWORD PTR [rdi]
	mov	rbx, QWORD PTR [rax+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vector

; 1307 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

	lea	rcx, QWORD PTR members$[rbp-128]
	call	?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEBA_KXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
	cmp	rbx, rax
	jbe	SHORT $LN12@getMemberN

; 1308 :             if (_Newcapacity > max_size()) {

	lea	rcx, QWORD PTR members$[rbp-128]
	call	?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEBA_KXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
	cmp	rbx, rax
	ja	$LN53@getMemberN

; 1310 :             }
; 1311 : 
; 1312 :             _Reallocate_exactly(_Newcapacity);

	mov	rdx, rbx
	lea	rcx, QWORD PTR members$[rbp-128]
	call	?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAX_K@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
$LN12@getMemberN:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1237 :         const auto _Scary = _Get_scary();

	mov	rdx, QWORD PTR [rdi]

; 1238 :         return iterator(_Scary->_Myhead->_Left, _Scary);

	mov	rax, QWORD PTR [rdx]

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR $T2[rbp-128], rcx

; 40   :         this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T2[rbp-128]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1213 : {

	mov	rbx, QWORD PTR $T2[rbp-128]
	mov	QWORD PTR it$[rbp-128], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1247 :         const auto _Scary = _Get_scary();

	mov	rdx, QWORD PTR [rdi]

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR $T4[rbp-128], rax

; 40   :         this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T4[rbp-128]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 232  :         return this->_Ptr == _Right._Ptr;

	mov	rdi, QWORD PTR $T4[rbp-128]
	cmp	rbx, rdi
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1215 :    if ( type_ == nullValue )

	je	SHORT $LN3@getMemberN
	npad	12
$LL4@getMemberN:

; 1216 :        return Value::Members();

	mov	rdx, QWORD PTR [rbx+32]
	lea	rcx, QWORD PTR $T7[rbp-128]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	rdx, rax
	lea	rcx, QWORD PTR members$[rbp-128]
	call	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAAX$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
	npad	1
	lea	rcx, QWORD PTR $T7[rbp-128]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 198  :         _Mybase::operator++();

	lea	rcx, QWORD PTR it$[rbp-128]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++

; 232  :         return this->_Ptr == _Right._Ptr;

	mov	rbx, QWORD PTR it$[rbp-128]
	cmp	rbx, rdi
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1215 :    if ( type_ == nullValue )

	jne	SHORT $LL4@getMemberN
$LN3@getMemberN:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vector

; 582  :     vector(vector&& _Right) noexcept : _Mypair(_One_then_variadic_args_t(), _STD move(_Right._Getal())) {

	lea	rcx, QWORD PTR members$[rbp-128]
	call	?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAAEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
	mov	r8, rax
	movzx	edx, BYTE PTR $T8[rbp-128]
	mov	rcx, rsi
	call	??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 583  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	lea	rdx, QWORD PTR $T9[rbp-128]
	mov	rcx, rsi
	call	?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy

; 384  :         this->_Swap_proxy_and_iterators(_Right);

	lea	rdx, QWORD PTR members$[rbp-128]
	mov	rcx, rsi
	call	?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z ; std::_Container_base0::_Swap_proxy_and_iterators

; 385  :         _Myfirst = _Right._Myfirst;

	mov	rax, QWORD PTR members$[rbp-128]
	mov	QWORD PTR [rsi], rax

; 386  :         _Mylast  = _Right._Mylast;

	mov	rax, QWORD PTR members$[rbp-120]
	mov	QWORD PTR [rsi+8], rax

; 387  :         _Myend   = _Right._Myend;

	mov	rax, QWORD PTR members$[rbp-112]
	mov	QWORD PTR [rsi+16], rax
	xorps	xmm0, xmm0

; 388  : 
; 389  :         _Right._Myfirst = pointer();

	movdqu	XMMWORD PTR members$[rbp-128], xmm0

; 390  :         _Right._Mylast  = pointer();
; 391  :         _Right._Myend   = pointer();

	mov	QWORD PTR members$[rbp-112], 0
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1225 :    ValueInternalMap::IteratorState it;

	lea	rcx, QWORD PTR members$[rbp-128]
	call	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
$LN51@getMemberN:

; 1226 :    ValueInternalMap::IteratorState itEnd;

	mov	rax, rsi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp-128]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rbx, QWORD PTR [rsp+176]
	add	rsp, 128				; 00000080H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN53@getMemberN:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vector

; 1309 :                 _Xlength();

	call	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
	npad	1
$LN50@getMemberN:
?getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ENDP ; Json::Value::getMemberNames
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T9 = 32
$T8 = 32
$T4 = 40
$T2 = 40
members$ = 48
__$ReturnUdt$GSCopy$ = 72
it$ = 72
$T7 = 80
__$ArrayPad$ = 112
this$ = 160
__$ReturnUdt$ = 168
?dtor$1@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA PROC ; `Json::Value::getMemberNames'::`1'::dtor$1
	lea	rcx, QWORD PTR members$[rdx]
	jmp	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
?dtor$1@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA ENDP ; `Json::Value::getMemberNames'::`1'::dtor$1
$T9 = 32
$T8 = 32
$T4 = 40
$T2 = 40
members$ = 48
__$ReturnUdt$GSCopy$ = 72
it$ = 72
$T7 = 80
__$ArrayPad$ = 112
this$ = 160
__$ReturnUdt$ = 168
?dtor$2@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA PROC ; `Json::Value::getMemberNames'::`1'::dtor$2
	lea	rcx, QWORD PTR $T7[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA ENDP ; `Json::Value::getMemberNames'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T9 = 32
$T8 = 32
$T4 = 40
$T2 = 40
members$ = 48
__$ReturnUdt$GSCopy$ = 72
it$ = 72
$T7 = 80
__$ArrayPad$ = 112
this$ = 160
__$ReturnUdt$ = 168
?dtor$1@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA PROC ; `Json::Value::getMemberNames'::`1'::dtor$1
	lea	rcx, QWORD PTR members$[rdx]
	jmp	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
?dtor$1@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA ENDP ; `Json::Value::getMemberNames'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T9 = 32
$T8 = 32
$T4 = 40
$T2 = 40
members$ = 48
__$ReturnUdt$GSCopy$ = 72
it$ = 72
$T7 = 80
__$ArrayPad$ = 112
this$ = 160
__$ReturnUdt$ = 168
?dtor$2@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA PROC ; `Json::Value::getMemberNames'::`1'::dtor$2
	lea	rcx, QWORD PTR $T7[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??getMemberNames@Value@Json@@QEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ@4HA ENDP ; `Json::Value::getMemberNames'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?hasComment@Value@Json@@QEBA_NW4CommentPlacement@2@@Z
_TEXT	SEGMENT
this$ = 8
placement$ = 16
?hasComment@Value@Json@@QEBA_NW4CommentPlacement@2@@Z PROC ; Json::Value::hasComment, COMDAT

; 1347 :    setComment( comment.c_str(), placement );

	mov	r8, QWORD PTR [rcx+16]
	test	r8, r8
	je	SHORT $LN3@hasComment
	movsxd	rax, edx
	cmp	QWORD PTR [r8+rax*8], 0
	je	SHORT $LN3@hasComment
	mov	al, 1

; 1348 : }

	ret	0
$LN3@hasComment:

; 1347 :    setComment( comment.c_str(), placement );

	xor	al, al

; 1348 : }

	ret	0
?hasComment@Value@Json@@QEBA_NW4CommentPlacement@2@@Z ENDP ; Json::Value::hasComment
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
placement$ = 64
?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z PROC ; Json::Value::getComment, COMDAT

; 1352 : Value::hasComment( CommentPlacement placement ) const

$LN15:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 1347 :    setComment( comment.c_str(), placement );

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN2@getComment
	movsxd	rax, r8d
	mov	rdx, QWORD PTR [rdx+rax*8]
	test	rdx, rdx
	jne	SHORT $LN12@getComment
$LN2@getComment:

; 1353 : {
; 1354 :    return comments_ != 0  &&  comments_[placement].comment_ != 0;
; 1355 : }

	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
$LN12@getComment:

; 1356 : 

	mov	rcx, rbx
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?getComment@Value@Json@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ENDP ; Json::Value::getComment
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBD@Z
_TEXT	SEGMENT
_InitData$ = 32
this$ = 64
_Message$ = 72
??0exception@std@@QEAA@QEBD@Z PROC			; std::exception::exception, COMDAT

; 56   :     {

$LN5:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx

; 57   :         __std_exception_data _InitData = { _Message, true };

	mov	BYTE PTR _InitData$[rsp+8], 1
	mov	rax, rdx
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	lea	rdx, QWORD PTR [rbx+8]
	mov	QWORD PTR _InitData$[rsp], rax
	xorps	xmm0, xmm0
	mov	QWORD PTR [rbx], rcx

; 58   :         __std_exception_copy(&_InitData, &_Data);

	lea	rcx, QWORD PTR _InitData$[rsp]
	movups	XMMWORD PTR [rdx], xmm0
	call	QWORD PTR __imp___std_exception_copy

; 59   :     }

	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0exception@std@@QEAA@QEBD@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stdexcept
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stdexcept
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stdexcept
;	COMDAT ??0runtime_error@std@@QEAA@PEBD@Z
_TEXT	SEGMENT
_InitData$1 = 32
this$ = 64
_Message$ = 72
??0runtime_error@std@@QEAA@PEBD@Z PROC			; std::runtime_error::runtime_error, COMDAT

; 123  :     explicit runtime_error(const char* _Message) : _Mybase(_Message) {}

$LN7:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vcruntime_exception.h

; 57   :         __std_exception_data _InitData = { _Message, true };

	mov	BYTE PTR _InitData$1[rsp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stdexcept

; 123  :     explicit runtime_error(const char* _Message) : _Mybase(_Message) {}

	mov	rax, rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vcruntime_exception.h

; 56   :     {

	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	lea	rdx, QWORD PTR [rbx+8]

; 57   :         __std_exception_data _InitData = { _Message, true };

	mov	QWORD PTR _InitData$1[rsp], rax
	xorps	xmm0, xmm0

; 56   :     {

	mov	QWORD PTR [rbx], rcx

; 58   :         __std_exception_copy(&_InitData, &_Data);

	lea	rcx, QWORD PTR _InitData$1[rsp]
	movups	XMMWORD PTR [rdx], xmm0
	call	QWORD PTR __imp___std_exception_copy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\stdexcept

; 123  :     explicit runtime_error(const char* _Message) : _Mybase(_Message) {}

	lea	rax, OFFSET FLAT:??_7runtime_error@std@@6B@
	mov	QWORD PTR [rbx], rax
	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0runtime_error@std@@QEAA@PEBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_Gruntime_error@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gruntime_error@std@@UEAAPEAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
$LN10:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, edx
	mov	rdi, rcx
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	test	bl, 1
	je	SHORT $LN7@scalar
	mov	edx, 24
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
$LN7@scalar:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gruntime_error@std@@UEAAPEAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1runtime_error@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1runtime_error@std@@UEAA@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
	jmp	??1exception@std@@UEAA@XZ		; std::exception::~exception
??1runtime_error@std@@UEAA@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0runtime_error@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0runtime_error@std@@QEAA@AEBV01@@Z PROC		; std::runtime_error::runtime_error, COMDAT
$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	lea	rax, OFFSET FLAT:??_7runtime_error@std@@6B@
	mov	QWORD PTR [rbx], rax
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0runtime_error@std@@QEAA@AEBV01@@Z ENDP		; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??__E?null@Value@Json@@2V12@B@@YAXXZ
text$di	SEGMENT
??__E?null@Value@Json@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Json::Value::null'', COMDAT

; 270  : 

	and	DWORD PTR ?null@Value@Json@@2V12@B+8, -257 ; fffffffffffffeffH

; 22   : #include <stdio.h>

	lea	rcx, OFFSET FLAT:??__F?null@Value@Json@@2V12@B@@YAXXZ ; `dynamic atexit destructor for 'Json::Value::null''
	jmp	atexit
??__E?null@Value@Json@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Json::Value::null''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__F?null@Value@Json@@2V12@B@@YAXXZ
text$yd	SEGMENT
??__F?null@Value@Json@@2V12@B@@YAXXZ PROC		; `dynamic atexit destructor for 'Json::Value::null'', COMDAT
	lea	rcx, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
??__F?null@Value@Json@@2V12@B@@YAXXZ ENDP		; `dynamic atexit destructor for 'Json::Value::null''
text$yd	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1ValueAllocator@Json@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1ValueAllocator@Json@@UEAA@XZ PROC			; Json::ValueAllocator::~ValueAllocator, COMDAT

; 56   : //      newString[length] = 0;

	lea	rax, OFFSET FLAT:??_7ValueAllocator@Json@@6B@
	mov	QWORD PTR [rcx], rax

; 57   : //      return newString;

	ret	0
??1ValueAllocator@Json@@UEAA@XZ ENDP			; Json::ValueAllocator::~ValueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GValueAllocator@Json@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GValueAllocator@Json@@UEAAPEAXI@Z PROC		; Json::ValueAllocator::`scalar deleting destructor', COMDAT
$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7ValueAllocator@Json@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	test	dl, 1
	je	SHORT $LN4@scalar
	mov	edx, 8
	call	??3@YAXPEAX_K@Z				; operator delete
$LN4@scalar:
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_GValueAllocator@Json@@UEAAPEAXI@Z ENDP		; Json::ValueAllocator::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1DefaultValueAllocator@Json@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1DefaultValueAllocator@Json@@UEAA@XZ PROC		; Json::DefaultValueAllocator::~DefaultValueAllocator, COMDAT

; 64   : }

	lea	rax, OFFSET FLAT:??_7ValueAllocator@Json@@6B@
	mov	QWORD PTR [rcx], rax
	ret	0
??1DefaultValueAllocator@Json@@UEAA@XZ ENDP		; Json::DefaultValueAllocator::~DefaultValueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?makeMemberName@DefaultValueAllocator@Json@@UEAAPEADPEBD@Z
_TEXT	SEGMENT
this$ = 8
memberName$ = 16
?makeMemberName@DefaultValueAllocator@Json@@UEAAPEADPEBD@Z PROC ; Json::DefaultValueAllocator::makeMemberName, COMDAT

; 68   : public:

	mov	rax, QWORD PTR [rcx]
	mov	r8d, -1					; ffffffffH
	rex_jmp	QWORD PTR [rax+24]
?makeMemberName@DefaultValueAllocator@Json@@UEAAPEADPEBD@Z ENDP ; Json::DefaultValueAllocator::makeMemberName
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?releaseMemberName@DefaultValueAllocator@Json@@UEAAXPEAD@Z
_TEXT	SEGMENT
this$ = 8
memberName$ = 16
?releaseMemberName@DefaultValueAllocator@Json@@UEAAXPEAD@Z PROC ; Json::DefaultValueAllocator::releaseMemberName, COMDAT

; 73   :    virtual char *makeMemberName( const char *memberName )

	mov	rax, QWORD PTR [rcx]
	rex_jmp	QWORD PTR [rax+32]
?releaseMemberName@DefaultValueAllocator@Json@@UEAAXPEAD@Z ENDP ; Json::DefaultValueAllocator::releaseMemberName
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z
_TEXT	SEGMENT
this$ = 48
value$ = 56
length$ = 64
?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z PROC ; Json::DefaultValueAllocator::duplicateStringValue, COMDAT

; 78   :    virtual void releaseMemberName( char *memberName )

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	rsi, rdx

; 79   :    {
; 80   :       releaseStringValue( memberName );
; 81   :    }
; 82   : 
; 83   :    virtual char *duplicateStringValue( const char *value, 

	cmp	r8d, -1					; ffffffffH
	jne	SHORT $LN2@duplicateS

; 84   :                                        unsigned int length = unknown )

	mov	rbx, -1
$LL4@duplicateS:
	inc	rbx
	cmp	BYTE PTR [rdx+rbx], 0
	jne	SHORT $LL4@duplicateS
$LN2@duplicateS:

; 85   :    {

	lea	ecx, DWORD PTR [rbx+1]
	call	QWORD PTR __imp_malloc

; 86   :       //@todo invesgate this old optimization

	mov	ebx, ebx
	mov	rdx, rsi
	mov	r8d, ebx
	mov	rcx, rax
	mov	rdi, rax
	call	memcpy

; 87   :       //if ( !value  ||  value[0] == 0 )
; 88   :       //   return 0;
; 89   : 

	mov	rsi, QWORD PTR [rsp+56]
	mov	rax, rdi
	mov	BYTE PTR [rbx+rdi], 0
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?duplicateStringValue@DefaultValueAllocator@Json@@UEAAPEADPEBDI@Z ENDP ; Json::DefaultValueAllocator::duplicateStringValue
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?releaseStringValue@DefaultValueAllocator@Json@@UEAAXPEAD@Z
_TEXT	SEGMENT
this$ = 8
value$ = 16
?releaseStringValue@DefaultValueAllocator@Json@@UEAAXPEAD@Z PROC ; Json::DefaultValueAllocator::releaseStringValue, COMDAT

; 93   :       memcpy( newString, value, length );

	test	rdx, rdx
	je	SHORT $LN2@releaseStr

; 94   :       newString[length] = 0;

	mov	rcx, rdx
	rex_jmp	QWORD PTR __imp_free
$LN2@releaseStr:

; 95   :       return newString;

	ret	0
?releaseStringValue@DefaultValueAllocator@Json@@UEAAXPEAD@Z ENDP ; Json::DefaultValueAllocator::releaseStringValue
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z PROC	; Json::DefaultValueAllocator::`scalar deleting destructor', COMDAT
$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7ValueAllocator@Json@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	test	dl, 1
	je	SHORT $LN4@scalar
	mov	edx, 8
	call	??3@YAXPEAX_K@Z				; operator delete
$LN4@scalar:
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_GDefaultValueAllocator@Json@@UEAAPEAXI@Z ENDP	; Json::DefaultValueAllocator::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ
_TEXT	SEGMENT
?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ PROC	; Json::valueAllocator, COMDAT

; 99   :    {

	sub	rsp, 40					; 00000028H

; 100  :       if ( value )

	mov	rax, QWORD PTR gs:88
	mov	edx, OFFSET FLAT:_Init_thread_epoch
	mov	rcx, QWORD PTR [rax]
	mov	eax, DWORD PTR [rdx+rcx]
	cmp	DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4HA, eax
	jle	SHORT $LN9@valueAlloc
	lea	rcx, OFFSET FLAT:?$TSS0@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4HA
	call	_Init_thread_header
	cmp	DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4HA, -1
	jne	SHORT $LN9@valueAlloc
	lea	rax, OFFSET FLAT:??_7DefaultValueAllocator@Json@@6B@
	lea	rcx, OFFSET FLAT:??__FdefaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	QWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, rax
	call	atexit
	lea	rcx, OFFSET FLAT:?$TSS0@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4HA
	call	_Init_thread_footer
$LN9@valueAlloc:

; 101  :          free( value );
; 102  :    }
; 103  : };

	lea	rax, OFFSET FLAT:?valueAllocator@?1??0Json@@YAAEAPEAVValueAllocator@1@XZ@4PEAV21@EA
	add	rsp, 40					; 00000028H
	ret	0
?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ENDP	; Json::valueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ@YAXXZ
text$yd	SEGMENT
??__FdefaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ@YAXXZ PROC ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator'', COMDAT
	lea	rax, OFFSET FLAT:??_7ValueAllocator@Json@@6B@
	mov	QWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, rax
	ret	0
??__FdefaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ@YAXXZ ENDP ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
text$yd	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0DefaultValueAllocator@Json@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??0DefaultValueAllocator@Json@@QEAA@XZ PROC		; Json::DefaultValueAllocator::DefaultValueAllocator, COMDAT
	lea	rax, OFFSET FLAT:??_7DefaultValueAllocator@Json@@6B@
	mov	QWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, rax
	lea	rax, OFFSET FLAT:?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A
	ret	0
??0DefaultValueAllocator@Json@@QEAA@XZ ENDP		; Json::DefaultValueAllocator::DefaultValueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0ValueAllocator@Json@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??0ValueAllocator@Json@@QEAA@XZ PROC			; Json::ValueAllocator::ValueAllocator, COMDAT
	lea	rax, OFFSET FLAT:??_7ValueAllocator@Json@@6B@
	mov	QWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, rax
	lea	rax, OFFSET FLAT:?defaultAllocator@?1??valueAllocator@Json@@YAAEAPEAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A
	ret	0
??0ValueAllocator@Json@@QEAA@XZ ENDP			; Json::ValueAllocator::ValueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??__EdummyValueAllocatorInitializer@Json@@YAXXZ
text$di	SEGMENT
??__EdummyValueAllocatorInitializer@Json@@YAXXZ PROC	; Json::`dynamic initializer for 'dummyValueAllocatorInitializer'', COMDAT

; 108  :    static ValueAllocator *valueAllocator = &defaultAllocator;

	jmp	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
??__EdummyValueAllocatorInitializer@Json@@YAXXZ ENDP	; Json::`dynamic initializer for 'dummyValueAllocatorInitializer''
text$di	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0DummyValueAllocatorInitializer@Json@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 48
??0DummyValueAllocatorInitializer@Json@@QEAA@XZ PROC	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer, COMDAT

; 106  : {

$LN4:
	sub	rsp, 40					; 00000028H

; 107  :    static DefaultValueAllocator defaultAllocator;
; 108  :    static ValueAllocator *valueAllocator = &defaultAllocator;

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator

; 109  :    return valueAllocator;

	lea	rax, OFFSET FLAT:?dummyValueAllocatorInitializer@Json@@3UDummyValueAllocatorInitializer@1@A
	add	rsp, 40					; 00000028H
	ret	0
??0DummyValueAllocatorInitializer@Json@@QEAA@XZ ENDP	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0CommentInfo@Value@Json@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0CommentInfo@Value@Json@@QEAA@XZ PROC			; Json::Value::CommentInfo::CommentInfo, COMDAT

; 139  : // class Value::CommentInfo

	mov	QWORD PTR [rcx], 0

; 141  : // //////////////////////////////////////////////////////////////////

	mov	rax, rcx
	ret	0
??0CommentInfo@Value@Json@@QEAA@XZ ENDP			; Json::Value::CommentInfo::CommentInfo
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1CommentInfo@Value@Json@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1CommentInfo@Value@Json@@QEAA@XZ PROC			; Json::Value::CommentInfo::~CommentInfo, COMDAT

; 144  : 

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 145  : Value::CommentInfo::CommentInfo()

	cmp	QWORD PTR [rcx], 0
	je	SHORT $LN2@CommentInf

; 146  :    : comment_( 0 )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+32]
	npad	1
$LN2@CommentInf:

; 147  : {

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1CommentInfo@Value@Json@@QEAA@XZ ENDP			; Json::Value::CommentInfo::~CommentInfo
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
text$ = 88
?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z PROC	; Json::Value::CommentInfo::setComment, COMDAT

; 152  :    if ( comment_ )

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 153  :       valueAllocator()->releaseStringValue( comment_ );

	cmp	QWORD PTR [rcx], 0
	mov	rdi, rdx
	mov	rbx, rcx
	je	SHORT $LN2@setComment

; 154  : }

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rdx, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+32]
$LN2@setComment:

; 155  : 
; 156  : 

	movzx	eax, BYTE PTR [rdi]
	test	al, al
	je	SHORT $LN3@setComment
	cmp	al, 47					; 0000002fH
	jne	SHORT $LN7@setComment
$LN3@setComment:

; 157  : void 
; 158  : Value::CommentInfo::setComment( const char *text )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	r8d, -1					; ffffffffH
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
	mov	QWORD PTR [rbx], rax

; 159  : {

	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN7@setComment:

; 155  : 
; 156  : 

	lea	rdx, OFFSET FLAT:??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1@
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0runtime_error@std@@QEAA@PEBD@Z	; std::runtime_error::runtime_error
	lea	rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
	int	3
$LN5@setComment:
?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z ENDP	; Json::Value::CommentInfo::setComment
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0CZString@Value@Json@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 8
index$ = 16
??0CZString@Value@Json@@QEAA@H@Z PROC			; Json::Value::CZString::CZString, COMDAT

; 175  : // //////////////////////////////////////////////////////////////////

	mov	QWORD PTR [rcx], 0

; 178  : // Notes: index_ indicates if the string was allocated when

	mov	rax, rcx
	mov	DWORD PTR [rcx+8], edx
	ret	0
??0CZString@Value@Json@@QEAA@H@Z ENDP			; Json::Value::CZString::CZString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z
_TEXT	SEGMENT
this$ = 48
cstr$ = 56
allocate$ = 64
??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z PROC ; Json::Value::CZString::CZString, COMDAT

; 184  : {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	edi, r8d
	mov	rsi, rdx
	mov	rbx, rcx

; 181  : Value::CZString::CZString( int index )

	cmp	r8d, 1
	jne	SHORT $LN3@CZString
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rdx, rsi
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+8]
	mov	rsi, rax
$LN3@CZString:
	mov	QWORD PTR [rbx], rsi

; 185  : }

	mov	rax, rbx
	mov	rsi, QWORD PTR [rsp+56]
	mov	DWORD PTR [rbx+8], edi
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0CZString@Value@Json@@QEAA@PEBDW4DuplicationPolicy@012@@Z ENDP ; Json::Value::CZString::CZString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0CZString@Value@Json@@QEAA@AEBV012@@Z
_TEXT	SEGMENT
this$ = 48
other$ = 56
??0CZString@Value@Json@@QEAA@AEBV012@@Z PROC		; Json::Value::CZString::CZString, COMDAT

; 193  : 

$LN11:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rdx+8], 0
	mov	rbx, rdx
	mov	rdi, rcx
	je	SHORT $LN8@CZString
	cmp	QWORD PTR [rdx], 0
	je	SHORT $LN8@CZString
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rdx, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+8]
	jmp	SHORT $LN4@CZString
$LN8@CZString:
	mov	rax, QWORD PTR [rdx]
$LN4@CZString:
	mov	QWORD PTR [rdi], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	cmp	QWORD PTR [rbx], 0
	mov	ecx, DWORD PTR [rbx+8]
	je	SHORT $LN5@CZString
	xor	eax, eax
	test	ecx, ecx
	setne	al
	mov	DWORD PTR [rdi+8], eax

; 194  : Value::CZString::CZString( const CZString &other )

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN5@CZString:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	mov	DWORD PTR [rdi+8], ecx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0CZString@Value@Json@@QEAA@AEBV012@@Z ENDP		; Json::Value::CZString::CZString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1CZString@Value@Json@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1CZString@Value@Json@@QEAA@XZ PROC			; Json::Value::CZString::~CZString, COMDAT

; 197  :                 : other.cstr_ )

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rcx], 0
	je	SHORT $LN2@CZString
	cmp	DWORD PTR [rcx+8], 1
	jne	SHORT $LN2@CZString

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+16]
	npad	1
$LN2@CZString:

; 200  : {

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1CZString@Value@Json@@QEAA@XZ ENDP			; Json::Value::CZString::~CZString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??MCZString@Value@Json@@QEBA_NAEBV012@@Z
_TEXT	SEGMENT
this$ = 8
other$ = 16
??MCZString@Value@Json@@QEBA_NAEBV012@@Z PROC		; Json::Value::CZString::operator<, COMDAT

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rcx]
	test	rax, rax
	je	SHORT $LN2@operator

; 221  :    return *this;

	mov	rdx, QWORD PTR [rdx]
	sub	rdx, rax
	npad	2
$LL4@operator:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN6@operator
	inc	rax
	test	cl, cl
	jne	SHORT $LL4@operator
	mov	eax, 0

; 223  : 

	ret	0
$LN6@operator:

; 221  :    return *this;

	sbb	eax, eax
	or	eax, 1
	shr	eax, 31

; 223  : 

	ret	0
$LN2@operator:

; 222  : }

	mov	eax, DWORD PTR [rdx+8]
	cmp	DWORD PTR [rcx+8], eax
	setl	al

; 223  : 

	ret	0
??MCZString@Value@Json@@QEBA_NAEBV012@@Z ENDP		; Json::Value::CZString::operator<
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??8CZString@Value@Json@@QEBA_NAEBV012@@Z
_TEXT	SEGMENT
this$ = 8
other$ = 16
??8CZString@Value@Json@@QEBA_NAEBV012@@Z PROC		; Json::Value::CZString::operator==, COMDAT

; 228  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	rax, QWORD PTR [rcx]
	test	rax, rax
	je	SHORT $LN2@operator

; 229  :    return index_ < other.index_;

	mov	r8, QWORD PTR [rdx]
	sub	r8, rax
	npad	2
$LL4@operator:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN5@operator
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL4@operator
$LN5@operator:
	test	edx, edx

; 231  : 

	sete	al
	ret	0
$LN2@operator:

; 230  : }

	mov	eax, DWORD PTR [rdx+8]
	cmp	DWORD PTR [rcx+8], eax

; 231  : 

	sete	al
	ret	0
??8CZString@Value@Json@@QEBA_NAEBV012@@Z ENDP		; Json::Value::CZString::operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?index@CZString@Value@Json@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?index@CZString@Value@Json@@QEBAHXZ PROC		; Json::Value::CZString::index, COMDAT

; 237  :    return index_ == other.index_;

	mov	eax, DWORD PTR [rcx+8]

; 238  : }

	ret	0
?index@CZString@Value@Json@@QEBAHXZ ENDP		; Json::Value::CZString::index
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?c_str@CZString@Value@Json@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?c_str@CZString@Value@Json@@QEBAPEBDXZ PROC		; Json::Value::CZString::c_str, COMDAT

; 244  :    return index_;

	mov	rax, QWORD PTR [rcx]

; 245  : }

	ret	0
?c_str@CZString@Value@Json@@QEBAPEBDXZ ENDP		; Json::Value::CZString::c_str
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
value$ = 16
??0Value@Json@@QEAA@I@Z PROC				; Json::Value::Value, COMDAT

; 324  : #endif

	mov	BYTE PTR [rcx+8], 2

; 330  : Value::Value( UInt value )
; 331  :    : type_( uintValue )

	mov	rax, rcx
	mov	QWORD PTR [rcx+16], 0
	mov	DWORD PTR [rcx], edx
	ret	0
??0Value@Json@@QEAA@I@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
_Sentinel$12 = 48
$T6 = 112
_Proxy$13 = 112
$T10 = 112
this$ = 112
$S12$14 = 120
other$ = 120
$T1 = 128
??0Value@Json@@QEAA@AEBV01@@Z PROC			; Json::Value::Value, COMDAT

; 424  : 

$LN83:
	mov	QWORD PTR [rsp+32], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H
	mov	r15, rdx
	mov	r14, rcx

; 419  : #endif

	movsx	rax, BYTE PTR [rdx+8]
	mov	BYTE PTR [rcx+8], al

; 420  : {

	xor	ebx, ebx
	mov	QWORD PTR [rcx+16], rbx

; 425  : Value::Value( const Value &other )

	cmp	eax, 7
	ja	$LN12@Value
	lea	rdx, OFFSET FLAT:__ImageBase
	mov	ecx, DWORD PTR $LN79@Value[rdx+rax*4]
	add	rcx, rdx
	jmp	rcx
$LN7@Value:

; 426  :    : type_( other.type_ )
; 427  :    , comments_( 0 )
; 428  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 429  :    , itemIsUsed_( 0 )
; 430  : #endif
; 431  : {
; 432  :    switch ( type_ )

	mov	rax, QWORD PTR [r15]
	mov	QWORD PTR [r14], rax

; 433  :    {

	jmp	$LN12@Value
$LN8@Value:

; 434  :    case nullValue:
; 435  :    case intValue:

	cmp	QWORD PTR [r15], rbx
	je	SHORT $LN9@Value

; 436  :    case uintValue:
; 437  :    case realValue:

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	r8d, -1					; ffffffffH
	mov	rdx, QWORD PTR [r15]
	call	QWORD PTR [rax+24]

; 438  :    case booleanValue:

	or	DWORD PTR [r14+8], 256			; 00000100H

; 442  :       if ( other.value_.string_ )

	mov	QWORD PTR [r14], rax
	jmp	$LN12@Value
$LN9@Value:

; 439  :       value_ = other.value_;
; 440  :       break;
; 441  :    case stringValue:

	mov	rax, rbx

; 442  :       if ( other.value_.string_ )

	mov	QWORD PTR [r14], rbx
	jmp	$LN12@Value
$LN11@Value:

; 446  :       }

	mov	ecx, 16
	call	??2@YAPEAX_K@Z				; operator new
	mov	rbp, rax
	mov	QWORD PTR $T1[rsp], rax
	mov	rsi, QWORD PTR [r15]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	QWORD PTR [rax], rbx
	mov	QWORD PTR [rax+8], rbx

; 895  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, *_Scary);

	mov	r8, rax
	lea	rdx, QWORD PTR $S12$14[rsp]
	lea	rcx, QWORD PTR _Proxy$13[rsp]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 766  :     _Tree_head_scoped_ptr(_Alnode& _Al_, _Scary_val& _Mycont_) : _Al(_Al_), _Mycont(_STD addressof(_Mycont_)) {

	mov	QWORD PTR _Sentinel$12[rsp], rbp
	mov	QWORD PTR _Sentinel$12[rsp+8], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	rdi, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	rdx, QWORD PTR [rdi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	rdx, QWORD PTR [rdi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 347  :         _Pnode->_Color = _Black;

	mov	WORD PTR [rdi+24], 257			; 00000101H

; 767  :         _Mycont->_Myhead = _Alnode::value_type::_Buyheadnode(_Al);

	mov	QWORD PTR [rbp], rdi

; 1731 :         _Scary->_Myhead->_Parent = _Copy_nodes(_Right_scary->_Myhead->_Parent, _Scary->_Myhead, _Movefl);

	mov	rdx, QWORD PTR [rsi]
	movzx	r9d, BYTE PTR $T6[rsp]
	mov	r8, rdi
	mov	rdx, QWORD PTR [rdx+8]
	mov	rcx, rbp
	call	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
	mov	rcx, QWORD PTR [rbp]
	mov	QWORD PTR [rcx+8], rax

; 1732 :         _Scary->_Mysize          = _Right_scary->_Mysize;

	mov	rax, QWORD PTR [rsi+8]
	mov	QWORD PTR [rbp+8], rax

; 1733 :         if (!_Scary->_Myhead->_Parent->_Isnil) { // nonempty tree, look for new smallest and largest

	mov	rdx, QWORD PTR [rbp]
	mov	rcx, QWORD PTR [rdx+8]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN47@Value

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	rax, QWORD PTR [rcx]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN52@Value
	npad	3
$LL51@Value:

; 452  :             _Pnode = _Pnode->_Left;

	mov	rcx, rax

; 445  :         }
; 446  : 
; 447  :         return _Pnode;
; 448  :     }
; 449  : 
; 450  :     static _Nodeptr _Min(_Nodeptr _Pnode) noexcept { // return leftmost node in subtree at _Pnode
; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	rax, QWORD PTR [rax]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL51@Value
$LN52@Value:

; 1734 :             _Scary->_Myhead->_Left  = _Scary_val::_Min(_Scary->_Myhead->_Parent);

	mov	QWORD PTR [rdx], rcx

; 1735 :             _Scary->_Myhead->_Right = _Scary_val::_Max(_Scary->_Myhead->_Parent);

	mov	rdx, QWORD PTR [rbp]
	mov	rcx, QWORD PTR [rdx+8]

; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN56@Value
$LL55@Value:

; 444  :             _Pnode = _Pnode->_Right;

	mov	rcx, rax

; 436  : 
; 437  :     enum _Redbl { // colors for link to parent
; 438  :         _Red,
; 439  :         _Black
; 440  :     };
; 441  : 
; 442  :     static _Nodeptr _Max(_Nodeptr _Pnode) noexcept { // return rightmost node in subtree at _Pnode
; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL55@Value
$LN56@Value:

; 1735 :             _Scary->_Myhead->_Right = _Scary_val::_Max(_Scary->_Myhead->_Parent);

	mov	QWORD PTR [rdx+16], rcx

; 1736 :         } else { // empty tree, just tidy head pointers

	jmp	SHORT $LN48@Value
$LN47@Value:

; 1737 :             _Scary->_Myhead->_Left  = _Scary->_Myhead;

	mov	QWORD PTR [rdx], rdx

; 1738 :             _Scary->_Myhead->_Right = _Scary->_Myhead;

	mov	rax, QWORD PTR [rbp]
	mov	QWORD PTR [rax+16], rax
$LN48@Value:

; 899  :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$13[rsp]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 446  :       }

	mov	QWORD PTR [r14], rbp
$LN12@Value:

; 447  :       else
; 448  :          value_.string_ = 0;
; 449  :       break;
; 450  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 451  :    case arrayValue:
; 452  :    case objectValue:
; 453  :       value_.map_ = new ObjectValues( *other.value_.map_ );
; 454  :       break;
; 455  : #else
; 456  :    case arrayValue:
; 457  :       value_.array_ = arrayAllocator()->newArrayCopy( *other.value_.array_ );
; 458  :       break;
; 459  :    case objectValue:

	cmp	QWORD PTR [r15+16], 0
	je	SHORT $LN80@Value

; 460  :       value_.map_ = mapAllocator()->newMapCopy( *other.value_.map_ );
; 461  :       break;

	mov	ecx, 32					; 00000020H
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T10[rsp], rax
	mov	esi, 3
	test	rax, rax
	je	SHORT $LN18@Value
	mov	QWORD PTR [rax], rsi
	lea	rdi, QWORD PTR [rax+8]
	lea	rax, OFFSET FLAT:??1CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::~CommentInfo
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:??0CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::CommentInfo
	mov	r8d, esi
	lea	edx, QWORD PTR [rsi+5]
	mov	rcx, rdi
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	jmp	SHORT $LN19@Value
$LN18@Value:
	mov	rdi, rbx
$LN19@Value:
	mov	QWORD PTR [r14+16], rdi
	mov	rdi, rbx
$LL6@Value:

; 463  :    default:
; 464  :       JSON_ASSERT_UNREACHABLE;

	mov	rax, QWORD PTR [r15+16]

; 465  :    }

	mov	rdx, QWORD PTR [rbx+rax]
	test	rdx, rdx
	je	SHORT $LN4@Value

; 466  :    if ( other.comments_ )

	mov	rcx, QWORD PTR [r14+16]
	add	rcx, rdi
	call	?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z ; Json::Value::CommentInfo::setComment
$LN4@Value:

; 462  : #endif

	add	rdi, 8
	add	rbx, 8
	sub	rsi, 1
	jne	SHORT $LL6@Value
$LN80@Value:

; 467  :    {
; 468  :       comments_ = new CommentInfo[numberOfCommentPlacement];
; 469  :       for ( int comment =0; comment < numberOfCommentPlacement; ++comment )

	mov	rax, r14
	mov	rbx, QWORD PTR [rsp+136]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
	npad	1
$LN79@Value:
	DD	$LN7@Value
	DD	$LN7@Value
	DD	$LN7@Value
	DD	$LN7@Value
	DD	$LN8@Value
	DD	$LN7@Value
	DD	$LN11@Value
	DD	$LN11@Value
??0Value@Json@@QEAA@AEBV01@@Z ENDP			; Json::Value::Value
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Sentinel$12 = 48
$T6 = 112
_Proxy$13 = 112
$T10 = 112
this$ = 112
$S12$14 = 120
other$ = 120
$T1 = 128
?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA PROC	; `Json::Value::Value'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T1[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA ENDP	; `Json::Value::Value'::`1'::dtor$0
_Sentinel$12 = 48
$T6 = 112
_Proxy$13 = 112
$T10 = 112
this$ = 112
$S12$14 = 120
other$ = 120
$T1 = 128
?dtor$3@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA PROC	; `Json::Value::Value'::`1'::dtor$3
	lea	rcx, QWORD PTR _Sentinel$12[rdx]
	jmp	??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
?dtor$3@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA ENDP	; `Json::Value::Value'::`1'::dtor$3
_Sentinel$12 = 48
$T6 = 112
_Proxy$13 = 112
$T10 = 112
this$ = 112
$S12$14 = 120
other$ = 120
$T1 = 128
?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA PROC	; `Json::Value::Value'::`1'::dtor$1
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T10[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA ENDP	; `Json::Value::Value'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Sentinel$12 = 48
$T6 = 112
_Proxy$13 = 112
$T10 = 112
this$ = 112
$S12$14 = 120
other$ = 120
$T1 = 128
?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA PROC	; `Json::Value::Value'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T1[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA ENDP	; `Json::Value::Value'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Sentinel$12 = 48
$T6 = 112
_Proxy$13 = 112
$T10 = 112
this$ = 112
$S12$14 = 120
other$ = 120
$T1 = 128
?dtor$3@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA PROC	; `Json::Value::Value'::`1'::dtor$3
	lea	rcx, QWORD PTR _Sentinel$12[rdx]
	jmp	??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
?dtor$3@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA ENDP	; `Json::Value::Value'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Sentinel$12 = 48
$T6 = 112
_Proxy$13 = 112
$T10 = 112
this$ = 112
$S12$14 = 120
other$ = 120
$T1 = 128
?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA PROC	; `Json::Value::Value'::`1'::dtor$1
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T10[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$1@?0???0Value@Json@@QEAA@AEBV01@@Z@4HA ENDP	; `Json::Value::Value'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_ECommentInfo@Value@Json@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_ECommentInfo@Value@Json@@QEAAPEAXI@Z PROC		; Json::Value::CommentInfo::`vector deleting destructor', COMDAT
$LN12:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rbx, QWORD PTR [rcx-8]
	lea	r9, OFFSET FLAT:??1CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::~CommentInfo
	mov	r8, QWORD PTR [rbx]
	mov	edx, 8
	call	??_M@YAXPEAX_K1P6AX0@Z@Z
	npad	1
	mov	rdx, QWORD PTR [rbx]
	lea	rdx, QWORD PTR [rdx*8+8]
	mov	rcx, rbx
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	npad	1
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_ECommentInfo@Value@Json@@QEAAPEAXI@Z ENDP		; Json::Value::CommentInfo::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor', COMDAT
$LN17:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 751  :         this->_Orphan_all();

	call	?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	r8, QWORD PTR [rbx]
	mov	rdx, rbx
	mov	rcx, rbx
	mov	r8, QWORD PTR [r8+8]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	rcx, QWORD PTR [rbx]
	mov	edx, 72					; 00000048H
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	mov	edx, 16
	mov	rcx, rbx
	call	??3@YAXPEAX_K@Z				; operator delete
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAAPEAXI@Z ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT
$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 751  :         this->_Orphan_all();

	call	?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	r8, QWORD PTR [rbx]
	mov	rdx, rbx
	mov	rcx, rbx
	mov	r8, QWORD PTR [r8+8]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	rcx, QWORD PTR [rbx]
	mov	edx, 72					; 00000048H
	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?swap@Value@Json@@QEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 8
other$ = 16
?swap@Value@Json@@QEAAXAEAV12@@Z PROC			; Json::Value::swap, COMDAT

; 518  :    swap( temp );
; 519  :    return *this;

	movzx	eax, BYTE PTR [rdx+8]
	movzx	r8d, BYTE PTR [rcx+8]
	mov	BYTE PTR [rcx+8], al

; 520  : }

	mov	BYTE PTR [rdx+8], r8b
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility

; 62   :     _Left    = _STD move(_Right);

	mov	r8, QWORD PTR [rdx]
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rcx], r8

; 63   :     _Right   = _STD move(_Tmp);

	mov	QWORD PTR [rdx], rax
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 522  : void 

	mov	r8d, DWORD PTR [rcx+8]

; 523  : Value::swap( Value &other )

	mov	eax, DWORD PTR [rdx+8]
	xor	eax, r8d
	and	eax, 256				; 00000100H
	xor	eax, r8d

; 524  : {

	and	r8d, 256				; 00000100H
	mov	DWORD PTR [rcx+8], eax
	and	DWORD PTR [rdx+8], -257			; fffffffffffffeffH
	or	DWORD PTR [rdx+8], r8d

; 525  :    ValueType temp = type_;

	ret	0
?swap@Value@Json@@QEAAXAEAV12@@Z ENDP			; Json::Value::swap
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ PROC ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>, COMDAT
$LN11:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	add	rcx, 16
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN7@pair
	cmp	DWORD PTR [rbx+8], 1
	jne	SHORT $LN7@pair

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+16]
	npad	1
$LN7@pair:
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QEAAAEAV01@PEBD@Z
_TEXT	SEGMENT
this$ = 8
key$ = 16
??AValue@Json@@QEAAAEAV01@PEBD@Z PROC			; Json::Value::operator[], COMDAT

; 1017 : #endif

	jmp	?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z ; Json::Value::resolveReference
??AValue@Json@@QEAAAEAV01@PEBD@Z ENDP			; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z
_TEXT	SEGMENT
it$ = 32
$T2 = 40
actualKey$ = 40
$T1 = 56
defaultValue$ = 80
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
_Proxy$21 = 192
$S10$22 = 200
?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z PROC	; Json::Value::resolveReference, COMDAT

; 1024 :    return resolveReference( key, false );

$LN181:
	mov	QWORD PTR [rsp+16], rbx
	mov	BYTE PTR [rsp+24], r8b
	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 128				; 00000080H
	mov	rsi, rdx
	mov	r15, rcx

; 1025 : }
; 1026 : 

	xor	r14d, r14d
	cmp	BYTE PTR [rcx+8], r14b
	jne	$LN55@resolveRef

; 269  : // //////////////////////////////////////////////////////////////////

	mov	eax, DWORD PTR $T1[rbp-120]
	and	eax, -505				; fffffffffffffe07H

; 270  : 

	or	eax, 7
	mov	DWORD PTR $T1[rbp-120], eax

; 271  : /*! \internal Default constructor initialization must be equivalent to:

	mov	QWORD PTR $T1[rbp-112], r14

; 293  :       break;

	lea	ecx, QWORD PTR [r14+16]
	call	??2@YAPEAX_K@Z				; operator new
	mov	rdi, rax
	mov	QWORD PTR $T2[rbp-128], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1333 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	lea	rcx, QWORD PTR $T3[rbp-128]
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	QWORD PTR [rdi], r14
	mov	QWORD PTR [rdi+8], r14

; 2023 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	mov	r8, rdi
	lea	rdx, QWORD PTR $S10$22[rbp-128]
	lea	rcx, QWORD PTR _Proxy$21[rbp-128]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	lea	ecx, QWORD PTR [r14+1]
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	lea	ecx, QWORD PTR [r14+8]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	rdx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	lea	ecx, QWORD PTR [r14+8]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	rdx, QWORD PTR [rbx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	lea	ecx, QWORD PTR [r14+8]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 347  :         _Pnode->_Color = _Black;

	mov	WORD PTR [rbx+24], 257			; 00000101H

; 2024 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	QWORD PTR [rdi], rbx

; 2025 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$21[rbp-128]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 293  :       break;

	mov	QWORD PTR $T1[rbp-128], rdi

; 1027 : 

	lea	rdx, QWORD PTR $T1[rbp-128]
	mov	rcx, r15
	call	??4Value@Json@@QEAAAEAV01@AEBV01@@Z	; Json::Value::operator=
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 751  :         this->_Orphan_all();

	mov	rcx, rdi
	call	?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	r8, QWORD PTR [rdi]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, rdi
	mov	rcx, rdi
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	lea	edx, QWORD PTR [r14+72]
	mov	rcx, QWORD PTR [rdi]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	lea	edx, QWORD PTR [r14+16]
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1
$LN55@resolveRef:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 181  : Value::CZString::CZString( int index )

	mov	QWORD PTR actualKey$[rbp-128], rsi

; 182  :    : cstr_( 0 )
; 183  :    , index_( index )

	mov	DWORD PTR actualKey$[rbp-120], 2

; 1028 : Value &
; 1029 : Value::resolveReference( const char *key, 
; 1030 :                          bool isStatic )
; 1031 : {

	mov	r10, QWORD PTR [r15]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1704 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	r9, QWORD PTR [r10]
	mov	rdx, QWORD PTR [r9+8]

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN93@resolveRef
$LL92@resolveRef:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rdx+32]
	test	rax, rax
	je	SHORT $LN100@resolveRef

; 221  :    return *this;

	mov	r8, rsi
	sub	r8, rax
$LL175@resolveRef:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+r8]
	jne	SHORT $LN177@resolveRef
	inc	rax
	test	cl, cl
	jne	SHORT $LL175@resolveRef
	mov	eax, r14d
	shr	eax, 31
	jmp	SHORT $LN99@resolveRef
$LN177@resolveRef:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN99@resolveRef
$LN100@resolveRef:

; 222  : }

	cmp	DWORD PTR [rdx+40], 2
	setl	al
$LN99@resolveRef:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1708 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	test	al, al
	je	SHORT $LN94@resolveRef

; 1709 :                 _Result._Location._Child = _Tree_child::_Right;
; 1710 :                 _Trynode                 = _Trynode->_Right;

	mov	rdx, QWORD PTR [rdx+16]

; 1711 :             } else {

	jmp	SHORT $LN95@resolveRef
$LN94@resolveRef:

; 1712 :                 _Result._Location._Child = _Tree_child::_Left;
; 1713 :                 _Result._Bound           = _Trynode;

	mov	r9, rdx

; 1714 :                 _Trynode                 = _Trynode->_Left;

	mov	rdx, QWORD PTR [rdx]
$LN95@resolveRef:

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [rdx+25], 0
	je	SHORT $LL92@resolveRef
$LN93@resolveRef:

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	QWORD PTR it$[rbp-128], r9

; 40   :         this->_Adopt(_Plist);

	mov	rdx, r10
	lea	rcx, QWORD PTR it$[rbp-128]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1247 :         const auto _Scary = _Get_scary();

	mov	rdx, QWORD PTR [r15]

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR $T14[rbp-128], rax

; 40   :         this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T14[rbp-128]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 232  :         return this->_Ptr == _Right._Ptr;

	mov	rax, QWORD PTR it$[rbp-128]
	cmp	rax, QWORD PTR $T14[rbp-128]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1032 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );

	je	SHORT $LN3@resolveRef

; 228  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN125@resolveRef

; 229  :    return index_ < other.index_;

	mov	r9, rsi
	sub	r9, rcx
	npad	1
$LL173@resolveRef:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN174@resolveRef
	inc	rcx
	test	edx, edx
	jne	SHORT $LL173@resolveRef
$LN174@resolveRef:
	test	r8d, r8d
	jmp	SHORT $LN178@resolveRef
$LN125@resolveRef:

; 230  : }

	cmp	DWORD PTR [rax+40], 2
$LN178@resolveRef:

; 1032 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );

	sete	cl
	test	cl, cl
	je	SHORT $LN3@resolveRef

; 1033 :    if ( type_ == nullValue )

	lea	rbx, QWORD PTR [rax+48]
	jmp	$LN164@resolveRef
$LN3@resolveRef:

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	test	rsi, rsi
	je	SHORT $LN142@resolveRef
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, rsi
	call	QWORD PTR [rax+8]
	mov	r14, rax
$LN142@resolveRef:
	mov	QWORD PTR defaultValue$[rbp-128], r14

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	neg	rsi
	sbb	eax, eax
	add	eax, 2
	mov	DWORD PTR defaultValue$[rbp-120], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility

; 149  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	lea	rdx, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	lea	rcx, QWORD PTR defaultValue$[rbp-112]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1036 :    CZString actualKey( key, isStatic ? CZString::noDuplication 

	mov	rbx, QWORD PTR [r15]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1184 :         return iterator(_Emplace_hint(_Where._Ptr, _STD forward<_Valtys>(_Vals)...), _Scary);

	lea	r8, QWORD PTR defaultValue$[rbp-128]
	mov	rdx, QWORD PTR it$[rbp-128]
	mov	rcx, rbx
	call	??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>
	mov	QWORD PTR $T20[rbp-128], rax

; 40   :         this->_Adopt(_Plist);

	mov	rdx, rbx
	lea	rcx, QWORD PTR $T20[rbp-128]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1036 :    CZString actualKey( key, isStatic ? CZString::noDuplication 

	mov	rax, QWORD PTR $T20[rbp-128]
	mov	QWORD PTR it$[rbp-128], rax

; 1037 :                                      : CZString::duplicateOnCopy );

	lea	rbx, QWORD PTR [rax+48]
	lea	rcx, QWORD PTR defaultValue$[rbp-112]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR defaultValue$[rbp-128], 0
	je	SHORT $LN163@resolveRef
	cmp	DWORD PTR defaultValue$[rbp-120], 1
	jne	SHORT $LN163@resolveRef

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	r8, QWORD PTR [rcx]
	mov	rdx, QWORD PTR defaultValue$[rbp-128]
	call	QWORD PTR [r8+16]
	npad	1
$LN163@resolveRef:
$LN164@resolveRef:

; 1038 :    ObjectValues::iterator it = value_.map_->lower_bound( actualKey );

	mov	rax, rbx

; 1039 :    if ( it != value_.map_->end()  &&  (*it).first == actualKey )
; 1040 :       return (*it).second;
; 1041 : 
; 1042 :    ObjectValues::value_type defaultValue( actualKey, null );

	mov	rbx, QWORD PTR [rsp+184]
	add	rsp, 128				; 00000080H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z ENDP	; Json::Value::resolveReference
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
it$ = 32
$T2 = 40
actualKey$ = 40
$T1 = 56
defaultValue$ = 80
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
_Proxy$21 = 192
$S10$22 = 200
?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$3
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$3
it$ = 32
$T2 = 40
actualKey$ = 40
$T1 = 56
defaultValue$ = 80
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
_Proxy$21 = 192
$S10$22 = 200
?dtor$0@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$0@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$0
it$ = 32
$T2 = 40
actualKey$ = 40
$T1 = 56
defaultValue$ = 80
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
_Proxy$21 = 192
$S10$22 = 200
?dtor$1@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$1
	lea	rcx, QWORD PTR actualKey$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$1
it$ = 32
$T2 = 40
actualKey$ = 40
$T1 = 56
defaultValue$ = 80
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
_Proxy$21 = 192
$S10$22 = 200
?dtor$10@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$10
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$10@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$10
it$ = 32
$T2 = 40
actualKey$ = 40
$T1 = 56
defaultValue$ = 80
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
_Proxy$21 = 192
$S10$22 = 200
?dtor$2@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$2
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
?dtor$2@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
it$ = 32
$T2 = 40
actualKey$ = 40
$T1 = 56
defaultValue$ = 80
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
_Proxy$21 = 192
$S10$22 = 200
?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$3
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 16
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$3@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
it$ = 32
$T2 = 40
actualKey$ = 40
$T1 = 56
defaultValue$ = 80
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
_Proxy$21 = 192
$S10$22 = 200
?dtor$0@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$0
	lea	rcx, QWORD PTR $T1[rdx]
	jmp	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
?dtor$0@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
it$ = 32
$T2 = 40
actualKey$ = 40
$T1 = 56
defaultValue$ = 80
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
_Proxy$21 = 192
$S10$22 = 200
?dtor$1@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$1
	lea	rcx, QWORD PTR actualKey$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
it$ = 32
$T2 = 40
actualKey$ = 40
$T1 = 56
defaultValue$ = 80
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
_Proxy$21 = 192
$S10$22 = 200
?dtor$10@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$10
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$10@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$10
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
it$ = 32
$T2 = 40
actualKey$ = 40
$T1 = 56
defaultValue$ = 80
$T3 = 176
$T20 = 176
$T14 = 176
this$ = 176
key$ = 184
isStatic$dead$ = 192
_Proxy$21 = 192
$S10$22 = 200
?dtor$2@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA PROC ; `Json::Value::resolveReference'::`1'::dtor$2
	lea	rcx, QWORD PTR defaultValue$[rdx]
	jmp	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@XZ
?dtor$2@?0??resolveReference@Value@Json@@AEAAAEAV12@PEBD_N@Z@4HA ENDP ; `Json::Value::resolveReference'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QEBAAEBV01@PEBD@Z
_TEXT	SEGMENT
$T4 = 48
this$ = 48
key$ = 56
$T5 = 64
??AValue@Json@@QEBAAEBV01@PEBD@Z PROC			; Json::Value::operator[], COMDAT

; 1064 :    return index < size();

$LN74:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	r9, rdx
	mov	rdi, rcx

; 1065 : }
; 1066 : 

	cmp	BYTE PTR [rcx+8], 0
	jne	SHORT $LN2@operator

; 1067 : 

	lea	rax, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null

; 1074 :       return null;
; 1075 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1076 :    CZString actualKey( key, CZString::noDuplication );
; 1077 :    ObjectValues::const_iterator it = value_.map_->find( actualKey );
; 1078 :    if ( it == value_.map_->end() )

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@operator:

; 1068 : 
; 1069 : const Value &
; 1070 : Value::operator[]( const char *key ) const

	mov	rsi, QWORD PTR [rcx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1704 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	rbx, QWORD PTR [rsi]
	mov	rdx, QWORD PTR [rbx+8]
	mov	r11, rbx

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	xor	r10d, r10d
	cmp	BYTE PTR [rdx+25], r10b
	jne	SHORT $LN18@operator
	npad	8
$LL17@operator:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rdx+32]
	test	rax, rax
	je	SHORT $LN25@operator

; 221  :    return *this;

	mov	r8, r9
	sub	r8, rax
	npad	1
$LL69@operator:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+r8]
	jne	SHORT $LN71@operator
	inc	rax
	test	cl, cl
	jne	SHORT $LL69@operator
	mov	eax, r10d
	jmp	SHORT $LN70@operator
$LN71@operator:
	sbb	eax, eax
	or	eax, 1
	jmp	SHORT $LN70@operator
$LN25@operator:

; 222  : }

	mov	eax, DWORD PTR [rdx+40]
$LN70@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1708 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	shr	eax, 31
	test	al, al
	je	SHORT $LN19@operator

; 1709 :                 _Result._Location._Child = _Tree_child::_Right;
; 1710 :                 _Trynode                 = _Trynode->_Right;

	mov	rdx, QWORD PTR [rdx+16]

; 1711 :             } else {

	jmp	SHORT $LN20@operator
$LN19@operator:

; 1712 :                 _Result._Location._Child = _Tree_child::_Left;
; 1713 :                 _Result._Bound           = _Trynode;

	mov	r11, rdx

; 1714 :                 _Trynode                 = _Trynode->_Left;

	mov	rdx, QWORD PTR [rdx]
$LN20@operator:

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [rdx+25], r10b
	je	SHORT $LL17@operator
$LN18@operator:

; 1698 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	cmp	BYTE PTR [r11+25], r10b
	jne	SHORT $LN14@operator
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	test	r9, r9
	je	SHORT $LN34@operator

; 221  :    return *this;

	mov	rcx, QWORD PTR [r11+32]
	sub	rcx, r9
	npad	6
$LL66@operator:
	movzx	eax, BYTE PTR [r9]
	cmp	al, BYTE PTR [r9+rcx]
	jne	SHORT $LN68@operator
	inc	r9
	test	al, al
	jne	SHORT $LL66@operator
	shr	r10d, 31
	jmp	SHORT $LN33@operator
$LN68@operator:
	sbb	r10d, r10d
	or	r10d, 1
	shr	r10d, 31
	jmp	SHORT $LN33@operator
$LN34@operator:

; 222  : }

	cmp	DWORD PTR [r11+40], r10d
	setg	r10b
$LN33@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1698 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	test	r10b, r10b
	je	SHORT $LN13@operator
$LN14@operator:

; 1461 :         return _Get_scary()->_Myhead;

	mov	r11, rbx
$LN13@operator:

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	QWORD PTR $T4[rsp], r11

; 40   :         this->_Adopt(_Plist);

	mov	rdx, rsi
	lea	rcx, QWORD PTR $T4[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1247 :         const auto _Scary = _Get_scary();

	mov	rdx, QWORD PTR [rdi]

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR $T5[rsp], rax

; 40   :         this->_Adopt(_Plist);

	lea	rcx, QWORD PTR $T5[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 232  :         return this->_Ptr == _Right._Ptr;

	mov	rax, QWORD PTR $T4[rsp]
	cmp	rax, QWORD PTR $T5[rsp]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1071 : {

	jne	SHORT $LN3@operator
	lea	rax, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	jmp	SHORT $LN6@operator
$LN3@operator:

; 1072 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );
; 1073 :    if ( type_ == nullValue )

	add	rax, 48					; 00000030H
$LN6@operator:

; 1074 :       return null;
; 1075 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1076 :    CZString actualKey( key, CZString::noDuplication );
; 1077 :    ObjectValues::const_iterator it = value_.map_->find( actualKey );
; 1078 :    if ( it == value_.map_->end() )

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??AValue@Json@@QEBAAEBV01@PEBD@Z ENDP			; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isMember@Value@Json@@QEBA_NPEBD@Z
_TEXT	SEGMENT
this$ = 48
key$ = 56
?isMember@Value@Json@@QEBA_NPEBD@Z PROC			; Json::Value::isMember, COMDAT

; 1183 : {

$LN4:
	sub	rsp, 40					; 00000028H

; 1184 :    return get( key.c_str(), defaultValue );

	call	??AValue@Json@@QEBAAEBV01@PEBD@Z	; Json::Value::operator[]

; 1185 : }

	lea	rcx, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	cmp	rax, rcx
	setne	al

; 1186 : # endif

	add	rsp, 40					; 00000028H
	ret	0
?isMember@Value@Json@@QEBA_NPEBD@Z ENDP			; Json::Value::isMember
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z
_TEXT	SEGMENT
$T1 = 64
this$ = 64
comment$ = 72
placement$ = 80
?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z PROC ; Json::Value::setComment, COMDAT

; 1329 :    return type_ == nullValue  ||  type_ == objectValue;

$LN9:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	movsxd	rsi, r8d
	mov	rbp, rdx
	mov	rdi, rcx

; 1330 : }

	mov	rbx, QWORD PTR [rcx+16]
	test	rbx, rbx
	jne	SHORT $LN2@setComment

; 1331 : 

	lea	ecx, QWORD PTR [rbx+32]
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T1[rsp], rax
	test	rax, rax
	je	SHORT $LN4@setComment
	mov	QWORD PTR [rax], 3
	lea	rbx, QWORD PTR [rax+8]
	lea	rax, OFFSET FLAT:??1CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::~CommentInfo
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:??0CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::CommentInfo
	mov	edx, 8
	lea	r8d, QWORD PTR [rdx-5]
	mov	rcx, rbx
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	jmp	SHORT $LN5@setComment
$LN4@setComment:
	xor	ebx, ebx
$LN5@setComment:
	mov	QWORD PTR [rdi+16], rbx
$LN2@setComment:

; 1332 : 

	lea	rcx, QWORD PTR [rbx+rsi*8]
	mov	rdx, rbp

; 1333 : void 

	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi

; 1332 : 

	jmp	?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z ; Json::Value::CommentInfo::setComment
?setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z ENDP ; Json::Value::setComment
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 64
this$ = 64
comment$ = 72
placement$ = 80
?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA PROC ; `Json::Value::setComment'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T1[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA ENDP ; `Json::Value::setComment'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 64
this$ = 64
comment$ = 72
placement$ = 80
?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA PROC ; `Json::Value::setComment'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T1[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??setComment@Value@Json@@QEAAXPEBDW4CommentPlacement@2@@Z@4HA ENDP ; `Json::Value::setComment'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
_TEXT	SEGMENT
$T1 = 64
this$ = 64
comment$ = 72
placement$ = 80
?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z PROC ; Json::Value::setComment, COMDAT

; 1339 :    comments_[placement].setComment( comment );

$LN11:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	movsxd	rsi, r8d
	mov	rdi, rcx

; 1340 : }

	mov	rcx, rdx
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rbp, rax

; 1330 : }

	mov	rbx, QWORD PTR [rdi+16]
	test	rbx, rbx
	jne	SHORT $LN4@setComment

; 1331 : 

	lea	ecx, QWORD PTR [rbx+32]
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T1[rsp], rax
	test	rax, rax
	je	SHORT $LN6@setComment
	mov	QWORD PTR [rax], 3
	lea	rbx, QWORD PTR [rax+8]
	lea	rax, OFFSET FLAT:??1CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::~CommentInfo
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:??0CommentInfo@Value@Json@@QEAA@XZ ; Json::Value::CommentInfo::CommentInfo
	mov	edx, 8
	lea	r8d, QWORD PTR [rdx-5]
	mov	rcx, rbx
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	jmp	SHORT $LN7@setComment
$LN6@setComment:
	xor	ebx, ebx
$LN7@setComment:
	mov	QWORD PTR [rdi+16], rbx
$LN4@setComment:

; 1332 : 

	lea	rcx, QWORD PTR [rbx+rsi*8]
	mov	rdx, rbp

; 1341 : 

	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi

; 1332 : 

	jmp	?setComment@CommentInfo@Value@Json@@QEAAXPEBD@Z ; Json::Value::CommentInfo::setComment
?setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ENDP ; Json::Value::setComment
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 64
this$ = 64
comment$ = 72
placement$ = 80
?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA PROC ; `Json::Value::setComment'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T1[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA ENDP ; `Json::Value::setComment'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 64
this$ = 64
comment$ = 72
placement$ = 80
?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA PROC ; `Json::Value::setComment'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T1[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??setComment@Value@Json@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z@4HA ENDP ; `Json::Value::setComment'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
$T2 = 48
$T1 = 48
this$ = 48
_Right$ = 56
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 582  :     vector(vector&& _Right) noexcept : _Mypair(_One_then_variadic_args_t(), _STD move(_Right._Getal())) {

$LN9:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rbx, rdx
	mov	rcx, rdx
	call	?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAAEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
	movzx	edx, BYTE PTR $T1[rsp]
	mov	r8, rax
	mov	rcx, rdi
	call	??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 583  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	lea	rdx, QWORD PTR $T2[rsp]
	mov	rcx, rdi
	call	?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy

; 384  :         this->_Swap_proxy_and_iterators(_Right);

	mov	rdx, rbx
	mov	rcx, rdi
	call	?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z ; std::_Container_base0::_Swap_proxy_and_iterators

; 385  :         _Myfirst = _Right._Myfirst;

	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR [rdi], rax

; 386  :         _Mylast  = _Right._Mylast;

	mov	rax, QWORD PTR [rbx+8]
	mov	QWORD PTR [rdi+8], rax

; 387  :         _Myend   = _Right._Myend;

	mov	rax, QWORD PTR [rbx+16]
	mov	QWORD PTR [rdi+16], rax

; 388  : 
; 389  :         _Right._Myfirst = pointer();

	xor	eax, eax
	mov	QWORD PTR [rbx], rax

; 390  :         _Right._Mylast  = pointer();

	mov	QWORD PTR [rbx+8], rax

; 391  :         _Right._Myend   = pointer();

	mov	QWORD PTR [rbx+16], rax

; 584  :         _Move_construct(_Right, true_type{});
; 585  :     }

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@$$QEAV01@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ
_TEXT	SEGMENT
this$ = 8
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*, COMDAT

; 185  :         return this->_Ptr->_Myval;

	mov	rax, QWORD PTR [rcx]
	add	rax, 32					; 00000020H

; 273  :         return const_cast<reference>(_Mybase::operator*());
; 274  :     }

	ret	0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator!=, COMDAT

; 236  :         return !(*this == _Right);

	mov	rax, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx], rax
	setne	al

; 237  :     }

	ret	0
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator==, COMDAT

; 228  : #if _ITERATOR_DEBUG_LEVEL == 2
; 229  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");
; 230  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 231  : 
; 232  :         return this->_Ptr == _Right._Ptr;

	mov	rax, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx], rax
	sete	al

; 233  :     }

	ret	0
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 48
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator--, COMDAT

; 208  :     _Tree_const_iterator& operator--() {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 209  : #if _ITERATOR_DEBUG_LEVEL == 2
; 210  :         _STL_ASSERT(this->_Getcont(), "cannot decrement value-initialized map/set iterator");
; 211  :         _Nodeptr _Ptrsav = this->_Ptr;
; 212  :         _Mybase::operator--();
; 213  :         _STL_VERIFY(_Ptrsav != this->_Ptr, "cannot decrement begin map/set iterator");
; 214  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 215  :         _Mybase::operator--();

	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--

; 216  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 217  : 
; 218  :         return *this;

	mov	rax, rbx

; 219  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 48
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++, COMDAT

; 192  :     _Tree_const_iterator& operator++() {

$LN4:
	sub	rsp, 40					; 00000028H
	mov	r10, rcx

; 193  : #if _ITERATOR_DEBUG_LEVEL == 2
; 194  :         _STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");
; 195  :         _STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");
; 196  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 197  : 
; 198  :         _Mybase::operator++();

	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++

; 199  :         return *this;

	mov	rax, r10

; 200  :     }

	add	rsp, 40					; 00000028H
	ret	0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ
_TEXT	SEGMENT
this$ = 8
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*, COMDAT

; 179  : #if _ITERATOR_DEBUG_LEVEL == 2
; 180  :         const auto _Mycont = static_cast<const _Mytree*>(this->_Getcont());
; 181  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");
; 182  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");
; 183  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 184  : 
; 185  :         return this->_Ptr->_Myval;

	mov	rax, QWORD PTR [rcx]
	add	rax, 32					; 00000020H

; 186  :     }

	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEBAAEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\map
;	COMDAT ??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
_Sentinel$8 = 32
$T5 = 64
_Proxy$9 = 64
this$ = 64
$S12$10 = 72
_Right$ = 72
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT

; 111  :     map(const map& _Right) : _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal())) {}

$LN56:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rsi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax

; 895  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, *_Scary);

	mov	r8, rcx
	lea	rdx, QWORD PTR $S12$10[rsp]
	lea	rcx, QWORD PTR _Proxy$9[rsp]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 766  :     _Tree_head_scoped_ptr(_Alnode& _Al_, _Scary_val& _Mycont_) : _Al(_Al_), _Mycont(_STD addressof(_Mycont_)) {

	mov	QWORD PTR _Sentinel$8[rsp], rsi
	mov	QWORD PTR _Sentinel$8[rsp+8], rsi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	rdx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	rdx, QWORD PTR [rbx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 347  :         _Pnode->_Color = _Black;

	mov	WORD PTR [rbx+24], 257			; 00000101H

; 767  :         _Mycont->_Myhead = _Alnode::value_type::_Buyheadnode(_Al);

	mov	QWORD PTR [rsi], rbx

; 1731 :         _Scary->_Myhead->_Parent = _Copy_nodes(_Right_scary->_Myhead->_Parent, _Scary->_Myhead, _Movefl);

	mov	rdx, QWORD PTR [rdi]
	movzx	r9d, BYTE PTR $T5[rsp]
	mov	r8, rbx
	mov	rdx, QWORD PTR [rdx+8]
	mov	rcx, rsi
	call	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
	mov	rcx, QWORD PTR [rsi]
	mov	QWORD PTR [rcx+8], rax

; 1732 :         _Scary->_Mysize          = _Right_scary->_Mysize;

	mov	rax, QWORD PTR [rdi+8]
	mov	QWORD PTR [rsi+8], rax

; 1733 :         if (!_Scary->_Myhead->_Parent->_Isnil) { // nonempty tree, look for new smallest and largest

	mov	r8, QWORD PTR [rsi]
	mov	rdx, QWORD PTR [r8+8]
	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN26@map

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	rcx, QWORD PTR [rdx]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN31@map
	npad	4
$LL30@map:

; 452  :             _Pnode = _Pnode->_Left;

	mov	rdx, rcx

; 445  :         }
; 446  : 
; 447  :         return _Pnode;
; 448  :     }
; 449  : 
; 450  :     static _Nodeptr _Min(_Nodeptr _Pnode) noexcept { // return leftmost node in subtree at _Pnode
; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	rax, QWORD PTR [rcx]
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL30@map
$LN31@map:

; 1734 :             _Scary->_Myhead->_Left  = _Scary_val::_Min(_Scary->_Myhead->_Parent);

	mov	QWORD PTR [r8], rdx

; 1735 :             _Scary->_Myhead->_Right = _Scary_val::_Max(_Scary->_Myhead->_Parent);

	mov	rdx, QWORD PTR [rsi]
	mov	rcx, QWORD PTR [rdx+8]

; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN35@map
$LL34@map:

; 444  :             _Pnode = _Pnode->_Right;

	mov	rcx, rax

; 436  : 
; 437  :     enum _Redbl { // colors for link to parent
; 438  :         _Red,
; 439  :         _Black
; 440  :     };
; 441  : 
; 442  :     static _Nodeptr _Max(_Nodeptr _Pnode) noexcept { // return rightmost node in subtree at _Pnode
; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL34@map
$LN35@map:

; 1735 :             _Scary->_Myhead->_Right = _Scary_val::_Max(_Scary->_Myhead->_Parent);

	mov	QWORD PTR [rdx+16], rcx

; 1736 :         } else { // empty tree, just tidy head pointers

	jmp	SHORT $LN27@map
$LN26@map:

; 1737 :             _Scary->_Myhead->_Left  = _Scary->_Myhead;

	mov	QWORD PTR [r8], r8

; 1738 :             _Scary->_Myhead->_Right = _Scary->_Myhead;

	mov	rax, QWORD PTR [rsi]
	mov	QWORD PTR [rax+16], rax
$LN27@map:

; 899  :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$9[rsp]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\map

; 111  :     map(const map& _Right) : _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal())) {}

	mov	rax, rsi
	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Sentinel$8 = 32
$T5 = 64
_Proxy$9 = 64
this$ = 64
$S12$10 = 72
_Right$ = 72
?dtor$1@?0???0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >'::`1'::dtor$1
	lea	rcx, QWORD PTR _Sentinel$8[rdx]
	jmp	??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
?dtor$1@?0???0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Sentinel$8 = 32
$T5 = 64
_Proxy$9 = 64
this$ = 64
$S12$10 = 72
_Right$ = 72
?dtor$1@?0???0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >'::`1'::dtor$1
	lea	rcx, QWORD PTR _Sentinel$8[rdx]
	jmp	??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
?dtor$1@?0???0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\map
;	COMDAT ??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ
_TEXT	SEGMENT
_Proxy$5 = 48
this$ = 48
$T1 = 56
$S10$6 = 64
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT

; 107  :     map() : _Mybase(key_compare()) {}

$LN26:
	mov	QWORD PTR [rsp+32], rbx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1333 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	xor	eax, eax

; 2023 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	lea	rdx, QWORD PTR $S10$6[rsp]
	mov	r8, rdi

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	QWORD PTR [rdi], rax

; 2023 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	lea	rcx, QWORD PTR _Proxy$5[rsp]

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	QWORD PTR [rdi+8], rax

; 2023 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	mov	ecx, 8

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	call	??2@YAPEAX_KPEAX@Z			; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	rdx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	mov	QWORD PTR [rax], rbx
	call	??2@YAPEAX_KPEAX@Z			; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	rdx, QWORD PTR [rbx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	mov	QWORD PTR [rax], rbx
	call	??2@YAPEAX_KPEAX@Z			; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 2025 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$5[rsp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 347  :         _Pnode->_Color = _Black;

	mov	WORD PTR [rbx+24], 257			; 00000101H

; 2024 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	QWORD PTR [rdi], rbx

; 2025 :         _Proxy._Release();

	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\map

; 107  :     map() : _Mybase(key_compare()) {}

	mov	rbx, QWORD PTR [rsp+72]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA@XZ ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_Keyval$ = 64
?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound, COMDAT

; 1513 :     _NODISCARD iterator lower_bound(const key_type& _Keyval) {

$LN28:
	push	rbx
	sub	rsp, 32					; 00000020H

; 1704 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	r10, QWORD PTR [rcx]

; 1513 :     _NODISCARD iterator lower_bound(const key_type& _Keyval) {

	mov	rbx, rdx
	mov	r11, rcx

; 1704 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	r9, QWORD PTR [r10+8]

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [r9+25], 0
	jne	SHORT $LN5@lower_boun
	npad	6
$LL4@lower_boun:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r9+32]
	test	rax, rax
	je	SHORT $LN12@lower_boun

; 221  :    return *this;

	mov	rdx, QWORD PTR [r8]
	sub	rdx, rax
	npad	1
$LL23@lower_boun:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN25@lower_boun
	inc	rax
	test	cl, cl
	jne	SHORT $LL23@lower_boun
	xor	eax, eax
	shr	eax, 31
	jmp	SHORT $LN11@lower_boun
$LN25@lower_boun:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN11@lower_boun
$LN12@lower_boun:

; 222  : }

	mov	eax, DWORD PTR [r8+8]
	cmp	DWORD PTR [r9+40], eax
	setl	al
$LN11@lower_boun:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1708 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	test	al, al
	je	SHORT $LN6@lower_boun

; 1709 :                 _Result._Location._Child = _Tree_child::_Right;
; 1710 :                 _Trynode                 = _Trynode->_Right;

	mov	r9, QWORD PTR [r9+16]

; 1711 :             } else {

	jmp	SHORT $LN7@lower_boun
$LN6@lower_boun:

; 1712 :                 _Result._Location._Child = _Tree_child::_Left;
; 1713 :                 _Result._Bound           = _Trynode;

	mov	r10, r9

; 1714 :                 _Trynode                 = _Trynode->_Left;

	mov	r9, QWORD PTR [r9]
$LN7@lower_boun:

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [r9+25], 0
	je	SHORT $LL4@lower_boun
$LN5@lower_boun:

; 40   :         this->_Adopt(_Plist);

	mov	rdx, r11
	mov	QWORD PTR [rbx], r10
	mov	rcx, rbx
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1514 :         return iterator(_Find_lower_bound(_Keyval)._Bound, _Get_scary());

	mov	rax, rbx

; 1515 :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_Keyval$ = 64
?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find, COMDAT

; 1465 :     _NODISCARD iterator find(const key_type& _Keyval) {

$LN44:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 1704 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	rdi, QWORD PTR [rcx]

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	xor	r10d, r10d

; 1465 :     _NODISCARD iterator find(const key_type& _Keyval) {

	mov	rbx, rdx
	mov	rsi, rcx

; 1704 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	r11, rdi
	mov	r9, QWORD PTR [rdi+8]

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [r9+25], r10b
	jne	SHORT $LN8@find
	npad	8
$LL7@find:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r9+32]
	test	rax, rax
	je	SHORT $LN15@find

; 221  :    return *this;

	mov	rdx, QWORD PTR [r8]
	sub	rdx, rax
	npad	1
$LL39@find:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN41@find
	inc	rax
	test	cl, cl
	jne	SHORT $LL39@find
	mov	eax, r10d
	shr	eax, 31
	jmp	SHORT $LN14@find
$LN41@find:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN14@find
$LN15@find:

; 222  : }

	mov	eax, DWORD PTR [r8+8]
	cmp	DWORD PTR [r9+40], eax
	setl	al
$LN14@find:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1708 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	test	al, al
	je	SHORT $LN9@find

; 1709 :                 _Result._Location._Child = _Tree_child::_Right;
; 1710 :                 _Trynode                 = _Trynode->_Right;

	mov	r9, QWORD PTR [r9+16]

; 1711 :             } else {

	jmp	SHORT $LN10@find
$LN9@find:

; 1712 :                 _Result._Location._Child = _Tree_child::_Left;
; 1713 :                 _Result._Bound           = _Trynode;

	mov	r11, r9

; 1714 :                 _Trynode                 = _Trynode->_Left;

	mov	r9, QWORD PTR [r9]
$LN10@find:

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [r9+25], r10b
	je	SHORT $LL7@find
$LN8@find:

; 1698 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	cmp	BYTE PTR [r11+25], r10b
	jne	SHORT $LN4@find
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r8]
	test	rax, rax
	je	SHORT $LN24@find

; 221  :    return *this;

	mov	rdx, QWORD PTR [r11+32]
	sub	rdx, rax
$LL36@find:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN38@find
	inc	rax
	test	cl, cl
	jne	SHORT $LL36@find
	shr	r10d, 31
	jmp	SHORT $LN23@find
$LN38@find:
	sbb	r10d, r10d
	or	r10d, 1
	shr	r10d, 31
	jmp	SHORT $LN23@find
$LN24@find:

; 222  : }

	mov	eax, DWORD PTR [r11+40]
	cmp	DWORD PTR [r8+8], eax
	setl	r10b
$LN23@find:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1698 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	test	r10b, r10b
	je	SHORT $LN3@find
$LN4@find:

; 1461 :         return _Get_scary()->_Myhead;

	mov	r11, rdi
$LN3@find:

; 40   :         this->_Adopt(_Plist);

	mov	rdx, rsi
	mov	QWORD PTR [rbx], r11
	mov	rcx, rbx
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1466 :         return iterator(_Find(_Keyval), _Get_scary());
; 1467 :     }

	mov	rsi, QWORD PTR [rsp+56]
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@AEBVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_NXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty, COMDAT

; 1314 :         return size() == 0;

	cmp	QWORD PTR [rcx+8], 0
	sete	al

; 1315 :     }

	ret	0
?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_NXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size, COMDAT

; 1305 :         return _Get_scary()->_Mysize;

	mov	rax, QWORD PTR [rcx+8]

; 1306 :     }

	ret	0
?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end, COMDAT

; 1246 :     _NODISCARD iterator end() noexcept {

$LN11:
	push	rbx
	sub	rsp, 32					; 00000020H

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	rax, QWORD PTR [rcx]

; 1246 :     _NODISCARD iterator end() noexcept {

	mov	rbx, rdx

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	QWORD PTR [rdx], rax

; 40   :         this->_Adopt(_Plist);

	mov	rdx, rcx
	mov	rcx, rbx
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1247 :         const auto _Scary = _Get_scary();
; 1248 :         return iterator(_Scary->_Myhead, _Scary);

	mov	rax, rbx

; 1249 :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin, COMDAT

; 1236 :     _NODISCARD iterator begin() noexcept {

$LN11:
	push	rbx
	sub	rsp, 32					; 00000020H

; 1237 :         const auto _Scary = _Get_scary();
; 1238 :         return iterator(_Scary->_Myhead->_Left, _Scary);

	mov	rax, QWORD PTR [rcx]
	mov	rbx, rdx

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	r8, QWORD PTR [rax]
	mov	QWORD PTR [rdx], r8

; 40   :         this->_Adopt(_Plist);

	mov	rdx, rcx
	mov	rcx, rbx
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1237 :         const auto _Scary = _Get_scary();
; 1238 :         return iterator(_Scary->_Myhead->_Left, _Scary);

	mov	rax, rbx

; 1239 :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT

; 1187 :     ~_Tree() noexcept {

$LN11:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 751  :         this->_Orphan_all();

	call	?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	r8, QWORD PTR [rbx]
	mov	rdx, rbx
	mov	rcx, rbx
	mov	r8, QWORD PTR [r8+8]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	rcx, QWORD PTR [rbx]
	mov	edx, 72					; 00000048H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1194 :     }

	add	rsp, 32					; 00000020H
	pop	rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	jmp	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
__param0$ = 56
__param1$ = 64
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT
$LN9:
	push	rbx
	sub	rsp, 32					; 00000020H

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	QWORD PTR [rcx], rdx
	mov	rbx, rcx

; 40   :         this->_Adopt(_Plist);

	mov	rdx, r8
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
__param0$ = 56
__param1$ = 64
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT
$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	QWORD PTR [rcx], rdx
	mov	rbx, rcx

; 40   :         this->_Adopt(_Plist);

	mov	rdx, r8
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vector
;	COMDAT ?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAXAEAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
__formal$dead$ = 64
?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAXAEAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_construct, COMDAT

; 556  :     void _Move_construct(vector& _Right, true_type) noexcept { // move from _Right, stealing its contents

$LN7:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx

; 384  :         this->_Swap_proxy_and_iterators(_Right);

	call	?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z ; std::_Container_base0::_Swap_proxy_and_iterators

; 385  :         _Myfirst = _Right._Myfirst;

	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR [rbx], rax

; 386  :         _Mylast  = _Right._Mylast;

	mov	rax, QWORD PTR [rdi+8]
	mov	QWORD PTR [rbx+8], rax

; 387  :         _Myend   = _Right._Myend;

	mov	rax, QWORD PTR [rdi+16]
	mov	QWORD PTR [rbx+16], rax

; 388  : 
; 389  :         _Right._Myfirst = pointer();

	xor	eax, eax

; 557  :         _Mypair._Myval2._Take_contents(_Right._Mypair._Myval2);
; 558  :     }

	mov	rbx, QWORD PTR [rsp+48]

; 389  :         _Right._Myfirst = pointer();

	mov	QWORD PTR [rdi], rax

; 390  :         _Right._Mylast  = pointer();

	mov	QWORD PTR [rdi+8], rax

; 391  :         _Right._Myend   = pointer();

	mov	QWORD PTR [rdi+16], rax

; 557  :         _Mypair._Myval2._Take_contents(_Right._Mypair._Myval2);
; 558  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEAAXAEAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--, COMDAT

; 73   :         if (_Ptr->_Isnil) {

	mov	rdx, QWORD PTR [rcx]
	mov	r8, rcx
	cmp	BYTE PTR [rdx+25], 0
	je	SHORT $LN4@operator

; 74   :             _Ptr = _Ptr->_Right; // end() ==> rightmost

	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx], rax

; 86   :         }
; 87   : 
; 88   :         return *this;
; 89   :     }

	mov	rax, rcx
	ret	0
$LN4@operator:

; 75   :         } else if (_Ptr->_Left->_Isnil) { // climb looking for left subtree

	mov	rcx, QWORD PTR [rdx]
	cmp	BYTE PTR [rcx+25], 0
	je	SHORT $LN6@operator

; 76   :             _Nodeptr _Pnode;
; 77   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left) {

	mov	rax, QWORD PTR [rdx+8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN3@operator
	mov	rcx, rdx
	mov	r9, rdx
$LL2@operator:
	mov	r10, rax
	mov	r11, rax
	mov	rdx, r9
	cmp	rcx, QWORD PTR [rax]
	jne	SHORT $LN3@operator
	mov	rcx, rax

; 78   :                 _Ptr = _Pnode; // ==> parent while left subtree

	mov	QWORD PTR [r8], rax
	mov	rax, QWORD PTR [rax+8]
	mov	r9, rcx
	mov	rdx, rcx
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL2@operator
$LN3@operator:

; 79   :             }
; 80   : 
; 81   :             if (!_Ptr->_Isnil) { // decrement non-begin()

	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN24@operator

; 82   :                 _Ptr = _Pnode; // ==> parent if not head

	mov	QWORD PTR [r8], rax

; 86   :         }
; 87   : 
; 88   :         return *this;
; 89   :     }

	mov	rax, r8
	ret	0
$LN6@operator:

; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN12@operator
	npad	5
$LL11@operator:

; 444  :             _Pnode = _Pnode->_Right;

	mov	rcx, rax
	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL11@operator
$LN12@operator:

; 83   :             }
; 84   :         } else {
; 85   :             _Ptr = _Mytree::_Max(_Ptr->_Left); // ==> largest of left subtree

	mov	QWORD PTR [r8], rcx
$LN24@operator:

; 86   :         }
; 87   : 
; 88   :         return *this;
; 89   :     }

	mov	rax, r8
	ret	0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++, COMDAT

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

	mov	rdx, QWORD PTR [rcx]
	mov	r8, rcx
	mov	r9, QWORD PTR [rdx+16]
	cmp	BYTE PTR [r9+25], 0
	je	SHORT $LN4@operator

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

	mov	rax, QWORD PTR [rdx+8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN3@operator
	npad	5
$LL2@operator:
	cmp	rdx, QWORD PTR [rax+16]
	jne	SHORT $LN3@operator

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

	mov	QWORD PTR [rcx], rax
	mov	rdx, rax
	mov	rax, QWORD PTR [rax+8]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL2@operator
$LN3@operator:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())
; 59   :         } else {
; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 61   :         }
; 62   : 
; 63   :         return *this;

	mov	QWORD PTR [rcx], rax

; 64   :     }

	mov	rax, r8
	ret	0
$LN4@operator:

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	rcx, QWORD PTR [r9]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN9@operator
	npad	10
$LL8@operator:
	mov	rax, QWORD PTR [rcx]

; 452  :             _Pnode = _Pnode->_Left;

	mov	r9, rcx
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL8@operator
$LN9@operator:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())
; 59   :         } else {
; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 61   :         }
; 62   : 
; 63   :         return *this;

	mov	QWORD PTR [r8], r9

; 64   :     }

	mov	rax, r8
	ret	0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>, COMDAT

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	QWORD PTR [rcx], rdx
	mov	rbx, rcx

; 40   :         this->_Adopt(_Plist);

	mov	rdx, r8
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 41   :     }

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$dead$ = 16
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Orphan_ptr, COMDAT

; 714  : #if _ITERATOR_DEBUG_LEVEL == 2
; 715  :         _Lockit _Lock(_LOCK_DEBUG);
; 716  :         _Iterator_base12** _Pnext = &this->_Myproxy->_Myfirstiter;
; 717  :         while (*_Pnext) {
; 718  :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;
; 719  :             if (_Pnextptr == _Myhead || (_Ptr != nullptr && _Pnextptr != _Ptr)) {
; 720  :                 _Pnext = &(*_Pnext)->_Mynextiter;
; 721  :             } else { // orphan the iterator
; 722  :                 (*_Pnext)->_Myproxy = nullptr;
; 723  :                 *_Pnext             = (*_Pnext)->_Mynextiter;
; 724  :             }
; 725  :         }
; 726  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 727  :         (void) _Ptr;
; 728  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 729  :     }

	ret	0
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Orphan_ptr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_scary@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_scary, COMDAT

; 2054 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	rax, rcx

; 2055 :     }

	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_scary@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_scary, COMDAT

; 2050 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	rax, rcx

; 2051 :     }

	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal, COMDAT

; 2046 :         return _Mypair._Myval2._Get_first();

	mov	rax, rcx

; 2047 :     }

	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal, COMDAT

; 2042 :         return _Mypair._Myval2._Get_first();

	mov	rax, rcx

; 2043 :     }

	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z
_TEXT	SEGMENT
$S10$5 = 48
this$ = 48
_Proxy$6 = 56
_Parg$dead$ = 56
$T1 = 56
??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT

; 880  :     _Tree(const key_compare& _Parg) : _Mypair(_One_then_variadic_args_t(), _Parg, _Zero_then_variadic_args_t()) {

$LN23:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+16], rdx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1333 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	lea	rcx, QWORD PTR $T1[rsp]
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	xor	eax, eax

; 2023 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	lea	rdx, QWORD PTR $S10$5[rsp]
	mov	r8, rdi

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	QWORD PTR [rdi], rax

; 2023 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	lea	rcx, QWORD PTR _Proxy$6[rsp]

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	QWORD PTR [rdi+8], rax

; 2023 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	mov	ecx, 8

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	call	??2@YAPEAX_KPEAX@Z			; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	rdx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	mov	QWORD PTR [rax], rbx
	call	??2@YAPEAX_KPEAX@Z			; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	rdx, QWORD PTR [rbx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	mov	QWORD PTR [rax], rbx
	call	??2@YAPEAX_KPEAX@Z			; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 2025 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$6[rsp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 347  :         _Pnode->_Color = _Black;

	mov	WORD PTR [rbx+24], 257			; 00000101H

; 2024 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	QWORD PTR [rdi], rbx

; 2025 :         _Proxy._Release();

	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 881  :         _Alloc_sentinel_and_proxy();
; 882  :     }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBU?$less@VCZString@Value@Json@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@AEBV32@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
_Al$dead$ = 16
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@AEBV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::select_on_container_copy_construction, COMDAT

; 684  :         return _Al;

	mov	rax, rcx

; 685  :     }

	ret	0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@AEBV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\vector
;	COMDAT ?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXAEAV12@@Z PROC ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Take_contents, COMDAT

; 383  :     void _Take_contents(_Vector_val& _Right) noexcept {

$LN5:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx

; 384  :         this->_Swap_proxy_and_iterators(_Right);

	call	?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z ; std::_Container_base0::_Swap_proxy_and_iterators

; 385  :         _Myfirst = _Right._Myfirst;

	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR [rbx], rax

; 386  :         _Mylast  = _Right._Mylast;

	mov	rax, QWORD PTR [rdi+8]
	mov	QWORD PTR [rbx+8], rax

; 387  :         _Myend   = _Right._Myend;

	mov	rax, QWORD PTR [rdi+16]
	mov	QWORD PTR [rbx+16], rax

; 388  : 
; 389  :         _Right._Myfirst = pointer();

	xor	eax, eax

; 390  :         _Right._Mylast  = pointer();
; 391  :         _Right._Myend   = pointer();
; 392  :     }

	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rdi], rax
	mov	QWORD PTR [rdi+8], rax
	mov	QWORD PTR [rdi+16], rax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXAEAV12@@Z ENDP ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Take_contents
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first, COMDAT

; 1340 :         return *this;

	mov	rax, rcx

; 1341 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first, COMDAT

; 1336 :         return *this;

	mov	rax, rcx

; 1337 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z
_TEXT	SEGMENT
_Pnode$ = 8
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Min, COMDAT

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	rdx, QWORD PTR [rcx]
	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN9@Min
	npad	7
$LL2@Min:
	mov	rcx, QWORD PTR [rdx]

; 452  :             _Pnode = _Pnode->_Left;

	mov	rax, rdx
	mov	rdx, rcx
	cmp	BYTE PTR [rcx+25], 0
	je	SHORT $LL2@Min

; 456  :     }

	ret	0
$LN9@Min:

; 453  :         }
; 454  : 
; 455  :         return _Pnode;

	mov	rax, rcx

; 456  :     }

	ret	0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z
_TEXT	SEGMENT
_Pnode$ = 8
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Max, COMDAT

; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN9@Max
	npad	6
$LL2@Max:

; 444  :             _Pnode = _Pnode->_Right;

	mov	rcx, rax
	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL2@Max
$LN9@Max:

; 445  :         }
; 446  : 
; 447  :         return _Pnode;
; 448  :     }

	mov	rax, rcx
	ret	0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@PEAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ
_TEXT	SEGMENT
_Proxy$ = 48
this$ = 48
$S10$ = 56
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Alloc_sentinel_and_proxy, COMDAT

; 2020 :     void _Alloc_sentinel_and_proxy() {

$LN15:
	mov	QWORD PTR [rsp+24], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx

; 2021 :         const auto _Scary = _Get_scary();
; 2022 :         auto&& _Alproxy   = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());
; 2023 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	lea	rdx, QWORD PTR $S10$[rsp]
	mov	r8, rcx
	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	mov	ecx, 8

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	call	??2@YAPEAX_KPEAX@Z			; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	rdx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	mov	QWORD PTR [rax], rbx
	call	??2@YAPEAX_KPEAX@Z			; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	rdx, QWORD PTR [rbx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	mov	QWORD PTR [rax], rbx
	call	??2@YAPEAX_KPEAX@Z			; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 2025 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$[rsp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 347  :         _Pnode->_Color = _Black;

	mov	WORD PTR [rbx+24], 257			; 00000101H

; 2024 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	QWORD PTR [rdi], rbx

; 2025 :         _Proxy._Release();

	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2026 :     }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Alloc_sentinel_and_proxy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
_TEXT	SEGMENT
this$ = 8
_Wherenode$ = 16
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Rrotate, COMDAT

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	r8, QWORD PTR [rdx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

	mov	rax, QWORD PTR [r8+16]
	mov	QWORD PTR [rdx], rax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

	mov	rax, QWORD PTR [r8+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN2@Rrotate

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rdx
$LN2@Rrotate:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [r8+8], rax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

	mov	rax, QWORD PTR [rcx]
	cmp	rdx, QWORD PTR [rax+8]
	jne	SHORT $LN3@Rrotate

; 491  :             _Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], r8

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

	mov	QWORD PTR [r8+16], rdx
	mov	QWORD PTR [rdx+8], r8
	ret	0
$LN3@Rrotate:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	rax, QWORD PTR [rdx+8]
	cmp	rdx, QWORD PTR [rax+16]
	jne	SHORT $LN5@Rrotate

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], r8

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

	mov	QWORD PTR [r8+16], rdx
	mov	QWORD PTR [rdx+8], r8
	ret	0
$LN5@Rrotate:

; 494  :         } else {
; 495  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], r8

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

	mov	QWORD PTR [r8+16], rdx
	mov	QWORD PTR [rdx+8], r8
	ret	0
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z
_TEXT	SEGMENT
this$ = 8
_Wherenode$ = 16
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Lrotate, COMDAT

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	r8, QWORD PTR [rdx+16]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rdx+16], rax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

	mov	rax, QWORD PTR [r8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN2@Lrotate

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rdx
$LN2@Lrotate:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [r8+8], rax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

	mov	rax, QWORD PTR [rcx]
	cmp	rdx, QWORD PTR [rax+8]
	jne	SHORT $LN3@Lrotate

; 469  :             _Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], r8

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

	mov	QWORD PTR [r8], rdx
	mov	QWORD PTR [rdx+8], r8
	ret	0
$LN3@Lrotate:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	rax, QWORD PTR [rdx+8]
	cmp	rdx, QWORD PTR [rax]
	jne	SHORT $LN5@Lrotate

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], r8

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

	mov	QWORD PTR [r8], rdx
	mov	QWORD PTR [rdx+8], r8
	ret	0
$LN5@Lrotate:

; 472  :         } else {
; 473  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], r8

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

	mov	QWORD PTR [r8], rdx
	mov	QWORD PTR [rdx+8], r8
	ret	0
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility
;	COMDAT ??$swap@TValueHolder@Value@Json@@X@std@@YAXAEATValueHolder@Value@Json@@0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
??$swap@TValueHolder@Value@Json@@X@std@@YAXAEATValueHolder@Value@Json@@0@Z PROC ; std::swap<Json::Value::ValueHolder,void>, COMDAT

; 61   :     _Ty _Tmp = _STD move(_Left);
; 62   :     _Left    = _STD move(_Right);

	mov	r8, QWORD PTR [rdx]
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rcx], r8

; 63   :     _Right   = _STD move(_Tmp);

	mov	QWORD PTR [rdx], rax

; 64   : }

	ret	0
??$swap@TValueHolder@Value@Json@@X@std@@YAXAEATValueHolder@Value@Json@@0@Z ENDP ; std::swap<Json::Value::ValueHolder,void>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility
;	COMDAT ??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z
_TEXT	SEGMENT
this$ = 48
_Val1$ = 56
_Val2$dead$ = 64
??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z PROC ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>, COMDAT

; 149  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

$LN15:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rdx+8], 0
	je	SHORT $LN12@Value
	cmp	QWORD PTR [rdx], 0
	je	SHORT $LN12@Value
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+8]
	jmp	SHORT $LN8@Value
$LN12@Value:
	mov	rax, QWORD PTR [rdx]
$LN8@Value:
	mov	QWORD PTR [rdi], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	mov	ecx, DWORD PTR [rbx+8]
	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN9@Value
	xor	eax, eax
	test	ecx, ecx
	setne	al
	jmp	SHORT $LN10@Value
$LN9@Value:
	mov	eax, ecx
$LN10@Value:
	mov	DWORD PTR [rdi+8], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility

; 149  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	lea	rcx, QWORD PTR [rdi+16]
	lea	rdx, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Val1$ = 56
_Val2$dead$ = 64
?dtor$0@?0???$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z@4HA PROC ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z@4HA ENDP ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Val1$ = 56
_Val2$dead$ = 64
?dtor$0@?0???$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z@4HA PROC ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???$?0AEAVCZString@Value@Json@@AEBV12@$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEAVCZString@Value@Json@@AEBV34@@Z@4HA ENDP ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,0>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\map
;	COMDAT ??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_Where$ = 64
_Val$ = 72
??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::insert<std::pair<Json::Value::CZString const ,Json::Value> &,void>, COMDAT

; 169  :     iterator insert(const_iterator _Where, _Valty&& _Val) {

$LN13:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, r8
	mov	rdi, rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1184 :         return iterator(_Emplace_hint(_Where._Ptr, _STD forward<_Valtys>(_Vals)...), _Scary);

	mov	rdx, rax
	mov	r8, r9
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\map

; 169  :     iterator insert(const_iterator _Where, _Valty&& _Val) {

	mov	rbx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1184 :         return iterator(_Emplace_hint(_Where._Ptr, _STD forward<_Valtys>(_Vals)...), _Scary);

	call	??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>

; 40   :         this->_Adopt(_Plist);

	mov	rdx, rbx
	mov	QWORD PTR [rdi], rax
	mov	rcx, rdi
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\map

; 171  :     }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$insert@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::insert<std::pair<Json::Value::CZString const ,Json::Value> &,void>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstring
;	COMDAT ??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
_Proxy$ = 32
$S11$ = 33
$T2 = 64
$T1 = 64
this$ = 64
_First$ = 72
_Last$ = 80
_Al$ = 88
??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>, COMDAT

; 2374 :     basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc()) : _Mypair(_One_then_variadic_args_t(), _Al) {

$LN6:
	mov	QWORD PTR [rsp+32], rbx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx
	mov	r8, r9
	movzx	edx, BYTE PTR $T1[rsp]
	call	??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
	npad	1

; 2375 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2376 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

	mov	r8, rdi
	lea	rdx, QWORD PTR $S11$[rsp]
	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2377 :         _Tidy_init();

	mov	rcx, rdi
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2378 :         _Adl_verify_range(_First, _Last);

	lea	rdx, QWORD PTR _Last$[rsp]
	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ; std::_Adl_verify_range<char const *,char const *>

; 2379 :         _Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>());

	mov	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rbx, rax
	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@$$CBD@std@@YAPEBDQEBD@Z ; std::_Get_unwrapped<char const >
	mov	rdx, rax
	movzx	r9d, BYTE PTR $T2[rsp]
	mov	r8, rbx
	mov	rcx, rdi
	call	?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXQEBD0Urandom_access_iterator_tag@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct

; 2380 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1

; 2381 :     }

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Proxy$ = 32
$S11$ = 33
$T2 = 64
$T1 = 64
this$ = 64
_First$ = 72
_Last$ = 80
_Al$ = 88
?dtor$0@?0???$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$0@?0???$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Proxy$ = 32
$S11$ = 33
$T2 = 64
$T1 = 64
this$ = 64
_First$ = 72
_Last$ = 80
_Al$ = 88
?dtor$0@?0???$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
?dtor$0@?0???$?0PEBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD0AEBV?$allocator@D@1@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$move@AEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AEAV10@@Z PROC ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>, COMDAT

; 1439 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, rcx

; 1440 : }

	ret	0
??$move@AEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AEAV10@@Z ENDP ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
_Sentinel$ = 32
$S12$ = 64
this$ = 64
_Right$ = 72
_Al$dead$ = 80
$T5 = 80
_Proxy$ = 80
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 892  :             _STD forward<_Any_alloc>(_Al)) {

$LN53:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+24], r8
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	rsi, rcx

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax

; 893  :         auto&& _Alproxy   = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());
; 894  :         const auto _Scary = _Get_scary();
; 895  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, *_Scary);

	mov	r8, rcx
	lea	rdx, QWORD PTR $S12$[rsp]
	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 766  :     _Tree_head_scoped_ptr(_Alnode& _Al_, _Scary_val& _Mycont_) : _Al(_Al_), _Mycont(_STD addressof(_Mycont_)) {

	mov	QWORD PTR _Sentinel$[rsp], rsi
	mov	QWORD PTR _Sentinel$[rsp+8], rsi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	rdx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	rdx, QWORD PTR [rbx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 347  :         _Pnode->_Color = _Black;

	mov	WORD PTR [rbx+24], 257			; 00000101H

; 767  :         _Mycont->_Myhead = _Alnode::value_type::_Buyheadnode(_Al);

	mov	QWORD PTR [rsi], rbx

; 1731 :         _Scary->_Myhead->_Parent = _Copy_nodes(_Right_scary->_Myhead->_Parent, _Scary->_Myhead, _Movefl);

	mov	rdx, QWORD PTR [rdi]
	movzx	r9d, BYTE PTR $T5[rsp]
	mov	r8, rbx
	mov	rdx, QWORD PTR [rdx+8]
	mov	rcx, rsi
	call	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
	mov	rcx, QWORD PTR [rsi]
	mov	QWORD PTR [rcx+8], rax

; 1732 :         _Scary->_Mysize          = _Right_scary->_Mysize;

	mov	rax, QWORD PTR [rdi+8]
	mov	QWORD PTR [rsi+8], rax

; 1733 :         if (!_Scary->_Myhead->_Parent->_Isnil) { // nonempty tree, look for new smallest and largest

	mov	r8, QWORD PTR [rsi]
	mov	rdx, QWORD PTR [r8+8]
	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN23@Value

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	rcx, QWORD PTR [rdx]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN28@Value
	npad	4
$LL27@Value:

; 452  :             _Pnode = _Pnode->_Left;

	mov	rdx, rcx

; 445  :         }
; 446  : 
; 447  :         return _Pnode;
; 448  :     }
; 449  : 
; 450  :     static _Nodeptr _Min(_Nodeptr _Pnode) noexcept { // return leftmost node in subtree at _Pnode
; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	rax, QWORD PTR [rcx]
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL27@Value
$LN28@Value:

; 1734 :             _Scary->_Myhead->_Left  = _Scary_val::_Min(_Scary->_Myhead->_Parent);

	mov	QWORD PTR [r8], rdx

; 1735 :             _Scary->_Myhead->_Right = _Scary_val::_Max(_Scary->_Myhead->_Parent);

	mov	rdx, QWORD PTR [rsi]
	mov	rcx, QWORD PTR [rdx+8]

; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN32@Value
$LL31@Value:

; 444  :             _Pnode = _Pnode->_Right;

	mov	rcx, rax

; 436  : 
; 437  :     enum _Redbl { // colors for link to parent
; 438  :         _Red,
; 439  :         _Black
; 440  :     };
; 441  : 
; 442  :     static _Nodeptr _Max(_Nodeptr _Pnode) noexcept { // return rightmost node in subtree at _Pnode
; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL31@Value
$LN32@Value:

; 1735 :             _Scary->_Myhead->_Right = _Scary_val::_Max(_Scary->_Myhead->_Parent);

	mov	QWORD PTR [rdx+16], rcx

; 1736 :         } else { // empty tree, just tidy head pointers

	jmp	SHORT $LN24@Value
$LN23@Value:

; 1737 :             _Scary->_Myhead->_Left  = _Scary->_Myhead;

	mov	QWORD PTR [r8], r8

; 1738 :             _Scary->_Myhead->_Right = _Scary->_Myhead;

	mov	rax, QWORD PTR [rsi]
	mov	QWORD PTR [rax+16], rax
$LN24@Value:

; 896  :         _Tree_head_scoped_ptr<_Alnode, _Scary_val> _Sentinel(_Getal(), *_Scary);
; 897  :         _Copy(_Right, _Copy_tag());
; 898  :         _Sentinel._Release();
; 899  :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
	npad	1

; 900  :     }

	mov	rax, rsi
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Sentinel$ = 32
$S12$ = 64
this$ = 64
_Right$ = 72
_Al$dead$ = 80
$T5 = 80
_Proxy$ = 80
?dtor$0@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::dtor$0
	lea	rcx, QWORD PTR _Sentinel$[rdx]
	jmp	??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
?dtor$0@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Sentinel$ = 32
$S12$ = 64
this$ = 64
_Right$ = 72
_Al$dead$ = 80
$T5 = 80
_Proxy$ = 80
?dtor$0@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::dtor$0
	lea	rcx, QWORD PTR _Sentinel$[rdx]
	jmp	??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
?dtor$0@?0???$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA@AEBV01@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Find_lower_bound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@AEBVCZString@Value@Json@@@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
_Keyval$ = 24
??$_Find_lower_bound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@AEBVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Find_lower_bound<Json::Value::CZString>, COMDAT

; 1703 :         const auto _Scary = _Get_scary();
; 1704 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	rax, QWORD PTR [rcx]
	mov	r10, rdx
	mov	DWORD PTR [rdx+8], 0
	mov	QWORD PTR [rdx+16], rax
	mov	r9, QWORD PTR [rax+8]
	mov	QWORD PTR [rdx], r9

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [r9+25], 0
	jne	SHORT $LN18@Find_lower
	npad	1
$LL2@Find_lower:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r9+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1707 :             _Result._Location._Parent = _Trynode;

	mov	QWORD PTR [r10], r9
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	test	rax, rax
	je	SHORT $LN10@Find_lower

; 221  :    return *this;

	mov	rdx, QWORD PTR [r8]
	sub	rdx, rax
$LL15@Find_lower:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN17@Find_lower
	inc	rax
	test	cl, cl
	jne	SHORT $LL15@Find_lower
	xor	eax, eax
	shr	eax, 31
	jmp	SHORT $LN9@Find_lower
$LN17@Find_lower:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN9@Find_lower
$LN10@Find_lower:

; 222  : }

	mov	eax, DWORD PTR [r8+8]
	cmp	DWORD PTR [r9+40], eax
	setl	al
$LN9@Find_lower:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1708 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	test	al, al
	je	SHORT $LN4@Find_lower

; 1709 :                 _Result._Location._Child = _Tree_child::_Right;
; 1710 :                 _Trynode                 = _Trynode->_Right;

	mov	r9, QWORD PTR [r9+16]
	xor	eax, eax

; 1711 :             } else {

	jmp	SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1712 :                 _Result._Location._Child = _Tree_child::_Left;
; 1713 :                 _Result._Bound           = _Trynode;

	mov	QWORD PTR [r10+16], r9

; 1714 :                 _Trynode                 = _Trynode->_Left;

	mov	eax, 1
	mov	r9, QWORD PTR [r9]
$LN5@Find_lower:

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	mov	DWORD PTR [r10+8], eax
	cmp	BYTE PTR [r9+25], 0
	je	SHORT $LL2@Find_lower
$LN18@Find_lower:

; 1715 :             }
; 1716 :         }
; 1717 : 
; 1718 :         return _Result;
; 1719 :     }

	mov	rax, r10
	ret	0
??$_Find_lower_bound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@AEBVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Find_lower_bound<Json::Value::CZString>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Find@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@AEBAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z
_TEXT	SEGMENT
this$ = 8
_Keyval$ = 16
??$_Find@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@AEBAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Find<Json::Value::CZString>, COMDAT

; 1455 :     _NODISCARD _Nodeptr _Find(const _Other& _Keyval) const {

$LN35:
	mov	QWORD PTR [rsp+8], rbx

; 1704 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	rbx, QWORD PTR [rcx]

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	xor	r9d, r9d

; 1455 :     _NODISCARD _Nodeptr _Find(const _Other& _Keyval) const {

	mov	r10, rdx

; 1704 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	r11, rbx
	mov	r8, QWORD PTR [rbx+8]

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [r8+25], r9b
	jne	SHORT $LN6@Find
	npad	5
$LL5@Find:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r8+32]
	test	rax, rax
	je	SHORT $LN13@Find

; 221  :    return *this;

	mov	rdx, QWORD PTR [r10]
	sub	rdx, rax
	npad	1
$LL31@Find:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN33@Find
	inc	rax
	test	cl, cl
	jne	SHORT $LL31@Find
	mov	eax, r9d
	shr	eax, 31
	jmp	SHORT $LN12@Find
$LN33@Find:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN12@Find
$LN13@Find:

; 222  : }

	mov	eax, DWORD PTR [r10+8]
	cmp	DWORD PTR [r8+40], eax
	setl	al
$LN12@Find:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1708 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	test	al, al
	je	SHORT $LN7@Find

; 1709 :                 _Result._Location._Child = _Tree_child::_Right;
; 1710 :                 _Trynode                 = _Trynode->_Right;

	mov	r8, QWORD PTR [r8+16]

; 1711 :             } else {

	jmp	SHORT $LN8@Find
$LN7@Find:

; 1712 :                 _Result._Location._Child = _Tree_child::_Left;
; 1713 :                 _Result._Bound           = _Trynode;

	mov	r11, r8

; 1714 :                 _Trynode                 = _Trynode->_Left;

	mov	r8, QWORD PTR [r8]
$LN8@Find:

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [r8+25], r9b
	je	SHORT $LL5@Find
$LN6@Find:

; 1698 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	cmp	BYTE PTR [r11+25], r9b
	jne	SHORT $LN2@Find
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r10]
	test	rax, rax
	je	SHORT $LN22@Find

; 221  :    return *this;

	mov	rdx, QWORD PTR [r11+32]
	sub	rdx, rax
$LL28@Find:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN30@Find
	inc	rax
	test	cl, cl
	jne	SHORT $LL28@Find
	shr	r9d, 31
	jmp	SHORT $LN21@Find
$LN30@Find:
	sbb	r9d, r9d
	or	r9d, 1
	shr	r9d, 31
	jmp	SHORT $LN21@Find
$LN22@Find:

; 222  : }

	mov	eax, DWORD PTR [r11+40]
	cmp	DWORD PTR [r10+8], eax
	setl	r9b
$LN21@Find:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1458 :             return _Loc._Bound;

	mov	rax, r11

; 1698 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	test	r9b, r9b
	je	SHORT $LN1@Find
$LN2@Find:

; 1459 :         }
; 1460 : 
; 1461 :         return _Get_scary()->_Myhead;

	mov	rax, rbx
$LN1@Find:

; 1462 :     }

	mov	rbx, QWORD PTR [rsp+8]
	ret	0
??$_Find@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@AEBAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Find<Json::Value::CZString>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
_TEXT	SEGMENT
this$ = 48
_Al$ = 56
_Rootnode$ = 64
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

$LN31:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

	cmp	BYTE PTR [r8+25], 0
	jne	SHORT $LN3@Erase_tree
	npad	12
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

	mov	r8, QWORD PTR [rdi+16]
	mov	rdx, rsi
	mov	rcx, rbp
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility

; 570  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rbx, rdi

; 571  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rdi, QWORD PTR [rdi]
	lea	rcx, QWORD PTR [rbx+48]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rbx+32], 0
	je	SHORT $LN18@Erase_tree
	cmp	DWORD PTR [rbx+40], 1
	jne	SHORT $LN18@Erase_tree

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx+32]
	call	QWORD PTR [rax+16]
	npad	1
$LN18@Erase_tree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, rbx
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

	cmp	BYTE PTR [rdi+25], 0
	je	SHORT $LL2@Erase_tree
$LN3@Erase_tree:

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Al$ = 56
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 750  :     void _Erase_head(_Alnode& _Al) noexcept {

$LN9:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx

; 751  :         this->_Orphan_all();

	call	?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	r8, QWORD PTR [rdi]
	mov	rdx, rbx
	mov	rcx, rdi
	mov	r8, QWORD PTR [r8+8]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	rcx, QWORD PTR [rdi]
	mov	edx, 72					; 00000048H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 754  :     }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	jmp	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z PROC ; std::addressof<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT

; 275  :     return __builtin_addressof(_Val);

	mov	rax, rcx

; 276  : }

	ret	0
??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z ENDP ; std::addressof<std::pair<Json::Value::CZString const ,Json::Value> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@0@AEBV10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@0@AEBV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > const >, COMDAT

; 275  :     return __builtin_addressof(_Val);

	mov	rax, rcx

; 276  : }

	ret	0
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@0@AEBV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > const >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT

; 275  :     return __builtin_addressof(_Val);

	mov	rax, rcx

; 276  : }

	ret	0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$dead$ = 56
_Val1$dead$ = 64
<_Val2_0>$ = 72
??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString> const &,std::_Zero_then_variadic_args_t>, COMDAT

; 1333 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN9:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rcx, r9
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	xor	eax, eax
	mov	QWORD PTR [rbx], rax
	mov	QWORD PTR [rbx+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1333 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$?0AEBU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBU?$less@VCZString@Value@Json@@@1@$$QEAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
_Al$dead$ = 48
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z PROC ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 341  :     static _Nodeptr _Buyheadnode(_Alloc& _Al) {

$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	mov	ecx, 8

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	call	??2@YAPEAX_KPEAX@Z			; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	rdx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	mov	QWORD PTR [rax], rbx
	call	??2@YAPEAX_KPEAX@Z			; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	rdx, QWORD PTR [rbx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	mov	QWORD PTR [rax], rbx
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 349  :         return _Pnode;

	mov	rax, rbx
	mov	WORD PTR [rbx+24], 257			; 00000101H

; 350  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ENDP ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z
_TEXT	SEGMENT
_Al$dead$ = 48
_Ptr$ = 56
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z PROC ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 377  :     static void _Freenode(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

$LN21:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	lea	rcx, QWORD PTR [rdx+48]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rbx+32], 0
	je	SHORT $LN12@Freenode
	cmp	DWORD PTR [rbx+40], 1
	jne	SHORT $LN12@Freenode

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx+32]
	call	QWORD PTR [rax+16]
	npad	1
$LN12@Freenode:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 381  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	jmp	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z ENDP ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ PROC ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT

; 774  :     ~_Tree_head_scoped_ptr() {

$LN12:
	push	rdi
	sub	rsp, 32					; 00000020H

; 775  :         if (_Mycont) {

	mov	rdi, QWORD PTR [rcx+8]
	test	rdi, rdi
	je	SHORT $LN7@Tree_head_

; 776  :             _Mycont->_Erase_head(_Al);

	mov	QWORD PTR [rsp+48], rbx
	mov	rbx, QWORD PTR [rcx]

; 751  :         this->_Orphan_all();

	mov	rcx, rdi
	call	?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	r8, QWORD PTR [rdi]
	mov	rdx, rbx
	mov	rcx, rdi
	mov	r8, QWORD PTR [r8+8]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	rcx, QWORD PTR [rdi]
	mov	edx, 72					; 00000048H
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	mov	rbx, QWORD PTR [rsp+48]
$LN7@Tree_head_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 778  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@XZ ENDP ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Release@?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?_Release@?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAAXXZ PROC ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Release, COMDAT

; 771  :         _Mycont = nullptr;

	mov	QWORD PTR [rcx+8], 0

; 772  :     }

	ret	0
?_Release@?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAAXXZ ENDP ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??0?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@AEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Al_$ = 56
_Mycont_$ = 64
??0?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@AEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z PROC ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT

; 766  :     _Tree_head_scoped_ptr(_Alnode& _Al_, _Scary_val& _Mycont_) : _Al(_Al_), _Mycont(_STD addressof(_Mycont_)) {

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], r8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rax
	mov	ecx, 8

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rbx, rax

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	call	??2@YAPEAX_KPEAX@Z			; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	rdx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	mov	QWORD PTR [rax], rbx
	call	??2@YAPEAX_KPEAX@Z			; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	rdx, QWORD PTR [rbx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	mov	QWORD PTR [rax], rbx
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 347  :         _Pnode->_Color = _Black;

	mov	WORD PTR [rbx+24], 257			; 00000101H

; 767  :         _Mycont->_Myhead = _Alnode::value_type::_Buyheadnode(_Al);

	mov	rax, QWORD PTR [rdi+8]
	mov	QWORD PTR [rax], rbx

; 768  :     }

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@AEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ENDP ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef
;	COMDAT ??R?$less@VCZString@Value@Json@@@std@@QEBA_NAEBVCZString@Value@Json@@0@Z
_TEXT	SEGMENT
this$dead$ = 8
_Left$ = 16
_Right$ = 24
??R?$less@VCZString@Value@Json@@@std@@QEBA_NAEBVCZString@Value@Json@@0@Z PROC ; std::less<Json::Value::CZString>::operator(), COMDAT
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rdx]
	test	rax, rax
	je	SHORT $LN4@operator

; 221  :    return *this;

	mov	rdx, QWORD PTR [r8]
	sub	rdx, rax
	npad	2
$LL6@operator:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN8@operator
	inc	rax
	test	cl, cl
	jne	SHORT $LL6@operator
	mov	eax, 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef

; 128  :     }

	ret	0
$LN8@operator:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 221  :    return *this;

	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef

; 128  :     }

	ret	0
$LN4@operator:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 222  : }

	mov	eax, DWORD PTR [r8+8]
	cmp	DWORD PTR [rdx+8], eax
	setl	al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef

; 128  :     }

	ret	0
??R?$less@VCZString@Value@Json@@@std@@QEBA_NAEBVCZString@Value@Json@@0@Z ENDP ; std::less<Json::Value::CZString>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Getcomp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getcomp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getcomp, COMDAT

; 2038 :         return _Mypair._Get_first();

	mov	rax, rcx

; 2039 :     }

	ret	0
?_Getcomp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBAAEBU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA?AU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA?AU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::key_comp, COMDAT

; 1322 :         return _Getcomp();

	mov	rax, rdx

; 1323 :     }

	ret	0
?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA?AU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::key_comp
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$dead$ = 56
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocate, COMDAT

; 783  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN4:
	sub	rsp, 40					; 00000028H

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax

; 785  :     }

	add	rsp, 40					; 00000028H

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	jmp	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEBAAEBU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEBAAEBU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_first, COMDAT

; 1340 :         return *this;

	mov	rax, rcx

; 1341 :     }

	ret	0
?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEBAAEBU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><>, COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1328 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	rax, rcx
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$move@AEATValueHolder@Value@Json@@@std@@YA$$QEATValueHolder@Value@Json@@AEAT123@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEATValueHolder@Value@Json@@@std@@YA$$QEATValueHolder@Value@Json@@AEAT123@@Z PROC ; std::move<Json::Value::ValueHolder &>, COMDAT

; 1439 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, rcx

; 1440 : }

	ret	0
??$move@AEATValueHolder@Value@Json@@@std@@YA$$QEATValueHolder@Value@Json@@AEAT123@@Z ENDP ; std::move<Json::Value::ValueHolder &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\map
;	COMDAT ??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
_Val$ = 8
??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn<Json::Value::CZString const ,Json::Value>, COMDAT

; 69   :         return _Val.first;

	mov	rax, rcx

; 70   :     }

	ret	0
??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn<Json::Value::CZString const ,Json::Value>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$forward@AEAVCZString@Value@Json@@@std@@YAAEAVCZString@Value@Json@@AEAV123@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAVCZString@Value@Json@@@std@@YAAEAVCZString@Value@Json@@AEAV123@@Z PROC ; std::forward<Json::Value::CZString &>, COMDAT

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1428 : }

	ret	0
??$forward@AEAVCZString@Value@Json@@@std@@YAAEAVCZString@Value@Json@@AEAV123@@Z ENDP ; std::forward<Json::Value::CZString &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$forward@AEBVValue@Json@@@std@@YAAEBVValue@Json@@AEBV12@@Z
_TEXT	SEGMENT
_Arg$dead$ = 8
??$forward@AEBVValue@Json@@@std@@YAAEBVValue@Json@@AEBV12@@Z PROC ; std::forward<Json::Value const &>, COMDAT

; 1427 :     return static_cast<_Ty&&>(_Arg);

	lea	rax, OFFSET FLAT:?null@Value@Json@@2V12@B ; Json::Value::null

; 1428 : }

	ret	0
??$forward@AEBVValue@Json@@@std@@YAAEBVValue@Json@@AEBV12@@Z ENDP ; std::forward<Json::Value const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$forward@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z PROC ; std::forward<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1428 : }

	ret	0
??$forward@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAEAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AEAU10@@Z ENDP ; std::forward<std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_Where$ = 64
<_Vals_0>$ = 72
??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 1179 :     iterator emplace_hint(const_iterator _Where, _Valtys&&... _Vals) { // insert value_type(_Val...) at _Where

$LN11:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, r8
	mov	rdi, rdx

; 1180 :         const auto _Scary = _Get_scary();
; 1181 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1182 :         _STL_VERIFY(_Where._Getcont() == _Scary, "map/set insert iterator outside range");
; 1183 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1184 :         return iterator(_Emplace_hint(_Where._Ptr, _STD forward<_Valtys>(_Vals)...), _Scary);

	mov	rdx, rax
	mov	r8, r9
	mov	rbx, rcx
	call	??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>

; 40   :         this->_Adopt(_Plist);

	mov	rdx, rbx
	mov	QWORD PTR [rdi], rax
	mov	rcx, rdi
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 1185 :     }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@YA$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@YA$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@0@AEAV10@@Z PROC ; std::forward<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1428 : }

	ret	0
??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@YA$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@0@AEAV10@@Z ENDP ; std::forward<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$?0U?$less@VCZString@Value@Json@@@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$less@VCZString@Value@Json@@@1@$$QEAU21@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
_Val1$dead$ = 24
<_Val2_0>$dead$ = 32
<_Val2_1>$dead$ = 40
??$?0U?$less@VCZString@Value@Json@@@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$less@VCZString@Value@Json@@@1@$$QEAU21@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString>,std::_One_then_variadic_args_t,std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1333 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	rax, rcx
	ret	0
??$?0U?$less@VCZString@Value@Json@@@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$less@VCZString@Value@Json@@@1@$$QEAU21@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString>,std::_One_then_variadic_args_t,std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
_Movefl$ = 64
??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>, COMDAT

; 1728 :     void _Copy(const _Tree& _Right, _Moveit _Movefl) { // copy or move entire tree from _Right

$LN23:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 1729 :         const auto _Scary        = _Get_scary();
; 1730 :         const auto _Right_scary  = _Right._Get_scary();
; 1731 :         _Scary->_Myhead->_Parent = _Copy_nodes(_Right_scary->_Myhead->_Parent, _Scary->_Myhead, _Movefl);

	movzx	r9d, r8b
	mov	rdx, QWORD PTR [rdx]
	mov	rdi, rcx
	mov	r8, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rdx+8]
	call	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
	mov	r8, QWORD PTR [rdi]
	mov	QWORD PTR [r8+8], rax

; 1732 :         _Scary->_Mysize          = _Right_scary->_Mysize;
; 1733 :         if (!_Scary->_Myhead->_Parent->_Isnil) { // nonempty tree, look for new smallest and largest

	mov	r8, QWORD PTR [rdi]
	mov	rax, QWORD PTR [rbx+8]
	mov	QWORD PTR [rdi+8], rax
	mov	rdx, QWORD PTR [r8+8]
	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN2@Copy

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	rcx, QWORD PTR [rdx]
	cmp	BYTE PTR [rcx+25], 0
	jne	SHORT $LN7@Copy
	npad	8
$LL6@Copy:
	mov	rax, QWORD PTR [rcx]

; 452  :             _Pnode = _Pnode->_Left;

	mov	rdx, rcx
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL6@Copy
$LN7@Copy:

; 1734 :             _Scary->_Myhead->_Left  = _Scary_val::_Min(_Scary->_Myhead->_Parent);

	mov	QWORD PTR [r8], rdx

; 1735 :             _Scary->_Myhead->_Right = _Scary_val::_Max(_Scary->_Myhead->_Parent);

	mov	rdx, QWORD PTR [rdi]
	mov	rcx, QWORD PTR [rdx+8]

; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN11@Copy
$LL10@Copy:

; 444  :             _Pnode = _Pnode->_Right;

	mov	rcx, rax
	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], 0
	je	SHORT $LL10@Copy
$LN11@Copy:

; 1735 :             _Scary->_Myhead->_Right = _Scary_val::_Max(_Scary->_Myhead->_Parent);

	mov	QWORD PTR [rdx+16], rcx

; 1736 :         } else { // empty tree, just tidy head pointers
; 1737 :             _Scary->_Myhead->_Left  = _Scary->_Myhead;
; 1738 :             _Scary->_Myhead->_Right = _Scary->_Myhead;
; 1739 :         }
; 1740 :     }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@Copy:
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [r8], r8
	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR [rax+16], rax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXAEBV01@U_Copy_tag@01@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Lower_bound_duplicate@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Bound$ = 16
_Keyval$ = 24
??$_Lower_bound_duplicate@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lower_bound_duplicate<Json::Value::CZString>, COMDAT

; 1698 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN3@Lower_boun
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r8]
	test	rax, rax
	je	SHORT $LN8@Lower_boun

; 221  :    return *this;

	mov	rdx, QWORD PTR [rdx+32]
	sub	rdx, rax
$LL10@Lower_boun:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN12@Lower_boun
	inc	rax
	test	cl, cl
	jne	SHORT $LL10@Lower_boun
	xor	eax, eax
	shr	eax, 31
	jmp	SHORT $LN7@Lower_boun
$LN12@Lower_boun:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN7@Lower_boun
$LN8@Lower_boun:

; 222  : }

	mov	eax, DWORD PTR [rdx+40]
	cmp	DWORD PTR [r8+8], eax
	setl	al
$LN7@Lower_boun:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1698 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	test	al, al
	jne	SHORT $LN3@Lower_boun
	mov	al, 1

; 1699 :     }

	ret	0
$LN3@Lower_boun:

; 1698 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	xor	al, al

; 1699 :     }

	ret	0
??$_Lower_bound_duplicate@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lower_bound_duplicate<Json::Value::CZString>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility
;	COMDAT ??$exchange@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@0@Z
_TEXT	SEGMENT
_Val$ = 8
_New_val$ = 16
??$exchange@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@0@Z PROC ; std::exchange<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>, COMDAT

; 570  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);
; 571  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rdx, QWORD PTR [rdx]
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rcx], rdx

; 572  :     return _Old_val;
; 573  : }

	ret	0
??$exchange@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@0@Z ENDP ; std::exchange<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$ = 16
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z PROC ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 368  :     static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

	mov	rcx, rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	jmp	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@@Z ENDP ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$forward@AEBU?$less@VCZString@Value@Json@@@std@@@std@@YAAEBU?$less@VCZString@Value@Json@@@0@AEBU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBU?$less@VCZString@Value@Json@@@std@@@std@@YAAEBU?$less@VCZString@Value@Json@@@0@AEBU10@@Z PROC ; std::forward<std::less<Json::Value::CZString> const &>, COMDAT

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1428 : }

	ret	0
??$forward@AEBU?$less@VCZString@Value@Json@@@std@@@std@@YAAEBU?$less@VCZString@Value@Json@@@0@AEBU10@@Z ENDP ; std::forward<std::less<Json::Value::CZString> const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEBQEAU10@@Z
_TEXT	SEGMENT
_Obj$ = 48
<_Args_0>$ = 56
??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEBQEAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * const &>, COMDAT

; 202  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rcx
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 204  :         _Ty(_STD forward<_Types>(_Args)...);
; 205  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEBQEAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
__formal$dead$ = 48
_Ptr$ = 56
??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT

; 675  :     static void destroy(_Alloc&, _Uty* const _Ptr) {

$LN17:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	lea	rcx, QWORD PTR [rdx+16]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN13@destroy
	cmp	DWORD PTR [rbx+8], 1
	jne	SHORT $LN13@destroy

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+16]
	npad	1
$LN13@destroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 677  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::pair<Json::Value::CZString const ,Json::Value> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z PROC ; std::pair<Json::Value::CZString const ,Json::Value>::`scalar deleting destructor', COMDAT
$LN15:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	add	rcx, 16
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN11@scalar
	cmp	DWORD PTR [rbx+8], 1
	jne	SHORT $LN11@scalar

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+16]
	npad	1
$LN11@scalar:
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAAPEAXI@Z ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	rax, rcx
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z
_TEXT	SEGMENT
__formal$dead$ = 8
_Ptr$ = 16
_Count$dead$ = 24
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::deallocate, COMDAT

; 664  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) {

	mov	rcx, rdx

; 665  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	jmp	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAA@XZ PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >, COMDAT

; 772  :     constexpr allocator() noexcept {}

	mov	rax, rcx
	ret	0
??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAA@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
_Val1$dead$ = 24
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1333 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	rax, rcx
	ret	0
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$forward@AEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>, COMDAT

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1428 : }

	ret	0
??$forward@AEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
$T5 = 32
_Loc$ = 32
_Loc$1$ = 64
$T12 = 64
$T1 = 80
$T6 = 160
$T2 = 160
this$ = 160
_Hint$ = 168
<_Vals_0>$ = 176
$T3 = 184
??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 1100 :     _Nodeptr _Emplace_hint(const _Nodeptr _Hint, _Valtys&&... _Vals) {

$LN75:
	mov	QWORD PTR [rsp+16], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 112				; 00000070H
	mov	rbx, r8
	mov	rdi, rcx

; 1101 :         using _In_place_key_extractor = typename _Traits::template _In_place_key_extractor<_Remove_cvref_t<_Valtys>...>;
; 1102 :         const auto _Scary             = _Get_scary();
; 1103 :         _Tree_find_hint_result<_Nodeptr> _Loc;
; 1104 :         _Nodeptr _Inserted;
; 1105 :         if constexpr (!_Multi && _In_place_key_extractor::_Extractable) {
; 1106 :             _Loc = _Find_hint(_Hint, _In_place_key_extractor::_Extract(_Vals...));

	mov	r9, r8
	mov	r8, rdx
	lea	rdx, QWORD PTR $T1[rsp]
	call	??$_Find_hint@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA?AU?$_Tree_find_hint_result@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Find_hint<Json::Value::CZString>
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR _Loc$1$[rsp], xmm0
	movups	XMMWORD PTR _Loc$[rsp], xmm0
	movsd	xmm0, QWORD PTR [rax+16]
	movsd	QWORD PTR _Loc$[rsp+16], xmm0

; 1107 :             if (_Loc._Duplicate) {

	cmp	BYTE PTR _Loc$[rsp+16], 0
	je	SHORT $LN2@Emplace_hi

; 1108 :                 return _Loc._Location._Parent;

	mov	rax, QWORD PTR _Loc$[rsp]
	jmp	$LN1@Emplace_hi
$LN2@Emplace_hi:

; 1309 :         return _Min_value(

	mov	rax, 256204778801521550			; 038e38e38e38e38eH
	mov	QWORD PTR $T2[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T3[rsp], rax
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z	; std::_Min_value<unsigned __int64>
	mov	rcx, QWORD PTR [rax]

; 1722 :         if (max_size() == _Get_scary()->_Mysize) {

	cmp	rcx, QWORD PTR [rdi+8]
	je	$LN73@Emplace_hi

; 1109 :             }
; 1110 : 
; 1111 :             _Check_grow_by_1();
; 1112 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

	mov	r15, QWORD PTR [rdi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1036 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	QWORD PTR $T5[rsp], rdi

; 1043 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	xor	esi, esi
	mov	QWORD PTR $T5[rsp+8], rsi

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	lea	ecx, QWORD PTR [rsi+1]
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	rbp, rax
	mov	QWORD PTR $T5[rsp+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

	lea	rdx, QWORD PTR [rax+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	lea	ecx, QWORD PTR [rsi+40]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	r14, rax
	mov	QWORD PTR $T6[rsp], rax
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rbx+8], esi
	je	SHORT $LN70@Emplace_hi
	cmp	QWORD PTR [rbx], rsi
	je	SHORT $LN70@Emplace_hi
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	r8, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [r8+8]
	jmp	SHORT $LN32@Emplace_hi
$LN70@Emplace_hi:
	mov	rax, QWORD PTR [rbx]
$LN32@Emplace_hi:
	mov	QWORD PTR [r14], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	mov	eax, DWORD PTR [rbx+8]
	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN33@Emplace_hi
	test	eax, eax
	setne	sil
	jmp	SHORT $LN34@Emplace_hi
$LN33@Emplace_hi:
	mov	esi, eax
$LN34@Emplace_hi:
	mov	DWORD PTR [r14+8], esi

; 1719 :       }

	lea	rdx, QWORD PTR [rbx+16]
	lea	rcx, QWORD PTR [r14+16]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rbp
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], r15
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	lea	rdx, QWORD PTR [rbp+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], r15
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 809  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	lea	rdx, QWORD PTR [rbp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], r15
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 810  :         this->_Ptr->_Color = _Red;

	mov	WORD PTR [rbp+24], 0

; 1113 :             // nothrow hereafter
; 1114 :         } else {
; 1115 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);
; 1116 :             _Loc = _Find_hint(_Hint, _Traits::_Kfn(_Newnode._Ptr->_Myval));
; 1117 :             if constexpr (!_Multi) {
; 1118 :                 if (_Loc._Duplicate) {
; 1119 :                     return _Loc._Location._Parent;
; 1120 :                 }
; 1121 :             }
; 1122 : 
; 1123 :             _Check_grow_by_1();
; 1124 :             // nothrow hereafter
; 1125 :             _Inserted = _Newnode._Release();
; 1126 :         }
; 1127 : 
; 1128 :         return _Scary->_Insert_node(_Loc._Location, _Inserted);

	movups	xmm0, XMMWORD PTR _Loc$1$[rsp]
	movaps	XMMWORD PTR $T12[rsp], xmm0
	mov	r8, rbp
	lea	rdx, QWORD PTR $T12[rsp]
	mov	rcx, rdi
	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Insert_node
$LN1@Emplace_hi:

; 1129 :     }

	mov	rbx, QWORD PTR [rsp+168]
	add	rsp, 112				; 00000070H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN73@Emplace_hi:

; 1723 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
	int	3
$LN71@Emplace_hi:
??$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T5 = 32
_Loc$ = 32
_Loc$1$ = 64
$T12 = 64
$T1 = 80
$T6 = 160
$T2 = 160
this$ = 160
_Hint$ = 168
<_Vals_0>$ = 176
$T3 = 184
?dtor$2@?0???$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$2
	lea	rcx, QWORD PTR $T5[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$2@?0???$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$2
$T5 = 32
_Loc$ = 32
_Loc$1$ = 64
$T12 = 64
$T1 = 80
$T6 = 160
$T2 = 160
this$ = 160
_Hint$ = 168
<_Vals_0>$ = 176
$T3 = 184
?dtor$1@?0???$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
	lea	rcx, QWORD PTR $T5[rdx]
	jmp	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
?dtor$1@?0???$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
$T5 = 32
_Loc$ = 32
_Loc$1$ = 64
$T12 = 64
$T1 = 80
$T6 = 160
$T2 = 160
this$ = 160
_Hint$ = 168
<_Vals_0>$ = 176
$T3 = 184
?dtor$3@?0???$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$3
	mov	rcx, QWORD PTR $T6[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$3@?0???$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T5 = 32
_Loc$ = 32
_Loc$1$ = 64
$T12 = 64
$T1 = 80
$T6 = 160
$T2 = 160
this$ = 160
_Hint$ = 168
<_Vals_0>$ = 176
$T3 = 184
?dtor$2@?0???$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$2
	lea	rcx, QWORD PTR $T5[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$2@?0???$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T5 = 32
_Loc$ = 32
_Loc$1$ = 64
$T12 = 64
$T1 = 80
$T6 = 160
$T2 = 160
this$ = 160
_Hint$ = 168
<_Vals_0>$ = 176
$T3 = 184
?dtor$1@?0???$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
	lea	rcx, QWORD PTR $T5[rdx]
	jmp	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
?dtor$1@?0???$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T5 = 32
_Loc$ = 32
_Loc$1$ = 64
$T12 = 64
$T1 = 80
$T6 = 160
$T2 = 160
this$ = 160
_Hint$ = 168
<_Vals_0>$ = 176
$T3 = 184
?dtor$3@?0???$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$3
	mov	rcx, QWORD PTR $T6[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$3@?0???$_Emplace_hint@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@QEAU21@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$forward@U?$less@VCZString@Value@Json@@@std@@@std@@YA$$QEAU?$less@VCZString@Value@Json@@@0@AEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@U?$less@VCZString@Value@Json@@@std@@@std@@YA$$QEAU?$less@VCZString@Value@Json@@@0@AEAU10@@Z PROC ; std::forward<std::less<Json::Value::CZString> >, COMDAT

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1428 : }

	ret	0
??$forward@U?$less@VCZString@Value@Json@@@std@@@std@@YA$$QEAU?$less@VCZString@Value@Json@@@0@AEAU10@@Z ENDP ; std::forward<std::less<Json::Value::CZString> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QEAU_One_then_variadic_args_t@0@AEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QEAU_One_then_variadic_args_t@0@AEAU10@@Z PROC ; std::forward<std::_One_then_variadic_args_t>, COMDAT

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1428 : }

	ret	0
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QEAU_One_then_variadic_args_t@0@AEAU10@@Z ENDP ; std::forward<std::_One_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z
_TEXT	SEGMENT
_Newnode$7 = 32
this$ = 112
$T1 = 120
_Newroot$ = 120
_Rootnode$ = 120
_Wherenode$ = 128
_Movefl$ = 136
??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>, COMDAT

; 1758 :     _Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode, _Moveit _Movefl) {

$LN54:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	movzx	ebx, r9b
	mov	rsi, rdx
	mov	r15, rcx

; 1759 :         // copy entire subtree, recursively
; 1760 :         const auto _Scary = _Get_scary();

	mov	r12, QWORD PTR [rcx]

; 1761 :         _Nodeptr _Newroot = _Scary->_Myhead; // point at nil node
; 1762 : 
; 1763 :         if (!_Rootnode->_Isnil) { // copy or move a node, then any subtrees

	cmp	BYTE PTR [rdx+25], 0
	jne	$LN8@Copy_nodes
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1036 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	QWORD PTR _Newnode$7[rsp], rcx

; 1043 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	xor	edi, edi
	mov	QWORD PTR _Newnode$7[rsp+8], rdi

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	lea	ecx, QWORD PTR [rdi+1]
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	r14, rax
	mov	QWORD PTR _Newnode$7[rsp+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 358  :         allocator_traits<_Alloc>::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _STD forward<_Valty>(_Val)...);

	lea	rdx, QWORD PTR [rax+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	lea	ecx, QWORD PTR [rdi+40]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	r13, rax
	mov	QWORD PTR $T1[rsp], rax
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rsi+40], edi
	je	SHORT $LN51@Copy_nodes
	cmp	QWORD PTR [rsi+32], rdi
	je	SHORT $LN51@Copy_nodes
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rsi+32]
	call	QWORD PTR [rax+8]
	jmp	SHORT $LN32@Copy_nodes
$LN51@Copy_nodes:
	mov	rax, QWORD PTR [rsi+32]
$LN32@Copy_nodes:
	mov	QWORD PTR [r13], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	mov	eax, DWORD PTR [rsi+40]
	cmp	QWORD PTR [rsi+32], rdi
	je	SHORT $LN33@Copy_nodes
	test	eax, eax
	setne	dil
	jmp	SHORT $LN34@Copy_nodes
$LN33@Copy_nodes:
	mov	edi, eax
$LN34@Copy_nodes:
	mov	DWORD PTR [r13+8], edi

; 1719 :       }

	lea	rdx, QWORD PTR [rsi+48]
	lea	rcx, QWORD PTR [r13+16]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, r14
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], r12
	lea	rdx, QWORD PTR [r14+8]
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], r12
	lea	rdx, QWORD PTR [r14+16]
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], r12
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 362  :         _Newnode._Ptr->_Color = _Red;

	mov	WORD PTR [r14+24], 0

; 1764 :             typename is_same<key_type, value_type>::type _Is_set;
; 1765 :             _Nodeptr _Pnode = _Copy_or_move(_Rootnode->_Myval, _Movefl, _Is_set);
; 1766 :             _Pnode->_Parent = _Wherenode;

	mov	rax, QWORD PTR _Wherenode$[rsp]
	mov	QWORD PTR [r14+8], rax

; 1767 :             _Pnode->_Color  = _Rootnode->_Color;

	movzx	eax, BYTE PTR [rsi+24]
	mov	BYTE PTR [r14+24], al

; 1768 :             if (_Newroot->_Isnil) {

	cmp	BYTE PTR [r12+25], 0
	cmovne	r12, r14
	mov	QWORD PTR _Newroot$[rsp], r12

; 1769 :                 _Newroot = _Pnode; // memorize new root
; 1770 :             }
; 1771 : 
; 1772 :             _TRY_BEGIN
; 1773 :             _Pnode->_Left  = _Copy_nodes(_Rootnode->_Left, _Pnode, _Movefl);

	movzx	r9d, bl
	mov	r8, r14
	mov	rdx, QWORD PTR [rsi]
	mov	rcx, r15
	call	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
	mov	QWORD PTR [r14], rax

; 1774 :             _Pnode->_Right = _Copy_nodes(_Rootnode->_Right, _Pnode, _Movefl);

	movzx	r9d, bl
	mov	r8, r14
	mov	rdx, QWORD PTR [rsi+16]
	mov	rcx, r15
	call	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
	mov	QWORD PTR [r14+16], rax
$LN8@Copy_nodes:

; 1775 :             _CATCH_ALL
; 1776 :             _Scary->_Erase_tree_and_orphan(_Getal(), _Newroot); // subtree copy failed, bail out
; 1777 :             _RERAISE;
; 1778 :             _CATCH_END
; 1779 :         }
; 1780 : 
; 1781 :         return _Newroot; // return newly constructed tree

	mov	rax, r12

; 1782 :     }

	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN52@Copy_nodes:
??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Newnode$7 = 32
this$ = 112
$T1 = 120
_Newroot$ = 120
_Rootnode$ = 120
_Wherenode$ = 128
_Movefl$ = 136
?dtor$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::dtor$0
	lea	rcx, QWORD PTR _Newnode$7[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::dtor$0
_Newnode$7 = 32
this$ = 112
$T1 = 120
_Newroot$ = 120
_Rootnode$ = 120
_Wherenode$ = 128
_Movefl$ = 136
?dtor$1@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::dtor$1
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::dtor$1
_Newnode$7 = 32
this$ = 112
$T1 = 120
_Newroot$ = 120
_Rootnode$ = 120
_Wherenode$ = 128
_Movefl$ = 136
?catch$3@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::catch$3

; 1775 :             _CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z$0:

; 1775 :             _CATCH_ALL
; 1776 :             _Scary->_Erase_tree_and_orphan(_Getal(), _Newroot); // subtree copy failed, bail out

	mov	rcx, QWORD PTR this$[rbp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal
	mov	rdx, rax
	mov	r8, QWORD PTR _Newroot$[rbp]
	call	??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >

; 1775 :             _CATCH_ALL
; 1776 :             _Scary->_Erase_tree_and_orphan(_Getal(), _Newroot); // subtree copy failed, bail out
; 1777 :             _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$3@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::catch$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Newnode$7 = 32
this$ = 112
$T1 = 120
_Newroot$ = 120
_Rootnode$ = 120
_Wherenode$ = 128
_Movefl$ = 136
?dtor$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::dtor$0
	lea	rcx, QWORD PTR _Newnode$7[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$0@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Newnode$7 = 32
this$ = 112
$T1 = 120
_Newroot$ = 120
_Rootnode$ = 120
_Wherenode$ = 128
_Movefl$ = 136
?dtor$1@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::dtor$1
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Newnode$7 = 32
this$ = 112
$T1 = 120
_Newroot$ = 120
_Rootnode$ = 120
_Wherenode$ = 128
_Movefl$ = 136
?catch$3@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::catch$3

; 1775 :             _CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z$0:

; 1776 :             _Scary->_Erase_tree_and_orphan(_Getal(), _Newroot); // subtree copy failed, bail out

	mov	rcx, QWORD PTR this$[rbp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal
	mov	rdx, rax
	mov	r8, QWORD PTR _Newroot$[rbp]
	call	??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >

; 1777 :             _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$3@?0???$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@PEAU21@0U_Copy_tag@01@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>'::`1'::catch$3
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@@Z
_TEXT	SEGMENT
_Obj$dead$ = 8
??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT

; 242  :     _Obj.~_Ty();
; 243  : }

	ret	0
??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xstddef
;	COMDAT ??$addressof@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAPEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAPEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT

; 275  :     return __builtin_addressof(_Val);

	mov	rax, rcx

; 276  : }

	ret	0
??$addressof@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAPEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\type_traits
;	COMDAT ??$forward@AEBQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAAEBQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEBQEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAAEBQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEBQEAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * const &>, COMDAT

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1428 : }

	ret	0
??$forward@AEBQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@YAAEBQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEBQEAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 817  :     ~_Tree_temp_node() {

$LN27:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx

; 818  :         if (this->_Ptr) {

	mov	rbx, QWORD PTR [rcx+8]
	test	rbx, rbx
	je	SHORT $LN20@Tree_temp_
	lea	rcx, QWORD PTR [rbx+48]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rbx+32], 0
	je	SHORT $LN13@Tree_temp_
	cmp	DWORD PTR [rbx+40], 1
	jne	SHORT $LN13@Tree_temp_

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx+32]
	call	QWORD PTR [rax+16]
	npad	1
$LN13@Tree_temp_:

; 200  : {

	mov	rbx, QWORD PTR [rdi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1048 :         if (_Ptr) {

	test	rbx, rbx
	je	SHORT $LN20@Tree_temp_

; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, rbx
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
$LN20@Tree_temp_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 824  :     }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Release, COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility

; 570  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR [rcx+8]

; 571  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	QWORD PTR [rcx+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1040 :     }

	ret	0
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?_Extract@?$_In_place_key_extract_map@VCZString@Value@Json@@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@SAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z
_TEXT	SEGMENT
_Val$ = 8
?_Extract@?$_In_place_key_extract_map@VCZString@Value@Json@@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@SAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z PROC ; std::_In_place_key_extract_map<Json::Value::CZString,std::pair<Json::Value::CZString const ,Json::Value> >::_Extract, COMDAT

; 1962 :         return _Val.first;

	mov	rax, rcx

; 1963 :     }

	ret	0
?_Extract@?$_In_place_key_extract_map@VCZString@Value@Json@@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@SAAEBVCZString@Value@Json@@AEBU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z ENDP ; std::_In_place_key_extract_map<Json::Value::CZString,std::pair<Json::Value::CZString const ,Json::Value> >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU32@@Z
_TEXT	SEGMENT
this$ = 8
_Loc$ = 16
_Newnode$ = 24
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Insert_node, COMDAT

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

$LN57:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 645  :         ++_Mysize;

	inc	QWORD PTR [rcx+8]
	mov	r11, r8

; 646  :         const auto _Head  = _Myhead;

	mov	rdi, QWORD PTR [rcx]
	mov	rbx, rcx

; 647  :         _Newnode->_Parent = _Loc._Parent;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [r8+8], rax

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

	cmp	rax, rdi
	jne	SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

	mov	QWORD PTR [rdi], r8

; 710  :         return _Newnode;
; 711  :     }

	mov	rax, r8
	mov	QWORD PTR [rdi+8], r8
	mov	QWORD PTR [rdi+16], r8
	mov	BYTE PTR [r8+24], 1
	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
$LN5@Insert_nod:

; 650  :             _Head->_Parent   = _Newnode;
; 651  :             _Head->_Right    = _Newnode;
; 652  :             _Newnode->_Color = _Black; // the root is black
; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

	cmp	DWORD PTR [rdx+8], 0
	jne	SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

	mov	QWORD PTR [rax+16], r11

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

	mov	QWORD PTR [rdi+16], r11

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

	jmp	SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

	mov	QWORD PTR [rax], r11

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

	cmp	rax, QWORD PTR [rdi]
	jne	SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

	mov	QWORD PTR [rdi], r11
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	rax, QWORD PTR [r8+8]
	mov	rdx, r11
	cmp	BYTE PTR [rax+24], 0
	jne	$LN3@Insert_nod
	npad	13
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

	mov	rcx, QWORD PTR [rdx+8]
	lea	r9, QWORD PTR [rdx+8]
	mov	r8, QWORD PTR [rcx+8]
	lea	r10, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [r8]
	cmp	rcx, rax
	jne	$LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

	mov	rax, QWORD PTR [r8+16]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	cmp	BYTE PTR [rax+24], 0
	je	$LN54@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

	mov	r8, QWORD PTR [rcx+16]
	cmp	rdx, r8
	jne	SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	rax, QWORD PTR [r8]

; 681  :                         _Pnode = _Pnode->_Parent;

	mov	rdx, rcx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	QWORD PTR [rcx+16], rax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

	mov	rax, QWORD PTR [r8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rcx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [r10]
	mov	QWORD PTR [r8+8], rax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

	mov	rax, QWORD PTR [rbx]
	cmp	rcx, QWORD PTR [rax+8]
	jne	SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], r8

; 477  :         _Wherenode->_Parent = _Pnode;

	mov	r9, r10
	mov	QWORD PTR [r8], rcx
	mov	QWORD PTR [r10], r8
	jmp	SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	rax, QWORD PTR [r10]
	cmp	rcx, QWORD PTR [rax]
	jne	SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], r8

; 477  :         _Wherenode->_Parent = _Pnode;

	mov	r9, r10
	mov	QWORD PTR [r8], rcx
	mov	QWORD PTR [r10], r8
	jmp	SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], r8

; 477  :         _Wherenode->_Parent = _Pnode;

	mov	r9, r10
	mov	QWORD PTR [r8], rcx
	mov	QWORD PTR [r10], r8
	jmp	SHORT $LN49@Insert_nod
$LN51@Insert_nod:
	mov	r8, rcx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	BYTE PTR [r8+24], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	rax, QWORD PTR [r9]
	mov	rcx, QWORD PTR [rax+8]
	mov	BYTE PTR [rcx+24], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

	mov	rax, QWORD PTR [r9]
	mov	rcx, QWORD PTR [rax+8]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	r8, QWORD PTR [rcx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

	mov	rax, QWORD PTR [r8+16]
	mov	QWORD PTR [rcx], rax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

	mov	rax, QWORD PTR [r8+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rcx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [r8+8], rax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

	mov	rax, QWORD PTR [rbx]
	cmp	rcx, QWORD PTR [rax+8]
	jne	SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], r8

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	QWORD PTR [r8+16], rcx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

	jmp	$LN53@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	rax, QWORD PTR [rcx+8]
	cmp	rcx, QWORD PTR [rax+16]
	jne	SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], r8

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	QWORD PTR [r8+16], rcx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

	jmp	$LN53@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], r8

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	QWORD PTR [r8+16], rcx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

	jmp	$LN53@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	cmp	BYTE PTR [rax+24], 0
	jne	SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	BYTE PTR [rcx+24], 1
	mov	BYTE PTR [rax+24], 1
	mov	rax, QWORD PTR [r9]
	mov	rcx, QWORD PTR [rax+8]
	mov	BYTE PTR [rcx+24], 0
	mov	rax, QWORD PTR [r9]
	mov	rdx, QWORD PTR [rax+8]
	jmp	$LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

	mov	rax, QWORD PTR [rcx]
	cmp	rdx, rax
	jne	SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

	mov	rdx, rcx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	rcx, rax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR [rdx], rax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

	mov	rax, QWORD PTR [rcx+16]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rdx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [r10]
	mov	QWORD PTR [rcx+8], rax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

	mov	rax, QWORD PTR [rbx]
	cmp	rdx, QWORD PTR [rax+8]
	jne	SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], rcx
	jmp	SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	rax, QWORD PTR [r10]
	cmp	rdx, QWORD PTR [rax+16]
	jne	SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], rcx

; 494  :         } else {

	jmp	SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], rcx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	QWORD PTR [rcx+16], rdx

; 499  :         _Wherenode->_Parent = _Pnode;

	mov	r9, r10
	mov	QWORD PTR [r10], rcx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	BYTE PTR [rcx+24], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	rax, QWORD PTR [r9]
	mov	rcx, QWORD PTR [rax+8]
	mov	BYTE PTR [rcx+24], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

	mov	rax, QWORD PTR [r9]
	mov	rcx, QWORD PTR [rax+8]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	r8, QWORD PTR [rcx+16]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx+16], rax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

	mov	rax, QWORD PTR [r8]
	cmp	BYTE PTR [rax+25], 0
	jne	SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	QWORD PTR [rax+8], rcx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [r8+8], rax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

	mov	rax, QWORD PTR [rbx]
	cmp	rcx, QWORD PTR [rax+8]
	jne	SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

	mov	QWORD PTR [rax+8], r8
	jmp	SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	rax, QWORD PTR [rcx+8]
	cmp	rcx, QWORD PTR [rax]
	jne	SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	QWORD PTR [rax], r8

; 472  :         } else {

	jmp	SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	QWORD PTR [rax+16], r8
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

	mov	QWORD PTR [r8], rcx
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	QWORD PTR [rcx+8], r8
$LN46@Insert_nod:
	mov	rax, QWORD PTR [rdx+8]
	cmp	BYTE PTR [rax+24], 0
	je	$LL2@Insert_nod
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

	mov	rax, QWORD PTR [rdi+8]

; 710  :         return _Newnode;
; 711  :     }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	mov	BYTE PTR [rax+24], 1
	mov	rax, r11
	ret	0
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@QEAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ
_TEXT	SEGMENT
$T1 = 48
this$ = 48
$T2 = 56
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Check_grow_by_1, COMDAT

; 1721 :     void _Check_grow_by_1() {

$LN10:
	push	rbx
	sub	rsp, 32					; 00000020H

; 1309 :         return _Min_value(

	mov	rax, 256204778801521550			; 038e38e38e38e38eH

; 1721 :     void _Check_grow_by_1() {

	mov	rbx, rcx

; 1309 :         return _Min_value(

	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	lea	rdx, QWORD PTR $T1[rsp]
	mov	QWORD PTR $T2[rsp], rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z	; std::_Min_value<unsigned __int64>
	mov	rdx, QWORD PTR [rax]

; 1722 :         if (max_size() == _Get_scary()->_Mysize) {

	cmp	rdx, QWORD PTR [rbx+8]
	je	SHORT $LN8@Check_grow

; 1724 :         }
; 1725 :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN8@Check_grow:

; 1723 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
	int	3
$LN6@Check_grow:
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAXXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Check_grow_by_1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 1048 :         if (_Ptr) {

	mov	rcx, QWORD PTR [rcx+8]
	test	rcx, rcx
	je	SHORT $LN4@Tree_temp_

; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	edx, 72					; 00000048H
	jmp	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
$LN4@Tree_temp_:
	ret	0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 1048 :         if (_Ptr) {

	mov	rcx, QWORD PTR [rcx+8]
	test	rcx, rcx
	je	SHORT $LN2@Alloc_cons

; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	edx, 72					; 00000048H
	jmp	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
$LN2@Alloc_cons:

; 1049 :             _Al.deallocate(_Ptr, 1);
; 1050 :         }
; 1051 :     }

	ret	0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 48
$T1 = 48
$T2 = 56
?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::max_size, COMDAT

; 1308 :     _NODISCARD size_type max_size() const noexcept {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 1309 :         return _Min_value(

	mov	rax, 256204778801521550			; 038e38e38e38e38eH
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	lea	rdx, QWORD PTR $T1[rsp]
	mov	QWORD PTR $T2[rsp], rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z	; std::_Min_value<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1310 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1311 :     }

	add	rsp, 40					; 00000028H
	ret	0
?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QEBA_KXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::max_size, COMDAT

; 680  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 256204778801521550			; 038e38e38e38e38eH

; 681  :     }

	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_Count$dead$ = 24
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::deallocate, COMDAT

; 778  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

	mov	rcx, rdx

; 779  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	edx, 72					; 00000048H
	jmp	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@2@_K@Z ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Find_hint@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA?AU?$_Tree_find_hint_result@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z
_TEXT	SEGMENT
_Loc$13 = 32
$T8 = 96
$T4 = 96
this$ = 96
__$ReturnUdt$ = 104
_Hint$ = 112
_Keyval$ = 120
??$_Find_hint@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA?AU?$_Tree_find_hint_result@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Find_hint<Json::Value::CZString>, COMDAT

; 1584 :     _Tree_find_hint_result<_Nodeptr> _Find_hint(const _Nodeptr _Hint, const _Keyty& _Keyval) const {

$LN150:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H

; 1585 :         const auto& _Comp = _Getcomp();
; 1586 :         const auto _Head  = _Get_scary()->_Myhead;

	mov	r10, QWORD PTR [rcx]

; 1587 :         if
; 1588 :             _CONSTEXPR_IF(_Multi) { // insert even if duplicate
; 1589 :                 if (_Hint->_Isnil) {
; 1590 :                     // insert at end if greater than or equal to last element
; 1591 :                     if (_Head->_Parent->_Isnil
; 1592 :                         || !_DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Head->_Right->_Myval))) {
; 1593 :                         return {{_Head->_Right, _Tree_child::_Right}, false};
; 1594 :                     }
; 1595 : 
; 1596 :                     // _Hint is end(); it must be closer to the end of equivalents
; 1597 :                     return {_Find_upper_bound(_Keyval)._Location, false};
; 1598 :                 }
; 1599 : 
; 1600 :                 if (_Hint == _Head->_Left) {
; 1601 :                     // insert at beginning if less than or equal to first element
; 1602 :                     if (!_DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Hint->_Myval), _Keyval)) {
; 1603 :                         return {{_Hint, _Tree_child::_Left}, false};
; 1604 :                     }
; 1605 : 
; 1606 :                     // _Hint is begin(); it must be closer to the beginning of equivalents
; 1607 :                     return {_Find_lower_bound(_Keyval)._Location, false};
; 1608 :                 }
; 1609 : 
; 1610 :                 if (!_DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Hint->_Myval), _Keyval)) {
; 1611 :                     // _Val <= *_Hint
; 1612 :                     const auto _Prev = (--(_Unchecked_const_iterator(_Hint, nullptr)))._Ptr;
; 1613 :                     if (!_DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Prev->_Myval))) {
; 1614 :                         // _Val <= *_Hint and _Val >= *prev(_Hint); insert here
; 1615 :                         if (_Prev->_Right->_Isnil) {
; 1616 :                             return {{_Prev, _Tree_child::_Right}, false};
; 1617 :                         } else {
; 1618 :                             return {{_Hint, _Tree_child::_Left}, false};
; 1619 :                         }
; 1620 :                     }
; 1621 : 
; 1622 :                     // _Val goes before *_Hint; _Hint must be closer to the end of equivalents
; 1623 :                     return {_Find_upper_bound(_Keyval)._Location, false};
; 1624 :                 }
; 1625 : 
; 1626 :                 // _Val goes after *_Hint; _Hint must be closer to the beginning of equivalents
; 1627 :                 return {_Find_lower_bound(_Keyval)._Location, false};
; 1628 :             }
; 1629 :         else { // insert only if unique
; 1630 :             if (_Hint->_Isnil) { // insert at end if after last element

	xor	edi, edi
	mov	r14, r9
	mov	rsi, r8
	mov	rbx, rdx
	mov	r15, rcx
	cmp	BYTE PTR [r8+25], dil
	je	SHORT $LN2@Find_hint

; 1632 :                 if (_Head->_Parent->_Isnil || _DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Head->_Right->_Myval), _Keyval)) {

	mov	rax, QWORD PTR [r10+8]
	cmp	BYTE PTR [rax+25], dil
	jne	SHORT $LN119@Find_hint
	mov	rdx, QWORD PTR [r10+16]
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rdx+32]
	test	rax, rax
	je	SHORT $LN24@Find_hint

; 221  :    return *this;

	mov	rdx, QWORD PTR [r9]
	sub	rdx, rax
$LL141@Find_hint:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN143@Find_hint
	inc	rax
	test	cl, cl
	jne	SHORT $LL141@Find_hint
	mov	eax, edi
	shr	eax, 31
	jmp	SHORT $LN23@Find_hint
$LN143@Find_hint:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN23@Find_hint
$LN24@Find_hint:

; 222  : }

	mov	eax, DWORD PTR [r9+8]
	cmp	DWORD PTR [rdx+40], eax
	setl	al
$LN23@Find_hint:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1632 :                 if (_Head->_Parent->_Isnil || _DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Head->_Right->_Myval), _Keyval)) {

	test	al, al
	je	$LN16@Find_hint
$LN119@Find_hint:

; 1633 :                     return {{_Head->_Right, _Tree_child::_Right}, false};

	mov	rax, QWORD PTR [r10+16]
	mov	QWORD PTR [rbx], rax
	mov	BYTE PTR [rbx+16], dil
	jmp	$LN146@Find_hint
$LN2@Find_hint:

; 1634 :                 }
; 1635 :             } else if (_Hint == _Head->_Left) {

	mov	rcx, QWORD PTR [r9]
	cmp	rsi, QWORD PTR [r10]
	jne	SHORT $LN6@Find_hint
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	test	rcx, rcx
	je	SHORT $LN29@Find_hint

; 221  :    return *this;

	mov	rdx, QWORD PTR [r8+32]
	sub	rdx, rcx
	npad	3
$LL138@Find_hint:
	movzx	eax, BYTE PTR [rcx]
	cmp	al, BYTE PTR [rcx+rdx]
	jne	SHORT $LN140@Find_hint
	inc	rcx
	test	al, al
	jne	SHORT $LL138@Find_hint
	mov	eax, edi
	shr	eax, 31
	jmp	SHORT $LN28@Find_hint
$LN140@Find_hint:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN28@Find_hint
$LN29@Find_hint:

; 222  : }

	mov	eax, DWORD PTR [r8+40]
	cmp	DWORD PTR [r9+8], eax
	setl	al
$LN28@Find_hint:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1637 :                 if (_DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Hint->_Myval))) {

	test	al, al
	je	$LN16@Find_hint

; 1638 :                     return {{_Hint, _Tree_child::_Left}, false};

	mov	QWORD PTR [rbx], rsi
	mov	DWORD PTR [rbx+8], 1
	mov	BYTE PTR [rbx+16], dil
	jmp	$LN147@Find_hint
$LN6@Find_hint:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	test	rcx, rcx
	je	SHORT $LN34@Find_hint

; 221  :    return *this;

	mov	r8, QWORD PTR [r8+32]
	mov	rax, rcx
	sub	r8, rcx
$LL135@Find_hint:
	movzx	edx, BYTE PTR [rax]
	cmp	dl, BYTE PTR [rax+r8]
	jne	SHORT $LN137@Find_hint
	inc	rax
	test	dl, dl
	jne	SHORT $LL135@Find_hint
	mov	eax, edi
	shr	eax, 31
	jmp	SHORT $LN33@Find_hint
$LN137@Find_hint:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN33@Find_hint
$LN34@Find_hint:

; 222  : }

	mov	eax, DWORD PTR [r8+40]
	cmp	DWORD PTR [r9+8], eax
	setl	al
$LN33@Find_hint:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1640 :             } else if (_DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Hint->_Myval))) {

	test	al, al
	je	$LN9@Find_hint

; 40   :         this->_Adopt(_Plist);

	xor	edx, edx
	mov	QWORD PTR $T4[rsp], rsi
	lea	rcx, QWORD PTR $T4[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 73   :         if (_Ptr->_Isnil) {

	mov	rdx, QWORD PTR $T4[rsp]
	cmp	BYTE PTR [rdx+25], dil
	je	SHORT $LN41@Find_hint

; 74   :             _Ptr = _Ptr->_Right; // end() ==> rightmost

	mov	rdx, QWORD PTR [rdx+16]
	jmp	SHORT $LN49@Find_hint
$LN41@Find_hint:

; 75   :         } else if (_Ptr->_Left->_Isnil) { // climb looking for left subtree

	mov	rax, QWORD PTR [rdx]
	cmp	BYTE PTR [rax+25], dil
	je	SHORT $LN43@Find_hint

; 76   :             _Nodeptr _Pnode;
; 77   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left) {

	mov	rax, QWORD PTR [rdx+8]
	cmp	BYTE PTR [rax+25], dil
	jne	SHORT $LN144@Find_hint
	npad	2
$LL39@Find_hint:
	cmp	rdx, QWORD PTR [rax]
	jne	SHORT $LN144@Find_hint

; 78   :                 _Ptr = _Pnode; // ==> parent while left subtree

	mov	QWORD PTR $T4[rsp], rax
	mov	rdx, rax
	mov	rax, QWORD PTR [rax+8]
	cmp	BYTE PTR [rax+25], dil
	je	SHORT $LL39@Find_hint
$LN144@Find_hint:

; 79   :             }
; 80   : 
; 81   :             if (!_Ptr->_Isnil) { // decrement non-begin()

	cmp	BYTE PTR [rdx+25], dil
	jne	SHORT $LN44@Find_hint

; 82   :                 _Ptr = _Pnode; // ==> parent if not head

	mov	rdx, rax
	mov	QWORD PTR $T4[rsp], rax

; 83   :             }
; 84   :         } else {

	jmp	SHORT $LN44@Find_hint
$LN43@Find_hint:

; 85   :             _Ptr = _Mytree::_Max(_Ptr->_Left); // ==> largest of left subtree

	mov	rdx, rax

; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], dil
	jne	SHORT $LN49@Find_hint
	npad	12
$LL48@Find_hint:

; 444  :             _Pnode = _Pnode->_Right;

	mov	rdx, rax
	mov	rax, QWORD PTR [rax+16]
	cmp	BYTE PTR [rax+25], dil
	je	SHORT $LL48@Find_hint
$LN49@Find_hint:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	QWORD PTR $T4[rsp], rdx
$LN44@Find_hint:
	mov	rax, QWORD PTR [rdx+32]
	test	rax, rax
	je	SHORT $LN54@Find_hint

; 221  :    return *this;

	mov	r8, QWORD PTR [r14]
	sub	r8, rax
$LL132@Find_hint:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+r8]
	jne	SHORT $LN134@Find_hint
	inc	rax
	test	cl, cl
	jne	SHORT $LL132@Find_hint
	mov	eax, edi
	shr	eax, 31
	jmp	SHORT $LN53@Find_hint
$LN134@Find_hint:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN53@Find_hint
$LN54@Find_hint:

; 222  : }

	mov	eax, DWORD PTR [r14+8]
	cmp	DWORD PTR [rdx+40], eax
	setl	al
$LN53@Find_hint:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1643 :                 if (_DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Prev->_Myval), _Keyval)) {

	test	al, al
	je	$LN16@Find_hint

; 1644 :                     // _Val < *_Hint and _Val > *prev(_Hint); insert here
; 1645 :                     if (_Prev->_Right->_Isnil) {

	mov	rax, QWORD PTR [rdx+16]
	movzx	ecx, BYTE PTR [rax+25]
	mov	rax, rbx
	mov	BYTE PTR [rbx+16], dil
	test	cl, cl
	je	SHORT $LN12@Find_hint

; 1646 :                         return {{_Prev, _Tree_child::_Right}, false};

	mov	QWORD PTR [rbx], rdx
	mov	DWORD PTR [rbx+8], edi
	jmp	$LN1@Find_hint
$LN12@Find_hint:

; 1647 :                     } else {
; 1648 :                         return {{_Hint, _Tree_child::_Left}, false};

	mov	QWORD PTR [rbx], rsi
	mov	DWORD PTR [rbx+8], 1
	jmp	$LN1@Find_hint
$LN9@Find_hint:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rsi+32]
	test	rax, rax
	je	SHORT $LN59@Find_hint

; 221  :    return *this;

	sub	rcx, rax
	npad	3
$LL129@Find_hint:
	movzx	edx, BYTE PTR [rax]
	cmp	dl, BYTE PTR [rax+rcx]
	jne	SHORT $LN131@Find_hint
	inc	rax
	test	dl, dl
	jne	SHORT $LL129@Find_hint
	mov	eax, edi
	shr	eax, 31
	jmp	SHORT $LN58@Find_hint
$LN131@Find_hint:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN58@Find_hint
$LN59@Find_hint:

; 222  : }

	mov	eax, DWORD PTR [r9+8]
	cmp	DWORD PTR [rsi+40], eax
	setl	al
$LN58@Find_hint:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1651 :             } else if (_DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Hint->_Myval), _Keyval)) {

	test	al, al
	je	$LN14@Find_hint

; 40   :         this->_Adopt(_Plist);

	xor	edx, edx
	mov	QWORD PTR $T8[rsp], rsi
	lea	rcx, QWORD PTR $T8[rsp]
	call	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

	mov	rax, QWORD PTR $T8[rsp]
	mov	rdx, QWORD PTR [rax+16]
	cmp	BYTE PTR [rdx+25], dil
	je	SHORT $LN66@Find_hint

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

	mov	rdx, QWORD PTR [rax+8]
	cmp	BYTE PTR [rdx+25], dil
	jne	SHORT $LN71@Find_hint
	npad	4
$LL64@Find_hint:
	cmp	rax, QWORD PTR [rdx+16]
	jne	SHORT $LN71@Find_hint

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

	mov	QWORD PTR $T8[rsp], rdx
	mov	rax, rdx
	mov	rdx, QWORD PTR [rdx+8]
	cmp	BYTE PTR [rdx+25], dil
	je	SHORT $LL64@Find_hint

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())
; 59   :         } else {

	jmp	SHORT $LN71@Find_hint
$LN66@Find_hint:

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	rcx, QWORD PTR [rdx]
	cmp	BYTE PTR [rcx+25], dil
	jne	SHORT $LN71@Find_hint
	npad	13
$LL70@Find_hint:
	mov	rax, QWORD PTR [rcx]

; 452  :             _Pnode = _Pnode->_Left;

	mov	rdx, rcx
	mov	rcx, rax
	cmp	BYTE PTR [rax+25], dil
	je	SHORT $LL70@Find_hint
$LN71@Find_hint:

; 1652 :                 // _Val > *_Hint
; 1653 :                 const auto _Next = (++(_Unchecked_const_iterator(_Hint, nullptr)))._Ptr;

	mov	QWORD PTR $T8[rsp], rdx

; 1654 :                 if (_Next->_Isnil || _DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Next->_Myval))) {

	cmp	BYTE PTR [rdx+25], dil
	jne	$LN17@Find_hint
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r14]
	test	rax, rax
	je	SHORT $LN76@Find_hint

; 221  :    return *this;

	mov	r8, QWORD PTR [rdx+32]
	sub	r8, rax
	npad	3
$LL126@Find_hint:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+r8]
	jne	SHORT $LN128@Find_hint
	inc	rax
	test	cl, cl
	jne	SHORT $LL126@Find_hint
	mov	eax, edi
	shr	eax, 31
	jmp	SHORT $LN75@Find_hint
$LN128@Find_hint:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN75@Find_hint
$LN76@Find_hint:

; 222  : }

	mov	eax, DWORD PTR [rdx+40]
	cmp	DWORD PTR [r14+8], eax
	setl	al
$LN75@Find_hint:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1654 :                 if (_Next->_Isnil || _DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Next->_Myval))) {

	test	al, al
	jne	$LN17@Find_hint
$LN16@Find_hint:

; 1704 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	r9, QWORD PTR [r15]
	mov	DWORD PTR _Loc$13[rsp+8], edi
	mov	rdx, QWORD PTR [r9+8]
	mov	QWORD PTR _Loc$13[rsp], rdx

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [rdx+25], 0
	jne	SHORT $LN80@Find_hint
	npad	7
$LL79@Find_hint:
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [rdx+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1707 :             _Result._Location._Parent = _Trynode;

	mov	QWORD PTR _Loc$13[rsp], rdx
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	test	rax, rax
	je	SHORT $LN87@Find_hint

; 221  :    return *this;

	mov	r8, QWORD PTR [r14]
	sub	r8, rax
$LL123@Find_hint:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+r8]
	jne	SHORT $LN125@Find_hint
	inc	rax
	test	cl, cl
	jne	SHORT $LL123@Find_hint
	mov	eax, edi
	shr	eax, 31
	jmp	SHORT $LN86@Find_hint
$LN125@Find_hint:
	sbb	eax, eax
	or	eax, 1
	shr	eax, 31
	jmp	SHORT $LN86@Find_hint
$LN87@Find_hint:

; 222  : }

	mov	eax, DWORD PTR [r14+8]
	cmp	DWORD PTR [rdx+40], eax
	setl	al
$LN86@Find_hint:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1708 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	test	al, al
	je	SHORT $LN81@Find_hint

; 1709 :                 _Result._Location._Child = _Tree_child::_Right;
; 1710 :                 _Trynode                 = _Trynode->_Right;

	mov	rdx, QWORD PTR [rdx+16]
	mov	DWORD PTR _Loc$13[rsp+8], edi

; 1711 :             } else {

	jmp	SHORT $LN82@Find_hint
$LN81@Find_hint:

; 1712 :                 _Result._Location._Child = _Tree_child::_Left;
; 1713 :                 _Result._Bound           = _Trynode;

	mov	r9, rdx
	mov	DWORD PTR _Loc$13[rsp+8], 1

; 1714 :                 _Trynode                 = _Trynode->_Left;

	mov	rdx, QWORD PTR [rdx]
$LN82@Find_hint:

; 1705 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1706 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [rdx+25], 0
	je	SHORT $LL79@Find_hint
$LN80@Find_hint:

; 1698 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	cmp	BYTE PTR [r9+25], 0
	jne	SHORT $LN91@Find_hint
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    swap( temp );

	mov	rax, QWORD PTR [r14]
	test	rax, rax
	je	SHORT $LN96@Find_hint

; 221  :    return *this;

	mov	rdx, QWORD PTR [r9+32]
	sub	rdx, rax
$LL120@Find_hint:
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, BYTE PTR [rax+rdx]
	jne	SHORT $LN122@Find_hint
	inc	rax
	test	cl, cl
	jne	SHORT $LL120@Find_hint
	shr	edi, 31
	jmp	SHORT $LN95@Find_hint
$LN122@Find_hint:
	sbb	edi, edi
	or	edi, 1
	shr	edi, 31
	jmp	SHORT $LN95@Find_hint
$LN96@Find_hint:

; 222  : }

	mov	eax, DWORD PTR [r9+40]
	cmp	DWORD PTR [r14+8], eax
	setl	dil
$LN95@Find_hint:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 1698 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	test	dil, dil
	jne	SHORT $LN91@Find_hint

; 1665 :             }
; 1666 : 
; 1667 :             const auto _Loc = _Find_lower_bound(_Keyval);
; 1668 :             if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
; 1669 :                 return {{_Loc._Bound, _Tree_child::_Unused}, true};

	mov	QWORD PTR [rbx], r9
	mov	DWORD PTR [rbx+8], 2
	mov	BYTE PTR [rbx+16], 1
	jmp	SHORT $LN147@Find_hint
$LN91@Find_hint:

; 1670 :             }
; 1671 : 
; 1672 :             return {_Loc._Location, false};

	movups	xmm0, XMMWORD PTR _Loc$13[rsp]
	mov	BYTE PTR [rbx+16], 0
	movups	XMMWORD PTR [rbx], xmm0
	jmp	SHORT $LN147@Find_hint
$LN17@Find_hint:

; 1655 :                     // _Val > *_Hint and _Val < *next(_Hint); insert here
; 1656 :                     if (_Hint->_Right->_Isnil) {

	mov	rax, QWORD PTR [rsi+16]
	movzx	ecx, BYTE PTR [rax+25]
	mov	rax, rbx
	mov	BYTE PTR [rbx+16], dil
	test	cl, cl
	je	SHORT $LN18@Find_hint

; 1657 :                         return {{_Hint, _Tree_child::_Right}, false};

	mov	QWORD PTR [rbx], rsi
	mov	DWORD PTR [rbx+8], edi
	jmp	SHORT $LN1@Find_hint
$LN18@Find_hint:

; 1658 :                     }
; 1659 : 
; 1660 :                     return {{_Next, _Tree_child::_Left}, false};

	mov	QWORD PTR [rbx], rdx
	mov	DWORD PTR [rbx+8], 1
	jmp	SHORT $LN1@Find_hint
$LN14@Find_hint:

; 1661 :                 }
; 1662 :             } else {
; 1663 :                 // _Val is equivalent to *_Hint; don't insert
; 1664 :                 return {{_Hint, _Tree_child::_Right}, true};

	mov	QWORD PTR [rbx], rsi
	mov	BYTE PTR [rbx+16], 1
$LN146@Find_hint:

; 1673 :         }
; 1674 :     }

	mov	DWORD PTR [rbx+8], edi
$LN147@Find_hint:
	mov	rax, rbx
$LN1@Find_hint:
	mov	rbx, QWORD PTR [rsp+104]
	mov	rsi, QWORD PTR [rsp+112]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
??$_Find_hint@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEBA?AU?$_Tree_find_hint_result@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEBVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Find_hint<Json::Value::CZString>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
this$ = 64
$T1 = 72
_Al_$ = 72
_Myhead$ = 80
<_Vals_0>$ = 88
??$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 805  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

$LN40:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rbx, r9
	mov	rbp, r8
	mov	rdi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1036 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	QWORD PTR [rcx], rdx

; 1043 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	xor	esi, esi
	mov	QWORD PTR [rcx+8], rsi

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	lea	ecx, QWORD PTR [rsi+1]
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 1044 :         _Ptr = _Al.allocate(1);

	mov	QWORD PTR [rdi+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

	lea	rdx, QWORD PTR [rax+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	lea	ecx, QWORD PTR [rsi+40]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	r14, rax
	mov	QWORD PTR $T1[rsp], rax
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	mov	rax, QWORD PTR [rbx]
	cmp	DWORD PTR [rbx+8], esi
	je	SHORT $LN22@Value
	test	rax, rax
	je	SHORT $LN22@Value
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+8]
$LN22@Value:
	mov	QWORD PTR [r14], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	mov	eax, DWORD PTR [rbx+8]
	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN23@Value
	test	eax, eax
	setne	sil
	jmp	SHORT $LN24@Value
$LN23@Value:
	mov	esi, eax
$LN24@Value:
	mov	DWORD PTR [r14+8], esi

; 1719 :       }

	lea	rdx, QWORD PTR [rbx+16]
	lea	rcx, QWORD PTR [r14+16]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, QWORD PTR [rdi+8]
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	mov	rdx, QWORD PTR [rdi+8]
	add	rdx, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 809  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	mov	rdx, QWORD PTR [rdi+8]
	add	rdx, 16
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 810  :         this->_Ptr->_Color = _Red;

	mov	rax, QWORD PTR [rdi+8]
	mov	BYTE PTR [rax+24], 0
	mov	rax, QWORD PTR [rdi+8]
	mov	BYTE PTR [rax+25], 0

; 811  :         this->_Ptr->_Isnil = false;
; 812  :     }

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
??$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 64
$T1 = 72
_Al_$ = 72
_Myhead$ = 80
<_Vals_0>$ = 88
?dtor$1@?0???$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$1@?0???$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
this$ = 64
$T1 = 72
_Al_$ = 72
_Myhead$ = 80
<_Vals_0>$ = 88
?dtor$0@?0???$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
?dtor$0@?0???$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
this$ = 64
$T1 = 72
_Al_$ = 72
_Myhead$ = 80
<_Vals_0>$ = 88
?dtor$2@?0???$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$2
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$2@?0???$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
this$ = 64
$T1 = 72
_Al_$ = 72
_Myhead$ = 80
<_Vals_0>$ = 88
?dtor$1@?0???$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$1@?0???$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
this$ = 64
$T1 = 72
_Al_$ = 72
_Myhead$ = 80
<_Vals_0>$ = 88
?dtor$0@?0???$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ
?dtor$0@?0???$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
this$ = 64
$T1 = 72
_Al_$ = 72
_Myhead$ = 80
<_Vals_0>$ = 88
?dtor$2@?0???$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$2
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$2@?0???$?0AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z
_TEXT	SEGMENT
_Newnode$7 = 32
$T1 = 80
this$ = 80
_Val$ = 88
__formal$dead$ = 96
__formal$dead$ = 104
??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >, COMDAT

; 1743 :     _Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set) { // copy to new node

$LN45:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx

; 2030 :         return _Node::_Buynode(_Getal(), _Get_scary()->_Myhead, _STD forward<_Valty>(_Val)...);

	mov	rbp, QWORD PTR [rcx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1036 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	QWORD PTR _Newnode$7[rsp], rcx

; 1043 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	xor	edi, edi
	mov	QWORD PTR _Newnode$7[rsp+8], rdi

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	lea	ecx, QWORD PTR [rdi+1]
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	rsi, rax
	mov	QWORD PTR _Newnode$7[rsp+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 358  :         allocator_traits<_Alloc>::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _STD forward<_Valty>(_Val)...);

	lea	rdx, QWORD PTR [rax+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	lea	ecx, QWORD PTR [rdi+40]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	r14, rax
	mov	QWORD PTR $T1[rsp], rax
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rbx+8], edi
	je	SHORT $LN42@Copy_or_mo
	cmp	QWORD PTR [rbx], rdi
	je	SHORT $LN42@Copy_or_mo
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	r8, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [r8+8]
	jmp	SHORT $LN23@Copy_or_mo
$LN42@Copy_or_mo:
	mov	rax, QWORD PTR [rbx]
$LN23@Copy_or_mo:
	mov	QWORD PTR [r14], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	mov	eax, DWORD PTR [rbx+8]
	cmp	QWORD PTR [rbx], rdi
	je	SHORT $LN24@Copy_or_mo
	test	eax, eax
	setne	dil
	jmp	SHORT $LN25@Copy_or_mo
$LN24@Copy_or_mo:
	mov	edi, eax
$LN25@Copy_or_mo:
	mov	DWORD PTR [r14+8], edi

; 1719 :       }

	lea	rdx, QWORD PTR [rbx+16]
	lea	rcx, QWORD PTR [r14+16]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rsi
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 360  :         _Construct_in_place(_Newnode._Ptr->_Parent, _Myhead);

	lea	rdx, QWORD PTR [rsi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 361  :         _Construct_in_place(_Newnode._Ptr->_Right, _Myhead);

	lea	rdx, QWORD PTR [rsi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 362  :         _Newnode._Ptr->_Color = _Red;

	mov	WORD PTR [rsi+24], 0

; 1744 :         return _Buynode(_Val);

	mov	rax, rsi

; 1745 :     }

	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	add	rsp, 48					; 00000030H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Newnode$7 = 32
$T1 = 80
this$ = 80
_Val$ = 88
__formal$dead$ = 96
__formal$dead$ = 104
?dtor$0@?0???$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >'::`1'::dtor$0
	lea	rcx, QWORD PTR _Newnode$7[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$0@?0???$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >'::`1'::dtor$0
_Newnode$7 = 32
$T1 = 80
this$ = 80
_Val$ = 88
__formal$dead$ = 96
__formal$dead$ = 104
?dtor$1@?0???$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >'::`1'::dtor$1
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0???$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Newnode$7 = 32
$T1 = 80
this$ = 80
_Val$ = 88
__formal$dead$ = 96
__formal$dead$ = 104
?dtor$0@?0???$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >'::`1'::dtor$0
	lea	rcx, QWORD PTR _Newnode$7[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$0@?0???$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Newnode$7 = 32
$T1 = 80
this$ = 80
_Val$ = 88
__formal$dead$ = 96
__formal$dead$ = 104
?dtor$1@?0???$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >'::`1'::dtor$1
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0???$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z
_TEXT	SEGMENT
this$ = 48
_Al$ = 56
_Rootnode$ = 64
??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 732  :     void _Erase_tree_and_orphan(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

$LN31:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx

; 733  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

	cmp	BYTE PTR [r8+25], 0
	jne	SHORT $LN3@Erase_tree
	npad	12
$LL2@Erase_tree:

; 734  :             _Erase_tree_and_orphan(_Al, _Rootnode->_Right);

	mov	r8, QWORD PTR [rdi+16]
	mov	rdx, rsi
	mov	rcx, rbp
	call	??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility

; 570  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rbx, rdi

; 571  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rdi, QWORD PTR [rdi]
	lea	rcx, QWORD PTR [rbx+48]
	call	??1Value@Json@@QEAA@XZ			; Json::Value::~Value
	npad	1
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	QWORD PTR [rbx+32], 0
	je	SHORT $LN18@Erase_tree
	cmp	DWORD PTR [rbx+40], 1
	jne	SHORT $LN18@Erase_tree

; 199  :                          : other.index_ )

	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	npad	1
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx+32]
	call	QWORD PTR [rax+16]
	npad	1
$LN18@Erase_tree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 666  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	edx, 72					; 00000048H
	mov	rcx, rbx
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 733  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

	cmp	BYTE PTR [rdi+25], 0
	je	SHORT $LL2@Erase_tree
$LN3@Erase_tree:

; 735  :             auto _To_delete = _STD exchange(_Rootnode, _Rootnode->_Left);
; 736  :             _Orphan_ptr(_To_delete);
; 737  :             _Alnode::value_type::_Freenode(_Al, _To_delete);
; 738  :         }
; 739  :     }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\utility
;	COMDAT ??$exchange@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Val$ = 8
_New_val$ = 16
??$exchange@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::nullptr_t>, COMDAT

; 570  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);
; 571  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rdx, QWORD PTR [rdx]
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rcx], rdx

; 572  :     return _Old_val;
; 573  : }

	ret	0
??$exchange@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Al_$ = 56
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 784  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

$LN12:
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1036 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	QWORD PTR [rcx], rdx

; 1043 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	QWORD PTR [rcx+8], 0

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 1044 :         _Ptr = _Al.allocate(1);

	mov	QWORD PTR [rbx+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 786  :     }

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Al_$ = 56
?dtor$0@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA PROC ; `std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$0@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA ENDP ; `std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Al_$ = 56
?dtor$0@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA PROC ; `std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$0@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z@4HA ENDP ; `std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAAXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Allocate, COMDAT

; 1042 :     void _Allocate() { // disengage *this, then allocate a new memory block

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 1043 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	QWORD PTR [rcx+8], 0

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	ecx, 1
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 1044 :         _Ptr = _Al.allocate(1);

	mov	QWORD PTR [rbx+8], rax

; 1045 :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAAXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Al_$ = 16
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 1036 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	QWORD PTR [rcx], rdx
	mov	rax, rcx
	mov	QWORD PTR [rcx+8], 0
	ret	0
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z
_TEXT	SEGMENT
__formal$dead$ = 48
$T1 = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 670  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN17:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, 40					; 00000028H
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rdi, rax
	mov	QWORD PTR $T1[rsp], rax
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rbx+8], 0
	je	SHORT $LN14@construct
	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN14@construct
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	r8, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [r8+8]
	jmp	SHORT $LN10@construct
$LN14@construct:
	mov	rax, QWORD PTR [rbx]
$LN10@construct:
	mov	QWORD PTR [rdi], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	mov	ecx, DWORD PTR [rbx+8]
	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN11@construct
	xor	eax, eax
	test	ecx, ecx
	setne	al
	jmp	SHORT $LN12@construct
$LN11@construct:
	mov	eax, ecx
$LN12@construct:
	mov	DWORD PTR [rdi+8], eax

; 1719 :       }

	lea	rdx, QWORD PTR [rbx+16]
	lea	rcx, QWORD PTR [rdi+16]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 672  :     }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__formal$dead$ = 48
$T1 = 48
_Ptr$ = 56
<_Args_0>$ = 64
?dtor$0@?0???$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z@4HA PROC ; `std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z@4HA ENDP ; `std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
__formal$dead$ = 48
$T1 = 48
_Ptr$ = 56
<_Args_0>$ = 64
?dtor$0@?0???$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z@4HA PROC ; `std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@QEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AEAU31@@Z@4HA ENDP ; `std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
;	COMDAT ??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@0@Z
_TEXT	SEGMENT
_Obj$ = 48
<_Args_0>$ = 56
??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>, COMDAT

; 202  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rcx
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 204  :         _Ty(_STD forward<_Types>(_Args)...);
; 205  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
_Newnode$7 = 32
$T1 = 80
this$ = 80
<_Val_0>$ = 88
??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 2029 :     _Nodeptr _Buynode(_Valty&&... _Val) {

$LN43:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx

; 2030 :         return _Node::_Buynode(_Getal(), _Get_scary()->_Myhead, _STD forward<_Valty>(_Val)...);

	mov	rbp, QWORD PTR [rcx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1036 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	QWORD PTR _Newnode$7[rsp], rcx

; 1043 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	xor	edi, edi
	mov	QWORD PTR _Newnode$7[rsp+8], rdi

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	lea	ecx, QWORD PTR [rdi+1]
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	rsi, rax
	mov	QWORD PTR _Newnode$7[rsp+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 358  :         allocator_traits<_Alloc>::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _STD forward<_Valty>(_Val)...);

	lea	rdx, QWORD PTR [rax+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	lea	ecx, QWORD PTR [rdi+40]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	r14, rax
	mov	QWORD PTR $T1[rsp], rax
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rbx+8], edi
	je	SHORT $LN40@Buynode
	cmp	QWORD PTR [rbx], rdi
	je	SHORT $LN40@Buynode
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	r8, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [r8+8]
	jmp	SHORT $LN21@Buynode
$LN40@Buynode:
	mov	rax, QWORD PTR [rbx]
$LN21@Buynode:
	mov	QWORD PTR [r14], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	mov	eax, DWORD PTR [rbx+8]
	cmp	QWORD PTR [rbx], rdi
	je	SHORT $LN22@Buynode
	test	eax, eax
	setne	dil
	jmp	SHORT $LN23@Buynode
$LN22@Buynode:
	mov	edi, eax
$LN23@Buynode:
	mov	DWORD PTR [r14+8], edi

; 1719 :       }

	lea	rdx, QWORD PTR [rbx+16]
	lea	rcx, QWORD PTR [r14+16]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rsi
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 360  :         _Construct_in_place(_Newnode._Ptr->_Parent, _Myhead);

	lea	rdx, QWORD PTR [rsi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 361  :         _Construct_in_place(_Newnode._Ptr->_Right, _Myhead);

	lea	rdx, QWORD PTR [rsi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 362  :         _Newnode._Ptr->_Color = _Red;

	mov	WORD PTR [rsi+24], 0

; 2030 :         return _Node::_Buynode(_Getal(), _Get_scary()->_Myhead, _STD forward<_Valty>(_Val)...);

	mov	rax, rsi

; 2031 :     }

	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	add	rsp, 48					; 00000030H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
??$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Newnode$7 = 32
$T1 = 80
this$ = 80
<_Val_0>$ = 88
?dtor$0@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
	lea	rcx, QWORD PTR _Newnode$7[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$0@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
_Newnode$7 = 32
$T1 = 80
this$ = 80
<_Val_0>$ = 88
?dtor$1@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Newnode$7 = 32
$T1 = 80
this$ = 80
<_Val_0>$ = 88
?dtor$0@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
	lea	rcx, QWORD PTR _Newnode$7[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$0@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Newnode$7 = 32
$T1 = 80
this$ = 80
<_Val_0>$ = 88
?dtor$1@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0???$_Buynode@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IEAAPEAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@1@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z PROC ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>, COMDAT

; 1719 :       }

$LN15:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rdx+8], 0
	je	SHORT $LN12@pair
	cmp	QWORD PTR [rdx], 0
	je	SHORT $LN12@pair
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+8]
	jmp	SHORT $LN8@pair
$LN12@pair:
	mov	rax, QWORD PTR [rdx]
$LN8@pair:
	mov	QWORD PTR [rdi], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	mov	ecx, DWORD PTR [rbx+8]
	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN9@pair
	xor	eax, eax
	test	ecx, ecx
	setne	al
	jmp	SHORT $LN10@pair
$LN9@pair:
	mov	eax, ecx
$LN10@pair:
	mov	DWORD PTR [rdi+8], eax

; 1719 :       }

	lea	rdx, QWORD PTR [rbx+16]
	lea	rcx, QWORD PTR [rdi+16]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z@4HA PROC ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z@4HA ENDP ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z@4HA PROC ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$0@?0???0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QEAA@AEBU01@@Z@4HA ENDP ; `std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree
;	COMDAT ??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
_Newnode$ = 32
$T1 = 80
_Al$ = 80
_Myhead$ = 88
<_Val_0>$ = 96
??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buynode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 353  :     static _Nodeptr _Buynode(_Alloc& _Al, _Nodeptr _Myhead, _Valty&&... _Val) {

$LN41:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 48					; 00000030H
	mov	rbx, r8
	mov	rbp, rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 1036 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	QWORD PTR _Newnode$[rsp], rcx

; 1043 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	xor	edi, edi
	mov	QWORD PTR _Newnode$[rsp+8], rdi

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	lea	ecx, QWORD PTR [rdi+1]
	call	??$_Get_size_of_n@$0EI@@std@@YA_K_K@Z	; std::_Get_size_of_n<72>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
	mov	rsi, rax
	mov	QWORD PTR _Newnode$[rsp+8], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 358  :         allocator_traits<_Alloc>::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _STD forward<_Valty>(_Val)...);

	lea	rdx, QWORD PTR [rax+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	lea	ecx, QWORD PTR [rdi+40]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	r14, rax
	mov	QWORD PTR $T1[rsp], rax
; File D:\Code\LibShared\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	cmp	DWORD PTR [rbx+8], edi
	je	SHORT $LN38@Buynode
	cmp	QWORD PTR [rbx], rdi
	je	SHORT $LN38@Buynode
	call	?valueAllocator@Json@@YAAEAPEAVValueAllocator@1@XZ ; Json::valueAllocator
	mov	rcx, QWORD PTR [rax]
	mov	r8, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [r8+8]
	jmp	SHORT $LN19@Buynode
$LN38@Buynode:
	mov	rax, QWORD PTR [rbx]
$LN19@Buynode:
	mov	QWORD PTR [r14], rax

; 189  :                                   : cstr )
; 190  :    , index_( allocate )
; 191  : {

	mov	eax, DWORD PTR [rbx+8]
	cmp	QWORD PTR [rbx], rdi
	je	SHORT $LN20@Buynode
	test	eax, eax
	setne	dil
	jmp	SHORT $LN21@Buynode
$LN20@Buynode:
	mov	edi, eax
$LN21@Buynode:
	mov	DWORD PTR [r14+8], edi

; 1719 :       }

	lea	rdx, QWORD PTR [rbx+16]
	lea	rcx, QWORD PTR [r14+16]
	call	??0Value@Json@@QEAA@AEBV01@@Z		; Json::Value::Value
	npad	1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	rdx, rsi
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 360  :         _Construct_in_place(_Newnode._Ptr->_Parent, _Myhead);

	lea	rdx, QWORD PTR [rsi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 361  :         _Construct_in_place(_Newnode._Ptr->_Right, _Myhead);

	lea	rdx, QWORD PTR [rsi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xmemory

; 203  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR [rax], rbp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\xtree

; 362  :         _Newnode._Ptr->_Color = _Red;

	mov	WORD PTR [rsi+24], 0

; 363  :         _Newnode._Ptr->_Isnil = false;
; 364  :         return _Newnode._Release();

	mov	rax, rsi

; 365  :     }

	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	add	rsp, 48					; 00000030H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buynode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Newnode$ = 32
$T1 = 80
_Al$ = 80
_Myhead$ = 88
<_Val_0>$ = 96
?dtor$0@?0???$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buynode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
	lea	rcx, QWORD PTR _Newnode$[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$0@?0???$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buynode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
_Newnode$ = 32
$T1 = 80
_Al$ = 80
_Myhead$ = 88
<_Val_0>$ = 96
?dtor$1@?0???$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buynode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0???$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buynode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Newnode$ = 32
$T1 = 80
_Al$ = 80
_Myhead$ = 88
<_Val_0>$ = 96
?dtor$0@?0???$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buynode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
	lea	rcx, QWORD PTR _Newnode$[rdx]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
?dtor$0@?0???$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buynode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Newnode$ = 32
$T1 = 80
_Al$ = 80
_Myhead$ = 88
<_Val_0>$ = 96
?dtor$1@?0???$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA PROC ; `std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buynode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
	mov	rcx, QWORD PTR $T1[rdx]
	jmp	??1CZString@Value@Json@@QEAA@XZ		; Json::Value::CZString::~CZString
?dtor$1@?0???$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@std@@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PEAX@std@@@1@PEAU01@AEAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z@4HA ENDP ; `std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *>::_Buynode<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >,std::pair<Json::Value::CZString const ,Json::Value> &>'::`1'::dtor$1
text$x	ENDS
END
